<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vite反向代理、设置别名</title>
      <link href="2021/03/04/vue3-alias/"/>
      <url>2021/03/04/vue3-alias/</url>
      
        <content type="html"><![CDATA[<p>根目录下<code>vite.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">      target: <span class="string">&#x27;http://*.*.*.*:*&#x27;</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      rewrite: <span class="function"><span class="params">path</span> =&gt;</span> path.replace(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">&#x27;/@/&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">    <span class="string">&quot;/@assets/&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/assets&quot;</span>),</span><br><span class="line">    <span class="string">&quot;/@request/&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/framework/request&quot;</span>),</span><br><span class="line">    <span class="string">&quot;/@api/&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/framework/api&quot;</span>),</span><br><span class="line">    <span class="string">&quot;/@utils/&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/framework/utils&quot;</span>),</span><br><span class="line">    <span class="string">&quot;/@router/&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/framework/router&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="2021/03/02/sort/"/>
      <url>2021/03/02/sort/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>排序的常用算法 之 有事没事敲一遍，下面的图片来自百度图片；</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><img src="/images/sort/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1,冒泡排序（两两对比）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr.length) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="keyword">const</span> len = arr.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="comment">// 互换位置</span></span><br><span class="line">        [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]];</span><br><span class="line">        <span class="comment">// 只要对比还有交换，就证明排序还没结束</span></span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag) <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(bubbleSort([78, 6, 7, 3, 9, 45, 10, 8]))</span></span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p><img src="/images/sort/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择排序(选最小值)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!arr.length) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> len = arr.length;</span><br><span class="line">  <span class="keyword">let</span> minIndex;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    minIndex = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="comment">// 还有值比当前最小值小</span></span><br><span class="line">      <span class="keyword">if</span> (arr[minIndex] &gt; arr[j]) &#123;</span><br><span class="line">        <span class="comment">// 重新赋值minIndex</span></span><br><span class="line">        minIndex = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最小值index变了， 把minIndex位置上的值替换掉</span></span><br><span class="line">    <span class="keyword">if</span> (minIndex !== i) &#123;</span><br><span class="line">      [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(selectSort([78, 6, 7, 3, 9, 45, 10, 8]))</span></span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p><img src="/images/sort/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入排序(范围排序)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr.length) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缓存数组长度</span></span><br><span class="line">  <span class="keyword">const</span> len = arr.length;</span><br><span class="line">  <span class="comment">// temp 用来保存当前需要插入的元素</span></span><br><span class="line">  <span class="keyword">let</span> temp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="comment">// 范围</span></span><br><span class="line">    temp = arr[i];</span><br><span class="line">    <span class="keyword">let</span> j = i;</span><br><span class="line">    <span class="comment">// 判断前一个数据是否比后面一位大</span></span><br><span class="line">    <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; temp) &#123;</span><br><span class="line">      <span class="comment">// 大的数据向后移动位置，让出一个空位用来放小值</span></span><br><span class="line">      arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环让位，让出来的空位就是这个 待插入值 的位置</span></span><br><span class="line">    arr[j] = temp;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(insertSort([2, 6, 7, 3, 9, 45, 10, 0]))</span></span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序是对<code>分治思想</code>的典型应用。</p><ul><li>分解子问题</li><li>求解每个子问题</li><li>合并子问题的解，得出大问题的解</li></ul><blockquote><p>看图理解</p></blockquote><p><img src="/images/sort/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.gif" alt="图一"></p><p><img src="/images/sort/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F2.gif" alt="图二"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把数组平分拆分成最小单元，再合并，合并过程中排序，合并结束排序结束</span></span><br><span class="line"><span class="comment">// 拆分 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!arr &amp;&amp; !arr.length) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> len = arr.length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 边界</span></span><br><span class="line">  <span class="keyword">if</span> (arr.length === <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="comment">// 中点</span></span><br><span class="line">  <span class="keyword">const</span> center = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拆分左边</span></span><br><span class="line">  <span class="keyword">const</span> leftArr = mergeSort(arr.slice(<span class="number">0</span>, center));</span><br><span class="line">  <span class="comment">// 拆分右边</span></span><br><span class="line">  <span class="keyword">const</span> rightArr = mergeSort(arr.slice(center, len));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mergeArr(leftArr, rightArr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mergeSort([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">59</span>, <span class="number">12</span>, <span class="number">32</span>, <span class="number">7</span>, <span class="number">21</span>])); <span class="comment">// [ 2,  3,  4,  4, 6, 7, 12, 21, 32, 59 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并两个有序数组(小到大)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeArr</span>(<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr1 &amp;&amp; !arr2) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>; <span class="comment">// 声明指针</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缓存数组长度</span></span><br><span class="line">  <span class="keyword">let</span> len1 = arr1.length;</span><br><span class="line">  <span class="keyword">let</span> len2 = arr2.length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 结果数组</span></span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并</span></span><br><span class="line">  <span class="keyword">while</span> (i &lt; len1 &amp;&amp; j &lt; len2) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr1[i] &lt; arr2[j]) &#123;</span><br><span class="line">      res.push(arr1[i]);</span><br><span class="line">      i++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.push(arr2[j]);</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 剩下的数据直接放入</span></span><br><span class="line">  <span class="keyword">if</span> (i &lt; len1) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.concat(arr1.slice(i));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.concat(arr2.slice(j));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><blockquote><p>排序算法还有很多，什么时候敲了再更新。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>generator打印斐波拉契数列</title>
      <link href="2021/02/26/generator/"/>
      <url>2021/02/26/generator/</url>
      
        <content type="html"><![CDATA[<h3 id="斐波拉契数列"><a href="#斐波拉契数列" class="headerlink" title="斐波拉契数列"></a>斐波拉契数列</h3><p>斐波拉契数列又称“兔子数列”，例如 <code>[0, 1, 1, 2, 3, 8, 13, 21, 34]</code>;<br>数学公式为：<code> F(n)=F(n - 1)+F(n - 2)</code></p><h3 id="打印斐波拉契数列"><a href="#打印斐波拉契数列" class="headerlink" title="打印斐波拉契数列"></a>打印斐波拉契数列</h3><h4 id="普通写法"><a href="#普通写法" class="headerlink" title="普通写法"></a>普通写法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>len 返回数组的长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setFS</span>(<span class="params">len</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!len) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (arr.length &lt; len) &#123;</span><br><span class="line">    [a, b] = [b, a + b];</span><br><span class="line">    arr.push(b);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(setFS(<span class="number">10</span>))  <span class="comment">// [0, 1, 1, 2, 3, 5, 8, 13, 21, 34 ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="generator写法"><a href="#generator写法" class="headerlink" title="generator写法"></a>generator写法</h4><p>这种写法并没有比普通写法简单，主要是为了利用generator的方法； 其中<code>while (true)</code>是让FS这个迭代器无限次迭代，相当于一直 <code>yield b</code>,这样在 <code>next()</code>执行迭代器的时候，<code>next</code>多少次就会有多少个<code>yield b</code>;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">FS</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> a;</span><br><span class="line">  <span class="keyword">yield</span> b;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    [a, b] = [b, a + b];</span><br><span class="line">    <span class="keyword">yield</span> b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setFS</span>(<span class="params">len</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!len) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// generator对象</span></span><br><span class="line">  <span class="keyword">let</span> geneFS = FS();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    res.push(geneFS.next().value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(setFS(<span class="number">10</span>)) <span class="comment">// [0, 1, 1, 2, 3, 5, 8, 13, 21, 34 ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树算法题(学习笔记)</title>
      <link href="2021/02/26/binaryTree2/"/>
      <url>2021/02/26/binaryTree2/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>仅记录自己敲过的题，留个爪印。</p><blockquote><p>注意：二叉树问题，基本要考虑是否采用递归</p></blockquote><h3 id="二叉树翻转"><a href="#二叉树翻转" class="headerlink" title="二叉树翻转"></a>二叉树翻转</h3><p>二叉树翻转为左子树和右子树翻转位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reverse = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> left = reverse(root.left);</span><br><span class="line">    <span class="keyword">const</span> right = reverse(root.right);</span><br><span class="line"></span><br><span class="line">    root.right = left;</span><br><span class="line">    root.left = right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p>什么是二叉搜索树？<br>二叉搜索树（又：二叉搜索树，二叉排序树），一棵二叉搜索树有如下性质：</p><ul><li>是一棵空树</li><li>是一棵由根结点、左子树、右子树组成的树，</li><li>同时左子树和右子树都是二叉搜索树，</li><li>且左子树上所有结点的数据域都小于等于根结点的数据域，右子树上所有结点的数据域都大于等于根结点的数据域</li></ul><p>例如：</p><pre><code>         8       /  \      5     9     / \     \    4    6    10</code></pre><p>  关于二叉搜索树高频操作：</p><ol><li>查找数据域为某一特定值的结点</li><li>插入新结点</li><li>删除指定结点</li></ol><h4 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h4><blockquote><p>题：1.查找数据域为某一特定值的结点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root1 = &#123;</span><br><span class="line">    val: <span class="number">8</span>,</span><br><span class="line">    left: &#123;</span><br><span class="line">        val: <span class="number">6</span>,</span><br><span class="line">        left: &#123;</span><br><span class="line">            val: <span class="number">5</span></span><br><span class="line">        &#125;,</span><br><span class="line">        right: &#123;</span><br><span class="line">            val: <span class="number">7</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    right: &#123;</span><br><span class="line">        val: <span class="number">9</span>,</span><br><span class="line">        right: &#123;</span><br><span class="line">            val: <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>data 要找的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>root 二叉树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> search = <span class="function"><span class="keyword">function</span> (<span class="params">data, root</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!data || !root) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.val === data) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;目标结点是：&#x27;</span>, root)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &lt; root.val) &#123;</span><br><span class="line">        <span class="comment">// 左节点的值小于上节点</span></span><br><span class="line">        search(data, root.left)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &gt; root.val) &#123;</span><br><span class="line">        <span class="comment">// 右节点的值大于上节点</span></span><br><span class="line">        search(data, root.right)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// search(9, root1)  // 目标结点是： &#123; val: 9, right: &#123; val: 10 &#125; &#125;</span></span><br><span class="line"><span class="comment">// search(6, root1)  // 目标结点是： &#123; val: 6, left: &#123; val: 5 &#125;, right: &#123; val: 7 &#125; &#125;</span></span><br></pre></td></tr></table></figure><h4 id="插入新结点"><a href="#插入新结点" class="headerlink" title="插入新结点"></a>插入新结点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> root2 = &#123;</span><br><span class="line">    val: <span class="number">9</span>,</span><br><span class="line">    left: &#123;</span><br><span class="line">        val: <span class="number">5</span>,</span><br><span class="line">        left: &#123;</span><br><span class="line">            val: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        right: &#123;</span><br><span class="line">            val: <span class="number">7</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    right: &#123;</span><br><span class="line">        val: <span class="number">10</span>,</span><br><span class="line">        right: &#123;</span><br><span class="line">            val: <span class="number">12</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeNode</span>(<span class="params">val, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.val = (val === <span class="literal">undefined</span> ? <span class="number">0</span> : val)</span><br><span class="line">    <span class="built_in">this</span>.left = (left === <span class="literal">undefined</span> ? <span class="literal">null</span> : left)</span><br><span class="line">    <span class="built_in">this</span>.right = (right === <span class="literal">undefined</span> ? <span class="literal">null</span> : right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>data 插入的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>root 二叉树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> insert = <span class="function"><span class="keyword">function</span> (<span class="params">data, root</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!data) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果root是空的，则为一个可以插入的空二叉树</span></span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="comment">// 用一个值为n的结点占据这个空位</span></span><br><span class="line">        root = <span class="keyword">new</span> TreeNode(data)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; data) &#123;</span><br><span class="line">        root.left = insert(data, root.left)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; data) &#123;</span><br><span class="line">        root.right = insert(data, root.right)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(JSON.stringify(insert(2, root2)))</span></span><br></pre></td></tr></table></figure><h4 id="删除指定结点"><a href="#删除指定结点" class="headerlink" title="删除指定结点"></a>删除指定结点</h4><p>要保持搜索二叉树的合法性，中序遍历是<code>有序</code>的!<br>删除节点这里需要注意：</p><ul><li>结点不存在，定位到了空结点。直接返回即可。</li><li>需要删除的目标结点没有左孩子也没有右孩子——它是一个叶子结点，删掉它不会对其它结点造成任何影响，直接删除即可。</li><li>需要删除的目标结点存在左子树，那么就去左子树里寻找小于目标结点值的最大结点，用这个结点覆盖掉目标结点</li><li>需要删除的目标结点存在右子树，那么就去右子树里寻找大于目标结点值的最小结点，用这个结点覆盖掉目标结点</li><li>需要删除的目标结点既有左子树、又有右子树，这时就有两种做法了：要么取左子树中值最大的结点，要么取右子树中取值最小的结点。两个结点中任取一个覆盖掉目标结点，都可以维持二叉搜索树的数据有序性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root3 = &#123;</span><br><span class="line">    val: <span class="number">9</span>,</span><br><span class="line">    left: &#123;</span><br><span class="line">        val: <span class="number">5</span>,</span><br><span class="line">        left: &#123;</span><br><span class="line">            val: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        right: &#123;</span><br><span class="line">            val: <span class="number">7</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    right: &#123;</span><br><span class="line">        val: <span class="number">11</span>,</span><br><span class="line">        left: &#123;</span><br><span class="line">            val: <span class="number">10</span></span><br><span class="line">        &#125;,</span><br><span class="line">        right: &#123;</span><br><span class="line">            val: <span class="number">12</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inorder(root3);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteNode</span>(<span class="params">val, root</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.val === val) &#123;</span><br><span class="line">        <span class="comment">// 删除(要保持搜索二叉树的合法性，中序遍历是有序的)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root.left) &#123;</span><br><span class="line">            <span class="comment">// 从左子树中找到最大值</span></span><br><span class="line">            <span class="keyword">const</span> maxNode = findMax(root.left)</span><br><span class="line">            <span class="comment">// 用这个最大节点覆盖掉这个删除的节点</span></span><br><span class="line">            root.val = maxNode.val;</span><br><span class="line">            <span class="comment">// 找到的这个最大节点替换了删除节点，需要删除位上的这个节点</span></span><br><span class="line">            root.left = deleteNode(maxNode.val, root.left)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.right) &#123;</span><br><span class="line">            <span class="comment">// 从右子树中找到最小值 </span></span><br><span class="line">            <span class="keyword">const</span> minNode = findMin(root.right);</span><br><span class="line">            root.val = minNode.val;</span><br><span class="line">            root.right = deleteNode(minNode.val, root.right);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!root.right &amp;&amp; !root.left) &#123;</span><br><span class="line">            <span class="comment">// 左右子树都不存在</span></span><br><span class="line">            root = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; root.val) &#123;</span><br><span class="line"></span><br><span class="line">        root.right = deleteNode(val, root.right);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; root.val) &#123;</span><br><span class="line"></span><br><span class="line">        root.left = deleteNode(val, root.left);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寻找左子树最大值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMax</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (root.right) &#123;</span><br><span class="line">        root = root.right</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寻找右子树的最小值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMin</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (root.left) &#123;</span><br><span class="line">        root = root.left</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(deleteNode(11, root3))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="对定义的考察：二叉搜索树的验证"><a href="#对定义的考察：二叉搜索树的验证" class="headerlink" title="对定义的考察：二叉搜索树的验证"></a>对定义的考察：二叉搜索树的验证</h4><blockquote><p>题目描述：给定一个二叉树，判断其是否是一个有效的二叉搜索树(不需要考虑相等情况)。</p></blockquote><ul><li>节点的左子树只包含小于当前节点的数。</li><li>节点的右子树只包含大于当前节点的数。</li><li>所有左子树和右子树自身必须也是二叉搜索树。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root4 = &#123;</span><br><span class="line">    val: <span class="number">9</span>,</span><br><span class="line">    left: &#123;</span><br><span class="line">        val: <span class="number">5</span>,</span><br><span class="line">        left: &#123;</span><br><span class="line">            val: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        right: &#123;</span><br><span class="line">            val: <span class="number">7</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    right: &#123;</span><br><span class="line">        val: <span class="number">8</span>,</span><br><span class="line">        left: &#123;</span><br><span class="line">            val: <span class="number">10</span></span><br><span class="line">        &#125;,</span><br><span class="line">        right: &#123;</span><br><span class="line">            val: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isValidBST = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 空树为合法</span></span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 三个值比较 根节点 左子树 右子树</span></span><br><span class="line">    <span class="keyword">if</span> ((root.right &amp;&amp; root.right.val &lt; root.val) || (root.left &amp;&amp; root.left.val &gt; root.val)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isValidBST(root.right) &amp;&amp; isValidBST(root.left)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(isValidBST(root4))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="对特性的考察：将排序数组转化为二叉搜索树"><a href="#对特性的考察：将排序数组转化为二叉搜索树" class="headerlink" title="对特性的考察：将排序数组转化为二叉搜索树"></a>对特性的考察：将排序数组转化为二叉搜索树</h4><blockquote><p>题目描述：将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树<br>给定有序数组: [-10,-3,0,5,9]</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> sortedArrayToBST = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(nums &amp;&amp; nums.length)) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> len = nums.length</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为要保证二叉树的平衡，所以数组中间的值为根节点</span></span><br><span class="line">    <span class="keyword">let</span> root = buildBST(<span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">buildBST</span>(<span class="params">startIndex, endIndex</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 数组走完了</span></span><br><span class="line">        <span class="keyword">if</span> (startIndex &gt; endIndex) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        <span class="comment">// 找根节点  0,1,2,3, 4,5,6, 7,8 (startIndex + (endIndex - startIndex)/2)为计算 startIndex, endIndex 这个两个index的中间index为多少</span></span><br><span class="line">        <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((startIndex + (endIndex - startIndex) / <span class="number">2</span>));</span><br><span class="line">        <span class="comment">// 生成根节点</span></span><br><span class="line">        <span class="keyword">let</span> cur = <span class="keyword">new</span> TreeNode(nums[mid])</span><br><span class="line">        <span class="comment">// 左子树</span></span><br><span class="line">        cur.left = buildBST(startIndex, mid - <span class="number">1</span>)</span><br><span class="line">        <span class="comment">// 右子树</span></span><br><span class="line">        cur.right = buildBST(mid + <span class="number">1</span>, endIndex)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cur</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(sortedArrayToBST([-10, -3, 0, 5, 9]))</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> BFS </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>留言板动态信封效果</title>
      <link href="2021/02/05/theme-comments/"/>
      <url>2021/02/05/theme-comments/</url>
      
        <content type="html"><![CDATA[<p>这里是参考的<a href="https://akilar.top/posts/e2d3c450/">糖果屋</a>留言板的效果，感谢大佬提供的教程。<br>顺便也为自己魔改主题留个记录，方便后期优化~😉</p><h3 id="新建留言板页面"><a href="#新建留言板页面" class="headerlink" title="新建留言板页面"></a>新建留言板页面</h3><blockquote><p>如果已经生成过留言板的童鞋可以直接跳过~</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page comments</span><br></pre></td></tr></table></figure><h3 id="修改留言板内容"><a href="#修改留言板内容" class="headerlink" title="修改留言板内容"></a>修改留言板内容</h3><blockquote><p>找到<code>source/comments/index.md</code>：</p></blockquote><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 留言板</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">---</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/css/commentsbar.css&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="emphasis">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;computer&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;maincontent&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;form-wrap&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/Akilarlxh/Valine-Admin@v1.0/source/img/before.png&quot;</span> <span class="attr">id</span>=<span class="string">&quot;beforeimg&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;envelope&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">          <span class="xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;formmain&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">              <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;headerimg&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://ae01.alicdn.com/kf/U5bb04af32be544c4b41206d9a42fcacfd.jpg&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="emphasis">              <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 5px 20px;&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">                <span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">                  <span class="xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">calss</span>=<span class="string">&quot;title3&quot;</span>&gt;</span></span>来自Akilar的留言:<span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">                <span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">                <span class="xml"><span class="tag">&lt;<span class="name">center</span> <span class="attr">class</span>=<span class="string">&quot;comments&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">                  有什么想问的？<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">                  有什么想说的？<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">                  有什么想吐槽的？<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">                  哪怕是有什么想吃的，都可以告诉我哦~<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">                <span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">                <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottomcontent&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">                <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;bottomimg&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://ae01.alicdn.com/kf/U0968ee80fd5c4f05a02bdda9709b041eE.png&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="emphasis">                <span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">                <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bottomhr&quot;</span>&gt;</span></span>自动书记人偶竭诚为您服务！<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">              <span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">            <span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">          <span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">        <span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;afterimg&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/Akilarlxh/Valine-Admin@v1.0/source/img/after.png&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">      <span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">    <span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">  <span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mobile&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">    <span class="xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;formmain&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;headerimg&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://ae01.alicdn.com/kf/U5bb04af32be544c4b41206d9a42fcacfd.jpg&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="emphasis">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 5px 20px;&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">          <span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">            <span class="xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;title3&quot;</span>&gt;</span></span>来自Akilar的留言:<span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">          <span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">          <span class="xml"><span class="tag">&lt;<span class="name">center</span> <span class="attr">class</span>=<span class="string">&quot;comments&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">            有什么想问的？<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">            有什么想说的？<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">            有什么想吐槽的？<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">            哪怕是有什么想吃的，都可以告诉我哦~<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">          <span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">          <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottomcontent&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ae01.alicdn.com/kf/U0968ee80fd5c4f05a02bdda9709b041eE.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bottomhr&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">          <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bottomhr&quot;</span>&quot;&gt;</span></span>自动书记人偶竭诚为您服务！<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">        <span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">      <span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">    <span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">  <span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><h3 id="增加样式"><a href="#增加样式" class="headerlink" title="增加样式"></a>增加样式</h3><p>在<code>/butterfly/source/css/self.css</code>中增加如下样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 滚动条隐藏 */</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 禁用图片点击,butterfly渲染后会给图片套上fancybox，点开后会造成信笺偏移*/</span></span><br><span class="line"><span class="selector-class">.fancybox</span>&#123;</span><br><span class="line">   <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* top-img隐藏 */</span></span><br><span class="line"><span class="selector-id">#page-header</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 宽度小于530px隐藏信封 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">530px</span>) &#123;</span><br><span class="line">  <span class="selector-id">#computer</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">530px</span>) &#123;</span><br><span class="line">  <span class="selector-id">#mobile</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">0rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#form-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">447px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span> ease-in-out .<span class="number">3s</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 调整信封划出高度，换信笺内容以后可在此设置height */</span></span><br><span class="line"><span class="selector-id">#form-wrap</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1050px</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#beforeimg</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">126px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">530px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">317px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">100</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#afterimg</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">530px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">259px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#envelope</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: visible;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span> ease-in-out .<span class="number">3s</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#maincontent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">530px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.headerimg</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.formmain</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">95%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto auto;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.12</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.18</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title3</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">214</span>, <span class="number">175</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comments</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">#ddd</span> <span class="number">1px</span> solid;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">#ddd</span> <span class="number">1px</span> solid;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">#ddd</span> <span class="number">1px</span> solid;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">#ddd</span> <span class="number">1px</span> solid;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Arial&quot;</span>, <span class="string">&quot;Microsoft YaHei&quot;</span>, <span class="string">&quot;黑体&quot;</span>, <span class="string">&quot;宋体&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bottomcontent</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bottomimg</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span> auto <span class="number">5px</span> auto;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bottomhr</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 夜间模式 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span></span><br><span class="line">  <span class="selector-class">.formmain</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span></span><br><span class="line">  <span class="selector-class">.comments</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">90</span>, <span class="number">90</span>, <span class="number">90</span>, <span class="number">0.8</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="将样式注入主题"><a href="#将样式注入主题" class="headerlink" title="将样式注入主题"></a>将样式注入主题</h3><p>在主题的<code>_config.yml</code>中,找到<code>inject</code>,<code>self.css</code>是自己创建用来魔改主题使的样式文件:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/self.css&quot;&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 留言板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给butterfly主题添加看板娘</title>
      <link href="2021/02/03/theme_live2d/"/>
      <url>2021/02/03/theme_live2d/</url>
      
        <content type="html"><![CDATA[<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/images/live2d/live2d.gif" alt="小可爱"></p><h3 id="简单版（单一模型）"><a href="#简单版（单一模型）" class="headerlink" title="简单版（单一模型）"></a>简单版（单一模型）</h3><p><a href="https://github.com/EYHN/hexo-helper-live2d">传送门</a></p><h4 id="1，安装依赖"><a href="#1，安装依赖" class="headerlink" title="1，安装依赖"></a>1，安装依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add  hexo-helper-live2d</span><br></pre></td></tr></table></figure><h4 id="2-在hexo根目录-config-yml中添加如下配置："><a href="#2-在hexo根目录-config-yml中添加如下配置：" class="headerlink" title="2.在hexo根目录_config.yml中添加如下配置："></a>2.在hexo根目录<code>_config.yml</code>中添加如下配置：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Live2D</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># https://github.com/EYHN/hexo-helper-live2d</span></span></span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> <span class="built_in">enable</span>: <span class="literal">false</span></span></span><br><span class="line">  scriptFrom: local # 默认</span><br><span class="line">  pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径)</span><br><span class="line">  pluginJsPath: lib/ # 脚本文件相对与插件根目录路径</span><br><span class="line">  pluginModelPath: assets/ # 模型文件相对与插件根目录路径</span><br><span class="line"><span class="meta">  #</span><span class="bash"> scriptFrom: jsdelivr <span class="comment"># jsdelivr CDN</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> scriptFrom: unpkg <span class="comment"># unpkg CDN</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js <span class="comment"># 你的自定义 url</span></span></span><br><span class="line">  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br><span class="line">  debug: false # 调试, 是否在控制台输出日志</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko # npm-module package name</span><br><span class="line">    # use: wanko # 博客根目录/live2d_models/ 下的目录名</span><br><span class="line">    # use: ./wives/wanko # 相对于博客根目录的路径</span><br><span class="line">    # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true # 手机中是否展示</span><br></pre></td></tr></table></figure><h4 id="3-模型下载"><a href="#3-模型下载" class="headerlink" title="3.模型下载"></a>3.模型下载</h4><p><a href="https://github.com/xiazeyu/live2d-widget-models">下载地址</a><br>推荐使用<code>yarn add &lt;package-name&gt;</code>的方式下载模型，下载完成后在上面第2步中找到 <code>model:</code> <code>use:</code> 后面写上你下载的模型的名字就好，重启一下hexo服务就ok啦。</p><h3 id="高级版（更换模型…）"><a href="#高级版（更换模型…）" class="headerlink" title="高级版（更换模型…）"></a>高级版（更换模型…）</h3><h4 id="1-去https-github-com-stevenjoezhang-live2d-widget把库clone下来"><a href="#1-去https-github-com-stevenjoezhang-live2d-widget把库clone下来" class="headerlink" title="1. 去https://github.com/stevenjoezhang/live2d-widget把库clone下来;"></a>1. 去<a href="https://github.com/stevenjoezhang/live2d-widget">https://github.com/stevenjoezhang/live2d-widget</a>把库clone下来;</h4><h4 id="2-放到-themes-butterfly-source-下，并改名为live2d-widget-修改项目中的-autoload-js-文件"><a href="#2-放到-themes-butterfly-source-下，并改名为live2d-widget-修改项目中的-autoload-js-文件" class="headerlink" title="2. 放到 /themes/butterfly/source/下，并改名为live2d-widget,修改项目中的 autoload.js 文件:"></a>2. 放到 <code>/themes/butterfly/source/</code>下，并改名为<code>live2d-widget</code>,修改项目中的 <code>autoload.js</code> 文件:</h4><p> 将：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">&quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/&quot;</span>;</span><br></pre></td></tr></table></figure><p> 改为：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">&quot;/live2d-widget/&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="3-将autoload-js注入主题，在主题的-config-yml中找到inject"><a href="#3-将autoload-js注入主题，在主题的-config-yml中找到inject" class="headerlink" title="3. 将autoload.js注入主题，在主题的_config.yml中找到inject"></a>3. 将<code>autoload.js</code>注入主题，在主题的<code>_config.yml</code>中找到<code>inject</code></h4> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Inject</span><br><span class="line"># Insert the code to head (before &#39;&lt;&#x2F;head&gt;&#39; tag) and the bottom (before &#39;&lt;&#x2F;body&gt;&#39; tag)</span><br><span class="line"># 插入代码到头部 &lt;&#x2F;head&gt; 之前 和 底部 &lt;&#x2F;body&gt; 之前</span><br><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - &lt;script src&#x3D;&quot;&#x2F;live2d-widget&#x2F;autoload.js&quot;&gt;&lt;&#x2F;script&gt;  </span><br><span class="line">  bottom:</span><br></pre></td></tr></table></figure><h4 id="4-重启hexo服务"><a href="#4-重启hexo服务" class="headerlink" title="4. 重启hexo服务"></a>4. 重启hexo服务</h4><h4 id="5-注意"><a href="#5-注意" class="headerlink" title="5. 注意"></a>5. 注意</h4><p>从<code>stevenjoezhang</code>下载下来的库使用的是cdn过后的api，会导致换皮肤功能没有效果，只需要找到 <code>live2d-widget/autoload.js</code> 中将<code>cdnPath</code>注释，打开<code>apiPath</code>就好了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载 waifu.css live2d.min.js waifu-tips.js</span></span><br><span class="line"><span class="keyword">if</span> (screen.width &gt;= <span class="number">768</span>) &#123;</span><br><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">loadExternalResource(live2d_path + <span class="string">&quot;waifu.css&quot;</span>, <span class="string">&quot;css&quot;</span>),</span><br><span class="line">loadExternalResource(live2d_path + <span class="string">&quot;live2d.min.js&quot;</span>, <span class="string">&quot;js&quot;</span>),</span><br><span class="line">loadExternalResource(live2d_path + <span class="string">&quot;waifu-tips.js&quot;</span>, <span class="string">&quot;js&quot;</span>)</span><br><span class="line">]).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">initWidget(&#123;</span><br><span class="line">waifuPath: live2d_path + <span class="string">&quot;waifu-tips.json&quot;</span>,</span><br><span class="line">apiPath: <span class="string">&quot;https://live2d.fghrsh.net/api/&quot;</span>,</span><br><span class="line"><span class="comment">// cdnPath: &quot;https://cdn.jsdelivr.net/gh/fghrsh/live2d_api/&quot; // 使用cdn会无法换皮肤</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> live2d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>起伏</title>
      <link href="2021/01/22/mood/"/>
      <url>2021/01/22/mood/</url>
      
        <content type="html"><![CDATA[<p>我思故我在……</p><blockquote><p>Brain:All units function report!<br>Heart: Function loss 99%.<br>Liver: Function loss 99%.<br>Spleen: Function loss 99%.<br>Lung: Function loss 99%.<br>Brain:External support won’t reverse the situation.<br>How much adrenaline left?<br>Paranephros:Remaining 5%,unable to synthesize.<br>Brain:All remaining adrenaline allocates to nervous system and vocal muscles.<br>Prepare to send the last message to the outside world.<br>Brain:All other units,prepare to cease the function!<br>This instruction won’t repeat!<br>Thanks you for your tens of years sincere cooperation,farewell!</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 情绪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈练习题(学习笔记)</title>
      <link href="2021/01/22/stack/"/>
      <url>2021/01/22/stack/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述：给定一个只包括-‘-‘，’-’，’-‘，’-’，’-‘，’-’-的字符串，判断字符串是否有效。"><a href="#题目描述：给定一个只包括-‘-‘，’-’，’-‘，’-’，’-‘，’-’-的字符串，判断字符串是否有效。" class="headerlink" title="题目描述：给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。"></a>题目描述：给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</h3><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>注意空字符串可被认为是有效字符串。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> strKey = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">strKey.set(<span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">strKey.set(<span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">strKey.set(<span class="string">&quot;(&quot;</span>, <span class="string">&quot;)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左括号集合</span></span><br><span class="line"><span class="keyword">const</span> left = [<span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;(&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isValid = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 空字符串无条件判断为 true</span></span><br><span class="line">  <span class="keyword">if</span> (!str) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模拟栈</span></span><br><span class="line">  <span class="keyword">const</span> stack = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> len = str.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = str[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是左括号，那把对应的右括号放进栈里面</span></span><br><span class="line">    <span class="keyword">if</span> (left.indexOf(item) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      stack.push(strKey.get(item));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 由于栈的后进先出原则，题中`左括号必须以正确的顺序闭合`,</span></span><br><span class="line">      <span class="comment">// 当item为右括号时，应该和栈顶的右括号相等，否则括号的闭合规则错误返回false</span></span><br><span class="line">      <span class="comment">// 如果栈里面已经没有数据了,字符串还没结束，直接 闭合规则 不成立，返回false</span></span><br><span class="line">      <span class="keyword">if</span> (!stack.length || stack.pop() !== item) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 校验结束，栈应该是空的</span></span><br><span class="line">  <span class="keyword">return</span> !stack.length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str1 = <span class="string">&quot;&#123;&#125;[]()&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> str2 = <span class="string">&quot;&#123;[()]&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> str3 = <span class="string">&quot;&#123;&#125;&#123;&#125;&#123;()&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> str4 = <span class="string">&quot;&#123;[()]&#125;&#125;&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> str5 = <span class="string">&quot;&#123;[)()]&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isValid(str1)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isValid(str2)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isValid(str3)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(isValid(str4)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(isValid(str5)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="题目描述-根据每日气温列表，请重新生成一个列表，对应位置的输出是需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用-0-来代替。"><a href="#题目描述-根据每日气温列表，请重新生成一个列表，对应位置的输出是需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用-0-来代替。" class="headerlink" title="题目描述: 根据每日气温列表，请重新生成一个列表，对应位置的输出是需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0 来代替。"></a>题目描述: 根据每日气温列表，请重新生成一个列表，对应位置的输出是需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0 来代替。</h3><ul><li><p>例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。</p></li><li><p>提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> temp = [<span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">71</span>, <span class="number">69</span>, <span class="number">72</span>, <span class="number">76</span>, <span class="number">73</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dailyTemperatures = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> len = arr.length;</span><br><span class="line">  <span class="keyword">let</span> resArr = (<span class="keyword">new</span> <span class="built_in">Array</span>(len)).fill(<span class="number">0</span>); <span class="comment">// 结果数组，和温度数组等长，先占位为0</span></span><br><span class="line">  <span class="keyword">let</span> stack = []; <span class="comment">// 初始化栈</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = arr[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对比 下一个值是否大于当前值</span></span><br><span class="line">    <span class="keyword">while</span> (stack.length &amp;&amp; item &gt; arr[stack[stack.length - <span class="number">1</span>]]) &#123;</span><br><span class="line">      <span class="comment">// 则找到了下一个比当前值大的数据，取出栈顶的数据</span></span><br><span class="line">      <span class="keyword">let</span> top = stack.pop();</span><br><span class="line">      <span class="comment">// 两个index 相减，算出过了几天温度超过</span></span><br><span class="line">      resArr[top] = i - top</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stack.push(i) <span class="comment">// 像栈里push当前数据的index</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> resArr</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dailyTemperatures(temp))</span><br></pre></td></tr></table></figure><h3 id="题目描述：设计一个支持-push-，pop-，top-操作，并能在常数时间内检索到最小元素的栈。"><a href="#题目描述：设计一个支持-push-，pop-，top-操作，并能在常数时间内检索到最小元素的栈。" class="headerlink" title="题目描述：设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。"></a>题目描述：设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</h3><blockquote><p>栈的设计——“最小栈”问题</p></blockquote><ul><li><p><code>push(x)</code>  —— 将元素 x 推入栈中。</p></li><li><p><code>pop()</code>    —— 删除栈顶的元素。</p></li><li><p><code>getTop()</code> —— 获取栈顶元素。</p></li><li><p><code>getMin()</code> —— 检索栈中的最小元素。</p></li><li><p><code>最小栈思路</code>：</p></li><li><p>创建一个<code>递减栈</code>！在操作栈push,pop时，这个栈的栈顶永远保持最小数据，这样取最小值只需要取一下这个栈的栈顶，跟<code>循环</code>栈然后找到最小值比，是空间换时间，<code>O(n) -&gt; O(1)</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MinStack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化栈</span></span><br><span class="line">  <span class="built_in">this</span>.stack = [];</span><br><span class="line">  <span class="comment">// 递减栈</span></span><br><span class="line">  <span class="built_in">this</span>.minStack = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MinStack.prototype = &#123;</span><br><span class="line">  <span class="title">constructor</span>: <span class="title">MinStack</span>,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 入栈</span><br><span class="line">   * @<span class="title">param</span> &#123;*&#125; data  入栈数据</span><br><span class="line">   */</span><br><span class="line">  push: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (data === <span class="literal">null</span> || data === <span class="literal">undefined</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">this</span>.stack.push(data);</span><br><span class="line">    <span class="comment">// 当栈还是空和push的数据小于等于 minStack栈顶的值，就把这个更小的值push入minStack</span></span><br><span class="line">    <span class="comment">// 比栈顶还大的数据，就肯定不是最小值，不用入minStack栈</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.minStack.length || <span class="built_in">this</span>.minStack[<span class="built_in">this</span>.minStack.length - <span class="number">1</span>] &gt;= data) &#123;</span><br><span class="line">      <span class="built_in">this</span>.minStack.push(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 出栈</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  pop: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.stack.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 如果出栈的值等于最小栈顶的值，证明最小值出栈了，则minStack也需要把这个最小值出栈，确保栈最小值的正确性</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.stack.pop() === <span class="built_in">this</span>.minStack[<span class="built_in">this</span>.minStack.length - <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="built_in">this</span>.minStack.pop()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取栈顶的数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  getTop: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.stack.length) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stack[<span class="built_in">this</span>.stack.length - <span class="number">1</span>];</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取栈中最小值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  getMin: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.minStack.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.minStack[<span class="built_in">this</span>.minStack.length - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Stack = <span class="keyword">new</span> MinStack();</span><br><span class="line">Stack.push(<span class="number">0</span>)</span><br><span class="line">Stack.push(<span class="number">1</span>)</span><br><span class="line">Stack.push(-<span class="number">1</span>)</span><br><span class="line">Stack.push(-<span class="number">3</span>)</span><br><span class="line">Stack.push(<span class="number">1</span>)</span><br><span class="line">Stack.push(<span class="number">7</span>)</span><br><span class="line">Stack.pop()</span><br><span class="line">Stack.push(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Stack.stack)    <span class="comment">// [ 0, 1, -1, -3, 1, 6 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(Stack.minStack) <span class="comment">// [ 0, -1, -3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(Stack.getMin()) <span class="comment">// -3</span></span><br><span class="line"><span class="built_in">console</span>.log(Stack.getTop()) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h3 id="题目描述：使用栈实现队列的下列操作："><a href="#题目描述：使用栈实现队列的下列操作：" class="headerlink" title="题目描述：使用栈实现队列的下列操作："></a>题目描述：使用栈实现队列的下列操作：</h3><ul><li><code>push(x)</code>   – 将一个元素放入队列的尾部。</li><li><code>pop()</code>     – 从队列首部移除元素。</li><li><code>peek()</code>    – 返回队列首部的元素。</li><li><code>empty()</code>   – 返回队列是否为空。</li></ul><blockquote><p>示例:<br>MyQueue queue = new MyQueue();<br>queue.push(1);<br>queue.push(2);<br>queue.peek(); // 返回 1<br>queue.pop(); // 返回 1<br>queue.empty(); // 返回 false</p></blockquote><blockquote><p>说明:<br>你只能使用标准的栈操作 – 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。<br>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。<br>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 思路: 栈：先进后出 ，队列：先进先出，</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.stack1 = [];</span><br><span class="line">  <span class="built_in">this</span>.stack2 = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  入队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyQueue.prototype.push = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.stack1.push(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  出队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyQueue.prototype.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果stack2为空，则把stack1出栈到stack2，达到翻转stack1的目的，这样由stack1入栈，stack2 出栈，实现了队列的先进先出；</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.stack2.length &amp;&amp; <span class="built_in">this</span>.stack1.length) &#123;</span><br><span class="line">    <span class="comment">// 当 stack1 不为空时，出栈</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">this</span>.stack1.length) &#123;</span><br><span class="line">      <span class="comment">// 将 stack1 出栈的元素推入 stack2</span></span><br><span class="line">      <span class="built_in">this</span>.stack2.push(<span class="built_in">this</span>.stack1.pop())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// stack2 出栈</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.stack2.pop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回队列首部的元素，跟pop比peek并没有将数据出栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyQueue.prototype.peek = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果stack2是空的，需要把stack1出栈到stack2</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.stack2.length &amp;&amp; <span class="built_in">this</span>.stack1.length) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">this</span>.stack1.length) &#123;</span><br><span class="line">      <span class="built_in">this</span>.stack2.push(<span class="built_in">this</span>.stack1.pop());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> len = <span class="built_in">this</span>.stack2.length;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.stack2[len - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否队列是否为空</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyQueue.prototype.empty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !<span class="built_in">this</span>.stack1.length &amp;&amp; !<span class="built_in">this</span>.stack2.length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Queue = <span class="keyword">new</span> MyQueue();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Queue.isEmpty()) <span class="comment">// true</span></span><br><span class="line">Queue.push(<span class="number">1</span>)</span><br><span class="line">Queue.push(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(Queue.isEmpty()) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(Queue.peek())    <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(Queue.pop())     <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(Queue.pop())     <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(Queue.empty())   <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表练习题(学习笔记)</title>
      <link href="2021/01/15/linkedList/"/>
      <url>2021/01/15/linkedList/</url>
      
        <content type="html"><![CDATA[<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="1-真题描述：将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有结点组成的。"><a href="#1-真题描述：将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有结点组成的。" class="headerlink" title="1. 真题描述：将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有结点组成的。"></a>1. 真题描述：将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有结点组成的。</h4><blockquote><p>示例 输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4 输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  val: <span class="number">1</span>,</span><br><span class="line">  next: &#123;</span><br><span class="line">    val: <span class="number">2</span>,</span><br><span class="line">    next: &#123;</span><br><span class="line">      val: <span class="number">4</span>,</span><br><span class="line">      next: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  val: <span class="number">1</span>,</span><br><span class="line">  next: &#123;</span><br><span class="line">    val: <span class="number">3</span>,</span><br><span class="line">    next: &#123;</span><br><span class="line">      val: <span class="number">4</span>,</span><br><span class="line">      next: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.val = val || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">this</span>.next = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mergeLists = <span class="function"><span class="keyword">function</span> (<span class="params">list1, list2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> head = <span class="keyword">new</span> ListNode();</span><br><span class="line">  <span class="keyword">let</span> cur = head;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只要有一个结束了就结束</span></span><br><span class="line">  <span class="keyword">while</span> (list1 &amp;&amp; list2) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (list1.val &lt;= list2.val) &#123;</span><br><span class="line"></span><br><span class="line">      cur.next = list1;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// list 向前一步</span></span><br><span class="line">      list1 = list1.next;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list1.val &gt; list2.val) &#123;</span><br><span class="line"></span><br><span class="line">      cur.next = list2;</span><br><span class="line">      <span class="comment">// list 向前一步</span></span><br><span class="line">      list2 = list2.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指针向前一步</span></span><br><span class="line">    cur = cur.next;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 不等长情况</span></span><br><span class="line">  cur.next === list1 === <span class="literal">null</span> ? list2 : list1</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> head.next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(JSON.stringify(mergeLists(a, b)))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-真题描述：给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。"><a href="#2-真题描述：给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。" class="headerlink" title="2.真题描述：给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。"></a>2.真题描述：给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</h4><blockquote><p>示例 1:输入: 1-&gt;1-&gt;2-&gt;3-&gt;3 输出: 1-&gt;2-&gt;3</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = &#123;</span><br><span class="line">  val: <span class="number">1</span>,</span><br><span class="line">  next: &#123;</span><br><span class="line">    val: <span class="number">1</span>,</span><br><span class="line">    next: &#123;</span><br><span class="line">      val: <span class="number">2</span>,</span><br><span class="line">      next: &#123;</span><br><span class="line">        val: <span class="number">3</span>,</span><br><span class="line">        next: &#123;</span><br><span class="line">          val: <span class="number">3</span>,</span><br><span class="line">          next: <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filterList = <span class="function"><span class="keyword">function</span> (<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> head = list; <span class="comment">// 指针</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (list.next) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list.val === list.next.val) &#123;</span><br><span class="line">      list.next = list.next.next;</span><br><span class="line">      <span class="comment">// 先前走一步</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      list = list.next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(JSON.stringify(filterList(c)))</span></span><br></pre></td></tr></table></figure><h3 id="快慢指针——删除链表的倒数第-N-个结点"><a href="#快慢指针——删除链表的倒数第-N-个结点" class="headerlink" title="快慢指针——删除链表的倒数第 N 个结点"></a>快慢指针——删除链表的倒数第 N 个结点</h3><h4 id="真题描述：给定一个链表，删除链表的倒数第-n-个结点，并且返回链表的头结点。"><a href="#真题描述：给定一个链表，删除链表的倒数第-n-个结点，并且返回链表的头结点。" class="headerlink" title="真题描述：给定一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。"></a>真题描述：给定一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</h4><blockquote><p>下方链表删除倒数第2个节点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> d = &#123;</span><br><span class="line">  val: <span class="number">1</span>,</span><br><span class="line">  next: &#123;</span><br><span class="line">    val: <span class="number">2</span>,</span><br><span class="line">    next: &#123;</span><br><span class="line">      val: <span class="number">3</span>,</span><br><span class="line">      next: &#123;</span><br><span class="line">        val: <span class="number">4</span>,</span><br><span class="line">        next: &#123;</span><br><span class="line">          val: <span class="number">5</span>,</span><br><span class="line">          next: &#123;</span><br><span class="line">            val: <span class="number">6</span>,</span><br><span class="line">            next: <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> removeList = <span class="function"><span class="keyword">function</span> (<span class="params">list, n</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> head = <span class="keyword">new</span> ListNode;</span><br><span class="line">  head.next = list</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> fast = head; <span class="comment">// 快指针</span></span><br><span class="line">  <span class="keyword">let</span> slow = head; <span class="comment">// 慢指针</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 快指针先走</span></span><br><span class="line">  <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    fast = fast.next</span><br><span class="line">    n--</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始走链表</span></span><br><span class="line">  <span class="keyword">while</span> (fast.next) &#123;</span><br><span class="line">    <span class="comment">// 快慢指针同时走</span></span><br><span class="line">    fast = fast.next;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 此时慢指针就在倒数第N位上，删除该节点</span></span><br><span class="line">  slow.next = slow.next.next</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> head.next</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(JSON.stringify(removeList(d, 2)))</span></span><br></pre></td></tr></table></figure><h3 id="递归法—-链表的反转"><a href="#递归法—-链表的反转" class="headerlink" title="递归法—-链表的反转"></a>递归法—-链表的反转</h3><h4 id="真题描述：定义一个函数，输入一个链表的头结点，反转该链表并输出反转后链表的头结点。"><a href="#真题描述：定义一个函数，输入一个链表的头结点，反转该链表并输出反转后链表的头结点。" class="headerlink" title="真题描述：定义一个函数，输入一个链表的头结点，反转该链表并输出反转后链表的头结点。"></a>真题描述：定义一个函数，输入一个链表的头结点，反转该链表并输出反转后链表的头结点。</h4><blockquote><p>思路：翻转其实就是将next的指向翻转，后续节点的next指向前节点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> e = &#123;</span><br><span class="line">  val: <span class="number">1</span>,</span><br><span class="line">  next: &#123;</span><br><span class="line">    val: <span class="number">2</span>,</span><br><span class="line">    next: &#123;</span><br><span class="line">      val: <span class="number">3</span>,</span><br><span class="line">      next: &#123;</span><br><span class="line">        val: <span class="number">4</span>,</span><br><span class="line">        next: &#123;</span><br><span class="line">          val: <span class="number">5</span>,</span><br><span class="line">          next: <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归法</span></span><br><span class="line"><span class="keyword">const</span> reverseList = <span class="function"><span class="keyword">function</span> (<span class="params">head, list</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (list &amp;&amp; head) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了返回新链表，不改变原链表</span></span><br><span class="line">    list = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(list))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存链表原本的next</span></span><br><span class="line">    <span class="keyword">let</span> cur = list.next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反向, 第一个节点next处理</span></span><br><span class="line">    list.next = head.val ? head : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> reverseList(list, cur)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> head = <span class="keyword">new</span> ListNode()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(reverseList(head, e))) <span class="comment">// &#123;&quot;val&quot;:5,&quot;next&quot;:&#123;&quot;val&quot;:4,&quot;next&quot;:&#123;&quot;val&quot;:3,&quot;next&quot;:&#123;&quot;val&quot;:2,&quot;next&quot;:&#123;&quot;val&quot;:1,&quot;next&quot;:null&#125;&#125;&#125;&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(e)) <span class="comment">// &#123;&quot;val&quot;:1,&quot;next&quot;:&#123;&quot;val&quot;:2,&quot;next&quot;:&#123;&quot;val&quot;:3,&quot;next&quot;:&#123;&quot;val&quot;:4,&quot;next&quot;:&#123;&quot;val&quot;:5,&quot;next&quot;:null&#125;&#125;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录在Linux中安装MongoDB</title>
      <link href="2020/12/22/linux-mongod/"/>
      <url>2020/12/22/linux-mongod/</url>
      
        <content type="html"><![CDATA[<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line"></span><br><span class="line">mkdir mongodb</span><br><span class="line"></span><br><span class="line">cd mongodb/</span><br><span class="line"></span><br><span class="line">wget  https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.7.tgz  下载</span><br><span class="line"> </span><br><span class="line">tar -zxvf  mongodb-linux-x86_64-4.0.7.tgz 解压</span><br></pre></td></tr></table></figure><h4 id="新建文件夹放数据库数据和log"><a href="#新建文件夹放数据库数据和log" class="headerlink" title="新建文件夹放数据库数据和log"></a>新建文件夹放数据库数据和log</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd mongodb-linux-x86_64-4.0.7/bin</span><br><span class="line"></span><br><span class="line">mkdir -p logs</span><br><span class="line">mkdir -p data/db</span><br></pre></td></tr></table></figure><h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod  777  logs</span><br><span class="line">chmod  777  data</span><br></pre></td></tr></table></figure><h4 id="新建mongodb-conf"><a href="#新建mongodb-conf" class="headerlink" title="新建mongodb.conf"></a>新建<code>mongodb.conf</code></h4><p>创建一个mongodb.conf  直接 vim mongodb.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dbpath = /usr/local/mongodb/mongodb-linux-x86_64-4.0.7/bin/data/db #数据文件</span><br><span class="line"></span><br><span class="line">logpath =/usr/local/mongodb/mongodb-linux-x86_64-4.0.7/bin/logs/mongodb.log #日记文件</span><br><span class="line"></span><br><span class="line">port = 27017 #端口号 默认</span><br><span class="line"></span><br><span class="line">fork = true  #后台启动</span><br><span class="line"></span><br><span class="line">bind_ip=0.0.0.0  #可外网访问</span><br><span class="line"></span><br><span class="line">auth = true #增加用户授权认证 创建用户后再加这个</span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>bin目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mongod -f mongodb.conf</span><br></pre></td></tr></table></figure><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux |grep mongodb</span><br></pre></td></tr></table></figure><h4 id="杀死-mongodb-的进程"><a href="#杀死-mongodb-的进程" class="headerlink" title="杀死 mongodb 的进程"></a>杀死 mongodb 的进程</h4><p>尽量不要  kill -9 进程的 pid 58784<br>数据库直接关闭，数据丢失，数据文件损失，修复数据库（成本高，有风险）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -2 进程号</span><br></pre></td></tr></table></figure><h4 id="mongodb常用命令"><a href="#mongodb常用命令" class="headerlink" title="mongodb常用命令"></a>mongodb常用命令</h4><h5 id="开启用户验证"><a href="#开启用户验证" class="headerlink" title="开启用户验证"></a>开启用户验证</h5><p>为了安全性，链接数据库时最好开启用户验证，<code>mongodb.conf</code>中加上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth=true</span><br></pre></td></tr></table></figure><h5 id="新建账户"><a href="#新建账户" class="headerlink" title="新建账户"></a>新建账户</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123;user:”账号”,pwd:”密码”,roles:[&#123;“role”:”userAdmin”,”db”:”admin”&#125;,&#123;“role”:”root”,”db”:”admin”&#125;,&#123;“role”:”userAdminAnyDatabase”,”db”:”admin”&#125;]&#125;)</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">db.createUser(&#123;user:&quot;lili&quot;,pwd:&quot;password&quot;,roles:[&quot;userAdmin&quot;]&#125;)</span><br></pre></td></tr></table></figure><h5 id="roles"><a href="#roles" class="headerlink" title="roles"></a>roles</h5><ul><li><p><code>Read</code>：允许用户读取指定数据库</p></li><li><p><code>readWrite</code>：允许用户读写指定数据库</p></li><li><p><code>dbAdmin</code>：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</p></li><li><p><code>userAdmin</code>：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</p></li><li><p><code>clusterAdmin</code>：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</p></li><li><p><code>readAnyDatabase</code>：只在admin数据库中可用，赋予用户所有数据库的读权限</p></li><li><p><code>readWriteAnyDatabase</code>：只在admin数据库中可用，赋予用户所有数据库的读写权限</p></li><li><p><code>userAdminAnyDatabase</code>：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</p></li><li><p><code>dbAdminAnyDatabase</code>：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</p></li><li><p><code>root</code>：只在admin数据库中可用。超级账号，超级权限(本次创建的就是超级账号)</p></li></ul><h5 id="查看所有账户"><a href="#查看所有账户" class="headerlink" title="查看所有账户"></a>查看所有账户</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.system.users.find()</span><br></pre></td></tr></table></figure><h5 id="删除账户"><a href="#删除账户" class="headerlink" title="删除账户"></a>删除账户</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropUser(&quot;username&quot;)</span><br></pre></td></tr></table></figure><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.auth(&quot;admin&quot;,&quot;password&quot;)</span><br></pre></td></tr></table></figure><h5 id="查看所有的库"><a href="#查看所有的库" class="headerlink" title="查看所有的库"></a>查看所有的库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure><h5 id="切换库"><a href="#切换库" class="headerlink" title="切换库"></a>切换库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br></pre></td></tr></table></figure><h5 id="查看所有的集合-表"><a href="#查看所有的集合-表" class="headerlink" title="查看所有的集合(表)"></a>查看所有的集合(表)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure><h5 id="查看表数据"><a href="#查看表数据" class="headerlink" title="查看表数据"></a>查看表数据</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.表名.find()</span><br><span class="line">db.表名.find().pretty()</span><br></pre></td></tr></table></figure><h4 id="本地链接"><a href="#本地链接" class="headerlink" title="本地链接"></a>本地链接</h4><p>mac使用图形化工具<code>mongoHub</code>, node中使用<code>mongooes</code>;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  链接规则</span></span><br><span class="line"><span class="comment">// mongodb://username:password@host:port/dbName?authSource=dbName</span></span><br><span class="line"><span class="comment">// eg:</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; dbName, host, port, user, password &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../config/config&#x27;</span>).database;</span><br><span class="line"><span class="keyword">const</span> db = <span class="string">`mongodb://<span class="subst">$&#123;user&#125;</span>:<span class="subst">$&#123;password&#125;</span>@<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>/<span class="subst">$&#123;dbName&#125;</span>?authSource=<span class="subst">$&#123;dbName&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.connect = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 连接数据库</span></span><br><span class="line">  mongoose.connect(db, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> maxConnectTimes = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//监听事件</span></span><br><span class="line">  mongoose.connection.on(<span class="string">&#x27;disconnected&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;disconnected&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (maxConnectTimes &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">      maxConnectTimes++;</span><br><span class="line">      mongoose.connect(db);</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;db error&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  mongoose.connection.on(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (maxConnectTimes &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">      maxConnectTimes++;</span><br><span class="line">      mongoose.connect(db);</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;db error:&#x27;</span> + err);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  mongoose.connection.on(<span class="string">&#x27;connected&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;mongo connect success&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pdfjs-dist + react 使用记录</title>
      <link href="2020/12/21/pdfJs-React-js/"/>
      <url>2020/12/21/pdfJs-React-js/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>本片文章仅为笔记，不做具体讲解。<br>文档地址：<a href="https://github.com/mozilla/pdf.js">https://github.com/mozilla/pdf.js</a><br>参考例子： pdf.js/examples/mobile-viewer/</p></blockquote><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/images/react/pdfjs.jpg" alt="效果"></p><h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &#39;react&#39;;</span><br><span class="line">import * as PDFJS from &#39;pdfjs-dist&#39;</span><br><span class="line">import * as PDFViewer from &#39;pdfjs-dist&#x2F;web&#x2F;pdf_viewer&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default class PDF extends React.Component&lt;any, any&gt;&#123;</span><br><span class="line">  pageRenderRef: React.RefObject&lt;any&gt;;</span><br><span class="line">  errorWrapper: React.RefObject&lt;any&gt;;</span><br><span class="line">  pageRenders: []</span><br><span class="line">  pdfViewer: any  &#x2F;&#x2F; 不知道pdfjs导出的数据是什么类型，统一使用any</span><br><span class="line">  eventBus: any</span><br><span class="line">  pdfLinkService: any</span><br><span class="line">  l10n: any</span><br><span class="line">  pdfHistory: any</span><br><span class="line">  pdfLoadingTask: any</span><br><span class="line">  pdfDocument: any</span><br><span class="line">  &#x2F;&#x2F; loadingBar: any</span><br><span class="line"></span><br><span class="line">  constructor(props: any) &#123;</span><br><span class="line">    super(props)</span><br><span class="line">    this.pageRenders &#x3D; [];   &#x2F;&#x2F; 存放每页pdf形成的canvas</span><br><span class="line">    this.pageRenderRef &#x3D; React.createRef();  &#x2F;&#x2F; 渲染pdf的容器</span><br><span class="line">    this.errorWrapper &#x3D; React.createRef();</span><br><span class="line">    this.pdfViewer &#x3D; null</span><br><span class="line">    this.eventBus &#x3D; null</span><br><span class="line">    this.pdfLinkService &#x3D; null</span><br><span class="line">    this.l10n &#x3D; null</span><br><span class="line">    this.pdfHistory &#x3D; null</span><br><span class="line">    this.pdfLoadingTask &#x3D; null</span><br><span class="line">    this.pdfDocument &#x3D; null</span><br><span class="line"></span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      USE_ONLY_CSS_ZOOM: true,</span><br><span class="line">      TEXT_LAYER_MODE: 0, &#x2F;&#x2F; DISABLE</span><br><span class="line">      MAX_IMAGE_SIZE: 1024 * 1024,</span><br><span class="line">      CMAP_URL: &quot;https:&#x2F;&#x2F;unpkg.com&#x2F;pdfjs-dist@2.2.228&#x2F;cmaps&#x2F;&quot;, &#x2F;&#x2F; 引入pdf.js的字体</span><br><span class="line">      CMAP_PACKED: true,</span><br><span class="line">      &#x2F;&#x2F; DEFAULT_URL: &quot;.&#x2F;compressed.tracemonkey-pldi-09.pdf&quot;,</span><br><span class="line">      DEFAULT_URL: &#39;http:&#x2F;&#x2F;localhost:8082&#x2F;pdfLocal&#x2F;compressed.tracemonkey-pldi-09.pdf&#39;,  &#x2F;&#x2F; 本地预览 需要代理</span><br><span class="line">      DEFAULT_SCALE_DELTA: 1.1,</span><br><span class="line">      MIN_SCALE: 0.25,</span><br><span class="line">      MAX_SCALE: 10.0,</span><br><span class="line">      DEFAULT_SCALE_VALUE: &quot;auto&quot;,</span><br><span class="line">      pdfLoadingTask: null,</span><br><span class="line">      toPageNumber: &#39;1&#39;,</span><br><span class="line">      preDisabled: false,</span><br><span class="line">      nextDisabled: false,</span><br><span class="line">      errorWrapperHide: true,</span><br><span class="line">      errorMoreInfoHide: true,</span><br><span class="line">      title: &#39;&#39;,</span><br><span class="line">      url: &#39;&#39;,</span><br><span class="line">      errorMessage: &#39;&#39;,</span><br><span class="line">      errorMoreInfo: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    this.init()</span><br><span class="line">    this.animationStartedPromise().then(res &#x3D;&gt; &#123;</span><br><span class="line">      this.open(&#123;</span><br><span class="line">        url: this.state.DEFAULT_URL</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  animationStartedPromise &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    return new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">      window.requestAnimationFrame(resolve);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getloadingBar &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    let bar &#x3D; new PDFViewer.ProgressBar(&quot;#loadingBar&quot;, &#123;&#125;);</span><br><span class="line">    return PDFJS.shadow(this, &quot;loadingBar&quot;, bar);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 渲染pdf</span><br><span class="line">   *&#x2F;</span><br><span class="line">  open &#x3D; (params: any) &#x3D;&gt; &#123;</span><br><span class="line">    if (this.pdfLoadingTask) &#123;</span><br><span class="line">      &#x2F;&#x2F; We need to destroy already opened document</span><br><span class="line">      return this.close().then(</span><br><span class="line">        () &#x3D;&gt; &#123;</span><br><span class="line">          &#x2F;&#x2F; ... and repeat the open() call.</span><br><span class="line">          return this.open(params);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let url: string &#x3D; params.url;</span><br><span class="line">    let self &#x3D; this;</span><br><span class="line">    this.setTitleUsingUrl(url);</span><br><span class="line">    &#x2F;&#x2F; Loading document.</span><br><span class="line">    const loadingTask &#x3D; PDFJS.getDocument(&#123;</span><br><span class="line">      url: url,</span><br><span class="line">      maxImageSize: this.state.MAX_IMAGE_SIZE,</span><br><span class="line">      cMapUrl: this.state.CMAP_URL,</span><br><span class="line">      cMapPacked: this.state.CMAP_PACKED,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    this.pdfLoadingTask &#x3D; loadingTask;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 进度条</span><br><span class="line">    loadingTask.onProgress &#x3D; (progressData: any) &#x3D;&gt; &#123;</span><br><span class="line">      self.progress(progressData.loaded &#x2F; progressData.total);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return loadingTask.promise.then(</span><br><span class="line">      (pdfDocument: any) &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;pdfDocument&#39;, pdfDocument)</span><br><span class="line">        &#x2F;&#x2F; Document loaded, specifying document for the viewer.</span><br><span class="line">        self.pdfDocument &#x3D; pdfDocument;</span><br><span class="line">        self.pdfViewer.setDocument(pdfDocument);</span><br><span class="line">        self.pdfLinkService.setDocument(pdfDocument);</span><br><span class="line">        self.pdfHistory.initialize(&#123; fingerprint: pdfDocument.fingerprint &#125;);</span><br><span class="line"></span><br><span class="line">        self.getloadingBar().hide();</span><br><span class="line">        &#x2F;&#x2F; self.setTitleUsingMetadata(pdfDocument);</span><br><span class="line">      &#125;,</span><br><span class="line">      (exception: any) &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;exception&#39;, exception)</span><br><span class="line">        let message &#x3D; exception &amp;&amp; exception.message;</span><br><span class="line">        let l10n &#x3D; self.l10n;</span><br><span class="line">        let loadingErrorMessage;</span><br><span class="line"></span><br><span class="line">        if (exception instanceof PDFJS.InvalidPDFException) &#123;</span><br><span class="line">          &#x2F;&#x2F; change error message also for other builds</span><br><span class="line">          loadingErrorMessage &#x3D; l10n.get(</span><br><span class="line">            &quot;invalid_file_error&quot;,</span><br><span class="line">            null,</span><br><span class="line">            &quot;Invalid or corrupted PDF file.&quot;</span><br><span class="line">          );</span><br><span class="line">        &#125; else if (exception instanceof PDFJS.MissingPDFException) &#123;</span><br><span class="line">          &#x2F;&#x2F; special message for missing PDFs</span><br><span class="line">          loadingErrorMessage &#x3D; l10n.get(</span><br><span class="line">            &quot;missing_file_error&quot;,</span><br><span class="line">            null,</span><br><span class="line">            &quot;Missing PDF file.&quot;</span><br><span class="line">          );</span><br><span class="line">        &#125; else if (exception instanceof PDFJS.UnexpectedResponseException) &#123;</span><br><span class="line">          loadingErrorMessage &#x3D; l10n.get(</span><br><span class="line">            &quot;unexpected_response_error&quot;,</span><br><span class="line">            null,</span><br><span class="line">            &quot;Unexpected server response.&quot;</span><br><span class="line">          );</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          loadingErrorMessage &#x3D; l10n.get(</span><br><span class="line">            &quot;loading_error&quot;,</span><br><span class="line">            null,</span><br><span class="line">            &quot;An error occurred while loading the PDF.&quot;</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        loadingErrorMessage.then((msg: any) &#x3D;&gt; &#123;</span><br><span class="line">          self.error(msg, &#123; message: message &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        self.getloadingBar().hide();</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  close &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      errorWrapperHide: true</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    if (!this.pdfLoadingTask) &#123;</span><br><span class="line">      return Promise.resolve();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let promise &#x3D; this.pdfLoadingTask.destroy();</span><br><span class="line">    this.pdfLoadingTask &#x3D; null;</span><br><span class="line"></span><br><span class="line">    if (this.pdfDocument) &#123;</span><br><span class="line">      this.pdfDocument &#x3D; null;</span><br><span class="line"></span><br><span class="line">      this.pdfViewer.setDocument(null);</span><br><span class="line">      this.pdfLinkService.setDocument(null, null);</span><br><span class="line"></span><br><span class="line">      if (this.pdfHistory) &#123;</span><br><span class="line">        this.pdfHistory.reset();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return promise;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  progress &#x3D; (level: any) &#x3D;&gt; &#123;</span><br><span class="line">    let percent &#x3D; Math.round(level * 100);</span><br><span class="line">    &#x2F;&#x2F; Updating the bar if value increases.</span><br><span class="line">    if (percent &gt; this.getloadingBar().percent || isNaN(percent)) &#123;</span><br><span class="line">      this.getloadingBar().percent &#x3D; percent;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  error &#x3D; (message: any, moreInfo: any) &#x3D;&gt; &#123;</span><br><span class="line">    let l10n &#x3D; this.l10n;</span><br><span class="line">    let moreInfoText &#x3D; [</span><br><span class="line">      l10n.get(</span><br><span class="line">        &quot;error_version_info&quot;,</span><br><span class="line">        &#123; version: PDFJS.version || &quot;?&quot;, build: PDFJS.build || &quot;?&quot; &#125;,</span><br><span class="line">        &quot;PDF.js v&#123;&#123;version&#125;&#125; (build: &#123;&#123;build&#125;&#125;)&quot;</span><br><span class="line">      ),</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    if (moreInfo) &#123;</span><br><span class="line">      moreInfoText.push(</span><br><span class="line">        l10n.get(</span><br><span class="line">          &quot;error_message&quot;,</span><br><span class="line">          &#123; message: moreInfo.message &#125;,</span><br><span class="line">          &quot;Message: &#123;&#123;message&#125;&#125;&quot;</span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">      if (moreInfo.stack) &#123;</span><br><span class="line">        moreInfoText.push(</span><br><span class="line">          l10n.get(&quot;error_stack&quot;, &#123; stack: moreInfo.stack &#125;, &quot;Stack: &#123;&#123;stack&#125;&#125;&quot;)</span><br><span class="line">        );</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        if (moreInfo.filename) &#123;</span><br><span class="line">          moreInfoText.push(</span><br><span class="line">            l10n.get(</span><br><span class="line">              &quot;error_file&quot;,</span><br><span class="line">              &#123; file: moreInfo.filename &#125;,</span><br><span class="line">              &quot;File: &#123;&#123;file&#125;&#125;&quot;</span><br><span class="line">            )</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">        if (moreInfo.lineNumber) &#123;</span><br><span class="line">          moreInfoText.push(</span><br><span class="line">            l10n.get(</span><br><span class="line">              &quot;error_line&quot;,</span><br><span class="line">              &#123; line: moreInfo.lineNumber &#125;,</span><br><span class="line">              &quot;Line: &#123;&#123;line&#125;&#125;&quot;</span><br><span class="line">            )</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      errorWrapperHide: false,</span><br><span class="line">      errorMessage: message</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Promise.all(moreInfoText).then((parts) &#x3D;&gt; &#123;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        errorMoreInfo: parts.join(&quot;\n&quot;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  errorClose &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      errorWrapperHide: true,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  errorShowMore &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      errorMoreInfoHide: false,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  errorShowLess &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      errorMoreInfoHide: true,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 获取pdf名称</span><br><span class="line">   * @param url </span><br><span class="line">   *&#x2F;</span><br><span class="line">  setTitleUsingUrl &#x3D; (url: string) &#x3D;&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      url: url</span><br><span class="line">    &#125;)</span><br><span class="line">    let title &#x3D; PDFJS.getFilenameFromUrl(url) || url;</span><br><span class="line">    try &#123;</span><br><span class="line">      title &#x3D; decodeURIComponent(title);</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">      &#x2F;&#x2F; decodeURIComponent may throw URIError,</span><br><span class="line">      &#x2F;&#x2F; fall back to using the unprocessed url in that case</span><br><span class="line">    &#125;</span><br><span class="line">    this.setTitle(title);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 设置title</span><br><span class="line">   * @param title pdf名字</span><br><span class="line">   *&#x2F;</span><br><span class="line">  setTitle &#x3D; (title: string) &#x3D;&gt; &#123;</span><br><span class="line">    document.title &#x3D; title;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      title: title</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F; 传给父级</span><br><span class="line">    this.props.getTitle(title)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;PDF init&#39;)</span><br><span class="line">    PDFJS.GlobalWorkerOptions.workerSrc &#x3D; import(&#39;pdfjs-dist&#x2F;build&#x2F;pdf.worker&#39;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 跳页初始化</span><br><span class="line">    const eventBus &#x3D; new PDFViewer.EventBus();</span><br><span class="line">    this.eventBus &#x3D; eventBus;</span><br><span class="line"></span><br><span class="line">    let linkService &#x3D; new PDFViewer.PDFLinkService(&#123;</span><br><span class="line">      eventBus: eventBus,</span><br><span class="line">    &#125;);</span><br><span class="line">    this.pdfLinkService &#x3D; linkService;</span><br><span class="line"></span><br><span class="line">    let pdfViewer &#x3D; new PDFViewer.PDFViewer(&#123;</span><br><span class="line">      container: this.pageRenderRef?.current,</span><br><span class="line">      eventBus: eventBus,</span><br><span class="line">      linkService: linkService,</span><br><span class="line">      l10n: this.state.l10n,</span><br><span class="line">      useOnlyCssZoom: this.state.USE_ONLY_CSS_ZOOM,</span><br><span class="line">      textLayerMode: this.state.TEXT_LAYER_MODE,</span><br><span class="line">    &#125;);</span><br><span class="line">    this.pdfViewer &#x3D; pdfViewer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    linkService.setViewer(pdfViewer);</span><br><span class="line"></span><br><span class="line">    this.l10n &#x3D; PDFViewer.NullL10n;</span><br><span class="line"></span><br><span class="line">    this.pdfHistory &#x3D; new PDFViewer.PDFHistory(&#123;</span><br><span class="line">      eventBus: eventBus,</span><br><span class="line">      linkService: linkService,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    linkService.setHistory(this.pdfHistory);</span><br><span class="line"></span><br><span class="line">    eventBus.on(&quot;pagesinit&quot;, () &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; We can use pdfViewer now, e.g. let&#39;s change default scale.</span><br><span class="line">      pdfViewer.currentScaleValue &#x3D; this.state.DEFAULT_SCALE_VALUE;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    eventBus.on(</span><br><span class="line">      &quot;pagechanging&quot;,</span><br><span class="line">      (evt: any) &#x3D;&gt; &#123;</span><br><span class="line">        let page: number &#x3D; evt.pageNumber; &#x2F;&#x2F; 当前页数</span><br><span class="line">        let numPages: number &#x3D; this.pdfDocument.numPages;  &#x2F;&#x2F; 总页数</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">          toPageNumber: page,</span><br><span class="line">          preDisabled: page &lt;&#x3D; 1,</span><br><span class="line">          nextDisabled: page &gt;&#x3D; numPages</span><br><span class="line">        &#125;)</span><br><span class="line">        &#x2F;&#x2F; 返回给父级</span><br><span class="line">        this.props.getPageNumber(page, numPages)</span><br><span class="line">      &#125;,</span><br><span class="line">      true</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;** </span><br><span class="line">  * 前一页</span><br><span class="line">  *&#x2F;</span><br><span class="line">  previous &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    if (this.state.preDisabled) return;</span><br><span class="line">    this.pdfViewer.currentPageNumber--;</span><br><span class="line">    console.log(this.pdfViewer)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;** </span><br><span class="line">  * 后一页</span><br><span class="line">  *&#x2F;</span><br><span class="line">  next &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    if (this.state.nextDisabled) return;</span><br><span class="line">    this.pdfViewer.currentPageNumber++;</span><br><span class="line">    console.log(this.pdfViewer)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 缩小</span><br><span class="line">   *&#x2F;</span><br><span class="line">  zoomOut &#x3D; (ticks: any) &#x3D;&gt; &#123;</span><br><span class="line">    let newScale &#x3D; this.pdfViewer.currentScale;</span><br><span class="line">    do &#123;</span><br><span class="line">      newScale &#x3D; (newScale &#x2F; this.state.DEFAULT_SCALE_DELTA).toFixed(2);</span><br><span class="line">      newScale &#x3D; Math.floor(newScale * 10) &#x2F; 10;</span><br><span class="line">      newScale &#x3D; Math.max(this.state.MIN_SCALE, newScale);</span><br><span class="line">    &#125; while (--ticks &amp;&amp; newScale &gt; this.state.MIN_SCALE);</span><br><span class="line">    this.pdfViewer.currentScaleValue &#x3D; newScale;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">    * 放大</span><br><span class="line">    *&#x2F;</span><br><span class="line">  zoomIn &#x3D; (ticks: any) &#x3D;&gt; &#123;</span><br><span class="line">    let newScale &#x3D; this.pdfViewer.currentScale;</span><br><span class="line">    do &#123;</span><br><span class="line">      newScale &#x3D; (newScale * this.state.DEFAULT_SCALE_DELTA).toFixed(2);</span><br><span class="line">      newScale &#x3D; Math.ceil(newScale * 10) &#x2F; 10;</span><br><span class="line">      newScale &#x3D; Math.min(this.state.MAX_SCALE, newScale);</span><br><span class="line">    &#125; while (--ticks &amp;&amp; newScale &lt; this.state.MAX_SCALE);</span><br><span class="line">    this.pdfViewer.currentScaleValue &#x3D; newScale;</span><br><span class="line">    console.log(this.pdfViewer.currentScaleValue)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 跳转页数</span><br><span class="line">   *&#x2F;</span><br><span class="line">  toPage &#x3D; (page: string | number) &#x3D;&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      toPageNumber: page</span><br><span class="line">    &#125;)</span><br><span class="line">    if (page) &#123;</span><br><span class="line">      this.pdfViewer.currentPageNumber &#x3D; Number(page)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;React.Fragment&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div id&#x3D;&quot;viewerContainer&quot; ref&#x3D;&#123;this.pageRenderRef&#125;&gt;</span><br><span class="line">          &lt;div id&#x3D;&quot;viewer&quot; className&#x3D;&quot;pdfViewer&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div id&#x3D;&quot;loadingBar&quot;&gt;</span><br><span class="line">          &lt;div className&#x3D;&quot;progress&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div className&#x3D;&quot;glimmer&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div id&#x3D;&quot;errorWrapper&quot; ref&#x3D;&#123;this.errorWrapper&#125; hidden&#x3D;&#123;this.state.errorWrapperHide&#125;&gt;</span><br><span class="line">          &lt;div id&#x3D;&quot;errorMessageLeft&quot;&gt;</span><br><span class="line">            &lt;span id&#x3D;&quot;errorMessage&quot;&gt;&#123;this.state.errorMessage&#125;&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;button id&#x3D;&quot;errorShowMore&quot; onClick&#x3D;&#123;this.errorShowMore&#125;&gt;More Information&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;button id&#x3D;&quot;errorShowLess&quot; onClick&#x3D;&#123;this.errorShowLess&#125;&gt;Less Information&lt;&#x2F;button&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div id&#x3D;&quot;errorMessageRight&quot;&gt;</span><br><span class="line">            &lt;button id&#x3D;&quot;errorClose&quot; onClick&#x3D;&#123;this.errorClose&#125;&gt;Close&lt;&#x2F;button&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div className&#x3D;&quot;clearBoth&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">          &lt;textarea id&#x3D;&quot;errorMoreInfo&quot; disabled hidden&#x3D;&#123;this.state.errorMoreInfoHide&#125; value&#x3D;&#123;this.state.errorMoreInfo&#125;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;footer&gt;</span><br><span class="line">          &lt;button className&#x3D;&quot;toolbarButton pageUp&quot; title&#x3D;&quot;Previous Page&quot; id&#x3D;&quot;previous&quot; onClick&#x3D;&#123;this.previous&#125;&gt;&lt;&#x2F;button&gt;</span><br><span class="line">          &lt;button className&#x3D;&quot;toolbarButton pageDown&quot; title&#x3D;&quot;Next Page&quot; id&#x3D;&quot;next&quot; onClick&#x3D;&#123;this.next&#125;&gt;&lt;&#x2F;button&gt;</span><br><span class="line">          &lt;input type&#x3D;&#39;text&#39; id&#x3D;&quot;pageNumber&quot; className&#x3D;&quot;toolbarField pageNumber&quot; value&#x3D;&#123;this.state.toPageNumber&#125; onChange&#x3D;&#123;e &#x3D;&gt; this.toPage(e?.target?.value)&#125; size&#x3D;&#123;4&#125; min&#x3D;&quot;1&quot; &#x2F;&gt;</span><br><span class="line">          &lt;button className&#x3D;&quot;toolbarButton zoomOut&quot; title&#x3D;&quot;Zoom Out&quot; id&#x3D;&quot;zoomOut&quot; onClick&#x3D;&#123;this.zoomOut&#125;&gt;&lt;&#x2F;button&gt;</span><br><span class="line">          &lt;button className&#x3D;&quot;toolbarButton zoomIn&quot; title&#x3D;&quot;Zoom In&quot; id&#x3D;&quot;zoomIn&quot; onClick&#x3D;&#123;this.zoomIn&#125;&gt;&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;footer&gt;</span><br><span class="line">      &lt;&#x2F;React.Fragment&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(../images/document_bg.png);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(../images/toolbar_background.png);</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">0.2rem</span> <span class="number">0.5rem</span> <span class="built_in">rgba</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">0.75</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toolbarButton</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-position</span>: center center;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toolbarButton</span><span class="selector-class">.pageUp</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">18%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(../images/icon_previous_page.png);</span><br><span class="line">  <span class="attribute">background-size</span>: .<span class="number">4rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toolbarButton</span><span class="selector-class">.pageDown</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">18%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">18%</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(../images/icon_next_page.png);</span><br><span class="line">  <span class="attribute">background-size</span>: .<span class="number">4rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#pageNumber</span> &#123;</span><br><span class="line">  <span class="attribute">-moz-appearance</span>: textfield; <span class="comment">/* hides the spinner in moz */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">28%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">36%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">font-size</span>: .<span class="number">4rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(../images/div_line_left.png),</span><br><span class="line">    <span class="built_in">url</span>(../images/div_line_right.png);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: left, right;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">0.2rem</span>, <span class="number">0.2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toolbarButton</span><span class="selector-class">.zoomOut</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">18%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">64%</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(../images/icon_zoom_out.png);</span><br><span class="line">  <span class="attribute">background-size</span>: .<span class="number">5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toolbarButton</span><span class="selector-class">.zoomIn</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">18%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">82%</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(../images/icon_zoom_in.png);</span><br><span class="line">  <span class="attribute">background-size</span>: .<span class="number">5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toolbarButton</span><span class="selector-attr">[disabled]</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hidden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[hidden]</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#viewerContainer</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  // height: 100%;</span><br><span class="line">  <span class="selector-tag">top</span>: 1<span class="selector-tag">rem</span>;</span><br><span class="line">  <span class="selector-tag">bottom</span>: 0;</span><br><span class="line">  <span class="selector-tag">left</span>: 0;</span><br><span class="line">  <span class="selector-tag">right</span>: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">canvas</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#loadingBar</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0.6rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">51</span>, <span class="number">51</span>, <span class="number">51</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">51</span>, <span class="number">51</span>, <span class="number">51</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#loadingBar</span> <span class="selector-class">.progress</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">221</span>, <span class="number">221</span>, <span class="number">221</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">200ms</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> progressIndeterminate &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#loadingBar</span> <span class="selector-class">.progress</span><span class="selector-class">.indeterminate</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">153</span>, <span class="number">153</span>, <span class="number">153</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">transition</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#loadingBar</span> <span class="selector-class">.indeterminate</span> <span class="selector-class">.glimmer</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5rem</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    to right,</span><br><span class="line">    rgba(<span class="number">153</span>, <span class="number">153</span>, <span class="number">153</span>, <span class="number">1</span>) <span class="number">0%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>) <span class="number">50%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">153</span>, <span class="number">153</span>, <span class="number">153</span>, <span class="number">1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">animation</span>: progressIndeterminate <span class="number">2s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#errorWrapper</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: none repeat scroll <span class="number">0</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">3.2rem</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.3rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#errorMessageLeft</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#errorMessageRight</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#errorMoreInfo</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.3rem</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0.3rem</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">98%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pdf-wrap</span>&#123;</span><br><span class="line">  .page-title&#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#555</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pdfjs-dist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写Promise，代码记录</title>
      <link href="2020/12/15/promiseJs/"/>
      <url>2020/12/15/promiseJs/</url>
      
        <content type="html"><![CDATA[<h4 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h4><p> 1.1 “promise”是一个具有then方法的对象或函数，其行为符合此规范。也就是说Promise是一个对象或者函数。<br> 1.2 “thenable”是一个定义then方法的对象或函数，说句人话也就是这个对象必须要拥有then方法。<br> 1.3 “value”是任何合法的JavaScript值（包括undefined、或者promise）。<br> 1.4 promise中的异常需要使用throw语句抛出。<br> 1.5 当promise失败的时候需要给出失败的原因。</p><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><p> 1.1 promise必须要拥有三个状态: pending, fulfilled 和 rejected。<br> 1.2 当promise的状态是pending时，他可以变为成功fulfilled或者失败rejected。<br> 1.3 如果promise是成功状态，则他不能转换成任何状态，而且需要一个成功的值，并且这个值不能被改变。<br> 1.4 如果promise是失败状态，则他不能转换成任何状态，而且需要一个失败的原因，并且这个值不能被改变。</p><h4 id="then方法说明"><a href="#then方法说明" class="headerlink" title="then方法说明"></a>then方法说明</h4><p> 1.1 一个promise必须要有一个then方法，而且可以访问promise最终的结果，成功的值。<br> 1.2 then方法需要接收两个参数，onFulfilled 和 onRejected这两个参数是可选参数。</p><h4 id="catch方法说明"><a href="#catch方法说明" class="headerlink" title="catch方法说明"></a>catch方法说明</h4><p> 1.1 一个promise必须要有一个catch方法，而且可以访问promise最终的结果，失败的值。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _self = <span class="built_in">this</span>;</span><br><span class="line">    _self.status = <span class="string">&#x27;pending&#x27;</span>       <span class="comment">// 三个状态 pending / resolved / rejected</span></span><br><span class="line">    _self.result                   <span class="comment">// 存放成功resolve的数据</span></span><br><span class="line">    _self.error                    <span class="comment">// 存放失败reject的数据</span></span><br><span class="line">    _self.onResolvedCallbacks = [] <span class="comment">// 存放所有成功的回调</span></span><br><span class="line">    _self.onRejectedCallbacks = [] <span class="comment">// 存放所有失败的回调</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// resolve reject 接受返回给then函数的 数据、</span></span><br><span class="line">    <span class="comment">// resolve 和reject只会触发一次，且只会触发一个，要么成功resolve，要么失败reject</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (_self.status !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">      <span class="comment">// 更改状态</span></span><br><span class="line">      _self.status = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">      <span class="comment">// 缓存结果给then函数使用</span></span><br><span class="line">      _self.result = res</span><br><span class="line"></span><br><span class="line">      _self.onResolvedCallbacks.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        fn();</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (_self.status !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">      _self.status = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">      _self.error = error</span><br><span class="line">      _self.onRejectedCallbacks.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        fn(_self.error);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. promise 传入的函数立即执行，并接受两个参数 resolve reject</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// then 方法 接受成功的回调onFulfilled 失败的回调onRejected</span></span><br><span class="line">  <span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _self = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// then值穿透， eg: p.then().then(data =&gt; &#123;console.log(&#x27;then2:&#x27;, data)&#125;)</span></span><br><span class="line">    <span class="comment">// 第一个then没有传值，需要把数据传入下一个</span></span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="keyword">return</span> data; &#125;;</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123; <span class="keyword">throw</span> err; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> nextPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (_self.status === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> thenFnRes = onFulfilled(_self.result);</span><br><span class="line">          <span class="comment">// 前一个then入参函数如果return了数据，需要把数据传给下一个then</span></span><br><span class="line">          resolvePromise(nextPromise, thenFnRes, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// promise是可以多个then函数</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (_self.status === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> thenFnRes = onRejected(_self.error);</span><br><span class="line">          resolvePromise(nextPromise, thenFnRes, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 当异步还处于pending状态收集callback</span></span><br><span class="line">      <span class="keyword">if</span> (_self.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        _self.onResolvedCallbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> thenFnRes = onFulfilled(_self.result);</span><br><span class="line">            <span class="comment">// 这里需要把 onFulfilled执行的结果作为result resolve给下一个then</span></span><br><span class="line">            resolvePromise(nextPromise, thenFnRes, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        _self.onRejectedCallbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> catchFnRes = onRejected(_self.error);</span><br><span class="line">            resolvePromise(nextPromise, thenFnRes, resolve, reject);</span><br><span class="line">            resolve(catchFnRes)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return promise 保证可以链式调用</span></span><br><span class="line">    <span class="keyword">return</span> nextPromise</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span> (<span class="params">errorhandler</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Promise</span>.then(<span class="literal">null</span>, errorhandler)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理then入参函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>nextPromise then执行后return的Promise，保证链式调用</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>thenFnRes then传入函数执行的结果</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>resolve  nextPromise 的 resolve</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>reject nextPromise 的 reject</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">nextPromise, thenFnRes, resolve, reject</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// then函数的入参函数没有return数据</span></span><br><span class="line">    <span class="keyword">if</span> (!thenFnRes) &#123;</span><br><span class="line">      resolve(thenFnRes)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我们的Promise可能会和别人的Promise嵌套使用，官方文档要求，Promise中要书写判断，避免对方Promise不规范产生的影响。</span></span><br><span class="line">    <span class="comment">// 比如对方的Promise成功和失败都调用了，或者多次调用了成功。需要使用一个called的变量来表示Promise有没有被调用过。</span></span><br><span class="line">    <span class="keyword">let</span> called; <span class="comment">// 表示Promise有没有被调用过</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// then函数返回一个promise，提供链式调用</span></span><br><span class="line">    <span class="comment">// 防止then入参函数return返回的这个promise给promise, 这样会重复调用同一个promise</span></span><br><span class="line">    <span class="keyword">if</span> (nextPromise === thenFnRes) &#123;</span><br><span class="line">      <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;循环引用了，请检查then函数return数据是否正确！&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果返回的是object类型，需要判断是否是promise,还是普通的数据</span></span><br><span class="line">    <span class="comment">// 如果是promise需要执行这个promise并拿到resolve的结果返回给下一个then函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> thenFnRes === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> thenFnRes === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// then 存在是promise </span></span><br><span class="line">        <span class="keyword">let</span> then = thenFnRes.then;</span><br><span class="line">        <span class="comment">// 调用then, 这个then函数的this应该指向 thenFnRes</span></span><br><span class="line">        then.call(thenFnRes, <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (called) &#123; <span class="comment">// 是否调用过</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          <span class="comment">// 成功的结果，让nextPromise变为成功状态</span></span><br><span class="line">          <span class="comment">// y也有可能是promise，需要递归调用 resolvePromise</span></span><br><span class="line">          resolvePromise(nextPromise, y, resolve, reject)</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (called) &#123; <span class="comment">// 是否调用过</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          reject(r);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (called) &#123; <span class="comment">// 是否调用过</span></span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        called = <span class="literal">true</span>;</span><br><span class="line">        reject(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (called) &#123; <span class="comment">// 是否调用过</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      resolve(thenFnRes)</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(thenFnRes)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;then1:&#x27;</span>, res)</span><br><span class="line">  <span class="keyword">return</span> res + <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then()</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;then3:&#x27;</span>, res)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">new</span> <span class="built_in">Error</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;catch:&#x27;</span>, res)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// then1: 1</span></span><br><span class="line"><span class="comment">// then3: 2</span></span><br><span class="line"><span class="comment">// catch: TypeError: (intermediate value) is not a constructor</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EventLoop事件循环练习题</title>
      <link href="2020/12/10/taskdemo/"/>
      <url>2020/12/10/taskdemo/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;timeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;then&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// start =&gt; then =&gt; timeout</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;timeout1&#x27;</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;then1&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;then2&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;timeout2&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// then2 =&gt; timeout1 =&gt; then1 =&gt; timeout2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    reject();</span><br><span class="line">    resolve();</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 失败</span></span><br><span class="line"><span class="comment">// 只会打印失败，因为Promise的状态只会变化一次。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    resolve();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1， 2， 3</span></span><br><span class="line"><span class="comment">// new Promise传入的函数是同步代码，立刻就会被执行，所以会打印出1和2，</span></span><br><span class="line"><span class="comment">// Promise.then是微任务，当代码自行结束，会清空微任务队列，打印出3.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="number">2</span>)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="number">3</span>)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">.then(<span class="function">(<span class="params">x</span>) =&gt;</span> x + <span class="number">1</span>)</span><br><span class="line">.then(<span class="function"><span class="params">x</span> =&gt;</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;My Error&#x27;</span>)&#125;)</span><br><span class="line">.catch(<span class="function">() =&gt;</span> <span class="number">1</span>)</span><br><span class="line">.then(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>)</span><br><span class="line">.then(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x))</span><br><span class="line">.catch(<span class="built_in">console</span>.error);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j&lt;<span class="number">100</span>;j++)&#123;</span><br><span class="line">    j=<span class="number">99</span>&amp;&amp;resolve()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 3 5 4 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;async1 start&#x27;</span>); <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">await</span> async2(); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;async2&#x27;</span>); <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script start&#x27;</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>); <span class="comment">// 7</span></span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">async1();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>); <span class="comment">// 4</span></span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise2&#x27;</span>); <span class="comment">// 6</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script end2&#x27;</span>); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 start&#x27;</span>)  <span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">await</span> async2()               <span class="comment">// await后面的函数，相当于new Promise传入的函数是立即执行的</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 end&#x27;</span>)    <span class="comment">// 5 await下面的代码在await成功之后执行，相当于Promise.then，是一个微任务，不过是语法糖让这行代码看起来是同步的，其实不是的</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async2&#x27;</span>) <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script start&#x27;</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>) <span class="comment">// 7</span></span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">async1(); </span><br><span class="line">   </span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params"> resolve </span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>) <span class="comment">// 4</span></span><br><span class="line"> resolve();</span><br><span class="line">&#125;).then( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;promise2&#x27;</span>)  <span class="comment">// 6</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EventLoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli2 / vue-cli3 / vite+vue3.0 打包环境区分</title>
      <link href="2020/12/07/vue-bulid-env/"/>
      <url>2020/12/07/vue-bulid-env/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>刚好最近把 vue-cli2 / vue-cli3 / vite+vue3.0 的环境区分都来了一遍，特此记录。下文的方法都是自己使用亲测有效的，不过也不是唯一的方法。</p><h3 id="vue-cli2"><a href="#vue-cli2" class="headerlink" title="vue-cli2"></a>vue-cli2</h3><p>vue-cli2生成的项目目录下有<code>build</code>、<code>config</code>这两个目录，项目的<code>webpack配置</code>和<code>运行环境的区分</code>就是在这两个文件夹下去处理的；</p><h4 id="1-下载cross-env"><a href="#1-下载cross-env" class="headerlink" title="1.下载cross-env"></a>1.下载cross-env</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cross-env --save-dev</span><br></pre></td></tr></table></figure><h4 id="2-修改pageage-json中script"><a href="#2-修改pageage-json中script" class="headerlink" title="2.修改pageage.json中script"></a>2.修改pageage.json中script</h4><blockquote><p>增加<code>build:test</code>、<code>build:uat</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;build&quot;: &quot;node build/build.js&quot;,</span><br><span class="line">  &quot;build:test&quot;: &quot;cross-env NODE_ENV=production ENV_CONFIG=test node build/build.js&quot;,</span><br><span class="line">  &quot;build:uat&quot;: &quot;cross-env NODE_ENV=production ENV_CONFIG=uat node build/build.js&quot;,</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-更改各种环境下的baseUrl"><a href="#3-更改各种环境下的baseUrl" class="headerlink" title="3.更改各种环境下的baseUrl"></a>3.更改各种环境下的baseUrl</h4><p>在<code>config -&gt; dev.env.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> prodEnv = <span class="built_in">require</span>(<span class="string">&#x27;./prod.env&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(prodEnv, &#123;</span><br><span class="line">    NODE_ENV: <span class="string">&#x27;&quot;development&quot;&#x27;</span>,</span><br><span class="line">    API: <span class="string">&#x27;&quot;http://localhost:8083&quot;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>config -&gt; prod.env.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> API = <span class="string">&#x27;&quot;https://prod/&quot;&#x27;</span> <span class="comment">// prod </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.ENV_CONFIG === <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">    API = <span class="string">&#x27;&quot;https://test/&quot;&#x27;</span> <span class="comment">// test</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.ENV_CONFIG === <span class="string">&#x27;uat&#x27;</span>) &#123;</span><br><span class="line">    API = <span class="string">&#x27;&quot;https://UAT/&quot;&#x27;</span>  <span class="comment">// uat</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    NODE_ENV: <span class="string">&#x27;&quot;production&quot;&#x27;</span>,</span><br><span class="line">    API: API</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>定义<code>axios</code>的 <code>baseUrl</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// create an axios instance</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">    baseURL: process.env.API, <span class="comment">// api的base_url</span></span><br><span class="line">    timeout: <span class="number">500000</span>, <span class="comment">// request timeout</span></span><br><span class="line">    withCredentials: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="vue-cli3"><a href="#vue-cli3" class="headerlink" title="vue-cli3"></a>vue-cli3</h3><p>vue-cli3生的项目webpack的配置文件都是影藏起来的，提供了<code>vue.config.js</code>去配置一些webpack。</p><h4 id="1-修改pageage-json中script"><a href="#1-修改pageage-json中script" class="headerlink" title="1.修改pageage.json中script"></a>1.修改pageage.json中script</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;build&quot;: &quot;vue-cli-service build&quot;, </span><br><span class="line">  &quot;build:test&quot;: &quot;vue-cli-service build --mode test&quot;,</span><br><span class="line">  &quot;build:uat&quot;: &quot;vue-cli-service build --mode uat&quot;,</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="2-新建-env文件"><a href="#2-新建-env文件" class="headerlink" title="2.新建.env文件"></a>2.新建<code>.env</code>文件</h4><p>在根目录下建 <code>.env.test</code>、<code>.env.uat</code> 两个文件, 用<code>VUE_APP_</code>来增加环境区分标识</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// .env.test</span><br><span class="line"></span><br><span class="line">NODE_ENV = &#x27;production&#x27;</span><br><span class="line">VUE_APP_TITLE  = &#x27;test&#x27;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// .env.uat</span><br><span class="line"></span><br><span class="line">NODE_ENV = &#x27;production&#x27;</span><br><span class="line">VUE_APP_TITLE  = &#x27;uat&#x27;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-设置baseUrl"><a href="#3-设置baseUrl" class="headerlink" title="3.设置baseUrl"></a>3.设置baseUrl</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// base.url.js</span></span><br><span class="line"><span class="keyword">const</span> BASE_URL = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> baseUrl = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">switch</span> (process.env.NODE_ENV) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;development&#x27;</span>:</span><br><span class="line">      <span class="comment">// 本地的请求url</span></span><br><span class="line">      baseUrl = <span class="string">&#x27;http://localhost:8080/api&#x27;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;production&#x27;</span>:</span><br><span class="line">      <span class="comment">// 生产环境url</span></span><br><span class="line">      baseUrl = <span class="string">&#x27;https://prod/api&#x27;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (process.env.VUE_APP_TITLE === <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 测试环境地址</span></span><br><span class="line">        baseUrl = <span class="string">&#x27;https://test/api&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (process.env.VUE_APP_TITLE === <span class="string">&#x27;uat&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// uat 环境地址</span></span><br><span class="line">        baseUrl = <span class="string">&#x27;https://uat/api&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> baseUrl;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> BASE_URL;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> BASE_URL <span class="keyword">from</span> <span class="string">&#x27;./base.url&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; baseUrl &#125; = BASE_URL;</span><br><span class="line"></span><br><span class="line">axios.defaults.timeout = <span class="number">500000</span>;</span><br><span class="line">axios.defaults.baseURL = baseUrl;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="vite-vue3-0"><a href="#vite-vue3-0" class="headerlink" title="vite+vue3.0"></a>vite+vue3.0</h3><p>vite+vue3.0做环境区分是最简单的。</p><h4 id="1-修改pageage-json中script-1"><a href="#1-修改pageage-json中script-1" class="headerlink" title="1.修改pageage.json中script"></a>1.修改pageage.json中script</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot;: &quot;vite build --mode dev&quot;,</span><br><span class="line">&quot;build:test&quot;: &quot;vite build --mode test&quot;,</span><br><span class="line">&quot;build:uat&quot;: &quot;vite build --mode uat&quot;</span><br></pre></td></tr></table></figure><h4 id="2-新建环境文件"><a href="#2-新建环境文件" class="headerlink" title="2.新建环境文件"></a>2.新建环境文件</h4><p>在根目录下建 <code>.env.[环境名]</code>，然后打开文件写入以<code>VITE_</code>为开头的key</p><ul><li><code>.env.dev</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VITE_ENV=&#x27;dev&#x27;</span><br><span class="line">VITE_BASE_URL=&#x27;http://localhost:3001/api&#x27;</span><br></pre></td></tr></table></figure><ul><li><code>.env.prod</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VITE_ENV=&#x27;prod&#x27;</span><br><span class="line">VITE_BASE_URL=&#x27;http://prod/api&#x27;</span><br></pre></td></tr></table></figure><ul><li><code>.env.test</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VITE_ENV=&#x27;test&#x27;</span><br><span class="line">VITE_BASE_URL=&#x27;http://test/api&#x27;</span><br></pre></td></tr></table></figure><h4 id="3-设置baseUrl-1"><a href="#3-设置baseUrl-1" class="headerlink" title="3.设置baseUrl"></a>3.设置baseUrl</h4><p><code>vite</code>这里不再是从<code>process.env</code>获取环境变量了；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = <span class="keyword">import</span>.meta.env.VITE_BASE_URL;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue项目环境区分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3.0 + less/sass</title>
      <link href="2020/12/03/less/"/>
      <url>2020/12/03/less/</url>
      
        <content type="html"><![CDATA[<h3 id="vue3-0项目增加less-sass"><a href="#vue3-0项目增加less-sass" class="headerlink" title="vue3.0项目增加less/sass"></a>vue3.0项目增加less/sass</h3><blockquote><p>先安装less less-loader / scss  scss-loader  / style-loader</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yarn add less less-loader style-loader -DEV</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">yarn add scss scss-loader style-loader -DEV</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add style-resources-loader</span><br></pre></td></tr></table></figure><p><img src="/images/vue/vue3.0+less.jpg"></p><blockquote><p>然后会在根目录下自动建一个<code>vue.config.js</code></p></blockquote><p><img src="/images/vue/vue3.0+less1.jpg"></p><h3 id="更改一下配置就OK了"><a href="#更改一下配置就OK了" class="headerlink" title="更改一下配置就OK了"></a>更改一下配置就OK了</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">    <span class="string">&#x27;style-resources-loader&#x27;</span>: &#123;</span><br><span class="line">      preProcessor: <span class="string">&#x27;less&#x27;</span>,</span><br><span class="line">      patterns: [</span><br><span class="line">        path.resolve(__dirname, <span class="string">&#x27;./src/assets/style/*.less&#x27;</span>)</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5兼容问题记录</title>
      <link href="2020/11/26/compatibility/"/>
      <url>2020/11/26/compatibility/</url>
      
        <content type="html"><![CDATA[<h4 id="准备作妖"><a href="#准备作妖" class="headerlink" title="准备作妖"></a>准备作妖</h4><h6 id="1-移动端h5页面软键盘弹出后-背景图片被顶上去-高频"><a href="#1-移动端h5页面软键盘弹出后-背景图片被顶上去-高频" class="headerlink" title="1.移动端h5页面软键盘弹出后 背景图片被顶上去(高频)"></a>1.移动端h5页面软键盘弹出后 背景图片被顶上去(高频)</h6><blockquote><p>移动端h5页面在软键盘弹出后body的高度会被压缩，就导致原本高度100%的背景图被顶上去一截，需要把div的高度强行设回100%才能解决这个问题</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;app&quot; :style&#x3D;&quot;&#123; height: bodyHeight + &#39;px&#39; &#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"> </span><br><span class="line">mounted()&#123;</span><br><span class="line"> this.bodyHeight&#x3D;document.documentElement.clientHeight</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-ios手机input、textarea等元素的placeholder如果有多行，软键盘输入数据然后再删除，placeholder就只能显示一行了，不能全部展示-高频-；"><a href="#2-ios手机input、textarea等元素的placeholder如果有多行，软键盘输入数据然后再删除，placeholder就只能显示一行了，不能全部展示-高频-；" class="headerlink" title="2. ios手机input、textarea等元素的placeholder如果有多行，软键盘输入数据然后再删除，placeholder就只能显示一行了，不能全部展示(高频)；"></a>2. ios手机input、textarea等元素的placeholder如果有多行，软键盘输入数据然后再删除，placeholder就只能显示一行了，不能全部展示(高频)；</h6><blockquote><p>这个bug 只有ios手机才有；<br>解决思路：在input输入的有值得时候给元素<code>position:relative</code>,没数据的时候<code>position:static</code>,通过改变css让元素重新渲染。这里不一定就要用<code>position</code>，其他样式都可以，主要是要让元素重新渲染；</p></blockquote><h6 id="还有很多，继续补充"><a href="#还有很多，继续补充" class="headerlink" title="还有很多，继续补充"></a>还有很多，继续补充</h6>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3.0创建项目初体验</title>
      <link href="2020/09/27/vue3-0init/"/>
      <url>2020/09/27/vue3-0init/</url>
      
        <content type="html"><![CDATA[<h3 id="vue3-0已经发布啦"><a href="#vue3-0已经发布啦" class="headerlink" title="vue3.0已经发布啦~"></a>vue3.0已经发布啦~</h3><p>记录一下自己创建vue3.0项目的学习过程。</p><h3 id="更新的一些东西"><a href="#更新的一些东西" class="headerlink" title="更新的一些东西"></a>更新的一些东西</h3><blockquote><ol><li>Object.defineProperty =&gt; Proxy</li><li>vdom 静态标记更加强大</li><li>Composition API</li><li>vite</li></ol></blockquote><h3 id="初始项目"><a href="#初始项目" class="headerlink" title="初始项目"></a>初始项目</h3><p>一改vue2.x使用vue-cli, vue3.0基于vite去创建项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line">cd &lt;project-name&gt;</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">│   └── favicon.ico</span><br><span class="line">└── src</span><br><span class="line">    ├── App.vue</span><br><span class="line">    ├── assets</span><br><span class="line">    │   └── logo.png</span><br><span class="line">    ├── components</span><br><span class="line">    │   └── HelloWorld.vue</span><br><span class="line">    ├── index.css</span><br><span class="line">    └── main.js</span><br></pre></td></tr></table></figure><h3 id="index-html-main-js"><a href="#index-html-main-js" class="headerlink" title="index.html/main.js"></a>index.html/main.js</h3><p>可以看到 main.js的引用写了<code>type=&quot;module&quot;</code>,利用浏览器的自带的import机制；</p><blockquote><p>index.html</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;icon&quot; href&#x3D;&quot;&#x2F;favicon.ico&quot; &#x2F;&gt;</span><br><span class="line">  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Vite App&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;script type&#x3D;&quot;module&quot; src&#x3D;&quot;&#x2F;src&#x2F;main.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><ul><li>main.js 初始实例不再是 <code>new vue(option)</code>，改为了<code>createApp(App)</code></li><li><code>Vue.prototype</code>扩展方法改为了<code>app.config.globalProperties</code></li><li>还有一个需要注意的地方，vue3.0 setup内部不支持this，像vue2.x里可以 Vue.prototype扩展一些全局方法，在页面使用直接this就可以访问，在<code>Composition API</code>里面已经不能这么玩了😂。</li></ul><blockquote><p>main.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> config <span class="keyword">from</span> <span class="string">&#x27;./utils/config_globalProperties.ts&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.config: 全局配置的对象 </span></span><br><span class="line"><span class="comment">// app.config.globalProperties代替Vue 2.x Vue.prototype 扩展</span></span><br><span class="line"><span class="comment">// vue3.0 setup内部不支持this, 一些公共方法挂载vue也是访问不到的</span></span><br><span class="line"><span class="built_in">Object</span>.keys(config).forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">  app.config.globalProperties[ele] = config[ele]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用挂载</span></span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h3><h4 id="1-setup"><a href="#1-setup" class="headerlink" title="1.setup"></a>1.setup</h4><p>组件选项创建后在组件创建之前执行的组件选项，它用作组合API的入口点,相当于<code>beforCreated()</code>、<code>created()</code>；<br>vue2.x 在写页面的时候，<code>script</code>里面，是写的<code>option Api</code>导出一个对象，对象里面就是<code>data</code>、<code>methods</code>、<code>mounted</code>…..<br>现在直接一个<code>setup</code>函数，在<code>setup</code>里面把数据return给template；<br>下面是官网的例子，非常清晰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- MyBook.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; readersNumber &#125;&#125; &#123;&#123; book.title &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; ref, reactive &#125; from &#39;vue&#39;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">      const readersNumber &#x3D; ref(0)</span><br><span class="line">      const book &#x3D; reactive(&#123; title: &#39;Vue 3 Guide&#39; &#125;)</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; expose to template</span><br><span class="line">      return &#123;</span><br><span class="line">        readersNumber,</span><br><span class="line">        book</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-ref"><a href="#2-ref" class="headerlink" title="2.ref"></a>2.ref</h4><p>是对基础数据进行双向绑定的Api，经过ref过的数据，需要通过value属性拿到值；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = ref(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.value) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="3-reactive"><a href="#3-reactive" class="headerlink" title="3.reactive"></a>3.reactive</h4><p>引用类型的数据结构使用<code>reactive</code>,使用<code>reactive</code>有一个要注意的点，最好不要对reactive过的对象做结构操作，会使reactive过的对象里面的基本数据类型失去双向绑定，对解构的数据做更改是不会再去更新reactive的这个对象了。建议对reactive的数据慎用解构，直接操作reactive的对象，免得导致一些不必要的坑;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> obj = reactive(&#123;</span><br><span class="line">    a: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">    b: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">    c: &#123;</span><br><span class="line">      c1: <span class="string">&quot;c1&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 数据更新</span></span><br><span class="line">  obj.a = <span class="string">&quot;我是a呀&quot;</span>;</span><br><span class="line">  obj.b = <span class="string">&quot;我是b呀&quot;</span>;</span><br><span class="line">  obj.c.c1 = <span class="string">&quot;我是c1呀&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注意：对reactive的数据解构会导致 基础数据类型 失去reactive</span></span><br><span class="line">  <span class="keyword">let</span> &#123; a, c &#125; = obj;</span><br><span class="line">  a = <span class="string">&quot;我是被解构的a&quot;</span>;     <span class="comment">// 已经脱离reactive</span></span><br><span class="line">  c.c1 = <span class="string">&quot;我是被解构的c1&quot;</span>; <span class="comment">// 还是可以更改到obj</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(obj); <span class="comment">// &#123;a: &quot;我是a呀&quot;,b: &quot;我是b呀&quot;,c: &#123;c1: &quot;我是被解构的c1&quot;&#125;&#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(a);   <span class="comment">// 我是被解构的a</span></span><br><span class="line">  <span class="built_in">console</span>.log(c);   <span class="comment">// &#123;c1: &quot;我是被解构的c1&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-Lifecycle-Hooks-生命周期"><a href="#4-Lifecycle-Hooks-生命周期" class="headerlink" title="4.Lifecycle Hooks 生命周期"></a>4.Lifecycle Hooks 生命周期</h4><p><code>composition Api</code>里面生命周期也有所变化，<code>beforeCreate</code>、<code>created</code>被setup替代，其他生命周期均多了<code>on</code>:</p><ul><li><del><code>beforeCreate</code></del> -&gt; <code>use setup()</code></li><li><del><code>created</code></del> -&gt; <code>use setup()</code></li><li><code>beforeMount</code> -&gt; <code>onBeforeMount</code></li><li><code>mounted</code> -&gt; <code>onMounted</code></li><li><code>beforeUpdate</code> -&gt; <code>onBeforeUpdate</code></li><li><code>updated</code> -&gt; <code>onUpdated</code></li><li><code>beforeUnmount</code> -&gt; <code>onBeforeUnmount</code></li><li><code>unmounted</code> -&gt; <code>onUnmounted</code></li><li><code>errorCaptured</code> -&gt; <code>onErrorCaptured</code></li><li><code>renderTracked</code> -&gt; <code>onRenderTracked</code></li><li><code>renderTriggered</code> -&gt; <code>onRenderTriggered</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUpdated, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyComponent = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;mounted!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUpdated(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;updated!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;unmounted!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-Provide-Inject"><a href="#5-Provide-Inject" class="headerlink" title="5.Provide / Inject"></a>5.Provide / Inject</h4><p>其实这个跟<code>React.context</code>很类似，都是为了解决组件嵌套多层props传值的问题(避免数据多层传递的繁琐性)，在父级把需要传递的数据通过<code>Provide</code>包裹，在需要用到数据的子组件使用<code>Inject</code>注入即可使用，在子级修改<code>Inject</code>后的值父级的值是动态改变的。</p><blockquote><p>app.vue 父级</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;img alt&#x3D;&quot;Vue logo&quot; src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot; &#x2F;&gt;</span><br><span class="line">  &lt;HelloWorld &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloWorld from &quot;.&#x2F;components&#x2F;HelloWorld.vue&quot;;</span><br><span class="line">import &#123; provide, ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    let msg &#x3D; ref(&quot;Hello Vue 3.0 + Vite&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 提供数据 provide inject</span><br><span class="line">    &#x2F;&#x2F; vue3.0 一改组件</span><br><span class="line">    &#x2F;&#x2F; 类似于 React.context(), myContext.provider myCcontent.consumer</span><br><span class="line">    provide(&quot;msg&quot;, msg);</span><br><span class="line"></span><br><span class="line">    return &#123; msg &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>helloworld.vue 子级中使用</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 接收 父组件传来的数据</span></span><br><span class="line">  <span class="keyword">const</span> msg = inject(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; msg &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="6-自己搭建的小项目里暂时只使用到了："><a href="#6-自己搭建的小项目里暂时只使用到了：" class="headerlink" title="6.自己搭建的小项目里暂时只使用到了："></a>6.自己搭建的小项目里暂时只使用到了：</h4><ul><li>ref</li><li>reactive</li><li>provide inject</li></ul><blockquote><p>helloword.vue</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; obj.a &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; obj.b &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; obj.c &amp;&amp; obj.c.c1 &#125;&#125;、&#123;&#123; obj.c &amp;&amp; obj.c.c2 &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;addCount&quot;&gt;count is: &#123;&#123; count &#125;&#125;&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import helloworld from &quot;.&#x2F;helloworld&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    &#x2F;&#x2F; helloworld() 为逻辑代码，可以单独拎出去，这也是composition Api的一大好处，逻辑代码可以高度解耦，可复用性更强！</span><br><span class="line">    return Object.assign(&#123;&#125;, helloworld());</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>helloworld.ts </p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, inject &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; $log, $info, $test &#125; <span class="keyword">from</span> <span class="string">&quot;../modules-index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> helloworld = ():<span class="function"><span class="params">object</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 接收 父组件传来的数据</span></span><br><span class="line">  <span class="keyword">const</span> msg = inject(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. ref</span></span><br><span class="line">  <span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> addCount = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count.value++;</span><br><span class="line">    $log(count.value, <span class="string">&quot;count:&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. reactive</span></span><br><span class="line">  <span class="keyword">const</span> obj = reactive(&#123;</span><br><span class="line">    a: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">    b: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">    c: &#123;</span><br><span class="line">      c1: <span class="string">&quot;c1&quot;</span>,</span><br><span class="line">      c2: <span class="string">&quot;c2&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  obj.a = <span class="string">&quot;我是a呀&quot;</span>;</span><br><span class="line">  obj.b = <span class="string">&quot;我是b呀&quot;</span>;</span><br><span class="line">  obj.c.c1 = <span class="string">&quot;我是c1呀&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注意：对reactive的数据解构会导致 基础数据类型 失去reactive</span></span><br><span class="line">  <span class="keyword">let</span> &#123; a, c &#125; = obj;</span><br><span class="line">  a = <span class="string">&quot;我是被解构的a&quot;</span>;</span><br><span class="line">  c.c1 = <span class="string">&quot;我是被解构的c1&quot;</span>;</span><br><span class="line"></span><br><span class="line">  $log(obj);     <span class="comment">// &#123;a: &quot;我是a呀&quot;,b: &quot;我是b呀&quot;,c: &#123;c1: &quot;我是被解构的c1&quot;,c2: &quot;c2&quot;,&#125;,&#125;</span></span><br><span class="line">  $log(a, <span class="string">&#x27;a:&#x27;</span>); <span class="comment">// 我是被解构的a </span></span><br><span class="line">  $log(c, <span class="string">&#x27;c:&#x27;</span>); <span class="comment">// &#123;c1: &quot;我是被解构的c1&quot;, c2: &quot;c2&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 测试引用</span></span><br><span class="line">  $log($info, <span class="string">&quot;测试引用:&quot;</span>);</span><br><span class="line">  $test();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过return把数据暴露给template</span></span><br><span class="line">  <span class="keyword">return</span> &#123; msg, count, addCount, obj &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> helloworld;</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>以上示例的代码放在了GitHub上： <a href="https://github.com/LLDLLY/vue3.0-init.git">https://github.com/LLDLLY/vue3.0-init.git</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Composition API 和 React Hook区别 (学习笔记)</title>
      <link href="2020/09/18/compositionApi/"/>
      <url>2020/09/18/compositionApi/</url>
      
        <content type="html"><![CDATA[<p><code>Composition API</code>与<code>React Hook</code>很像，说说区别？</p><h4 id="React-Hook"><a href="#React-Hook" class="headerlink" title="React Hook"></a>React Hook</h4><blockquote><p>从React Hook的实现角度看，React Hook是根据<code>useState</code>调用的顺序来确定下一次重渲染时的state是来源于哪个<code>useState</code>，所以出现了以下限制：</p></blockquote><p>1.不能在循环、条件、嵌套函数中调用Hook；<br>2.必须确保总是在你的React函数的顶层调用Hook；<br>3.<code>useEffect</code>、<code>useMemo</code>等函数必须手动确定依赖关系；</p><h4 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h4><blockquote><p>而Composition API是基于Vue的响应式系统实现的，与React Hook的相比声明在<code>setup</code>函数内，一次组件实例化只调用一次<code>setup</code>，<br>而React Hook每次重渲染都需要调用Hook，使得React的GC( 垃圾回收 )比Vue更有压力，性能也相对于Vue来说也较慢,<br>Compositon API的调用不需要顾虑调用顺序，也可以在循环、条件、嵌套函数中使用,<br>响应式系统自动实现了依赖收集，进而组件的部分的性能优化由Vue内部自己完成，<br>而React Hook需要手动传入依赖，而且必须必须保证依赖的顺序，让<code>useEffect</code>、<code>useMemo</code>等函数正确的捕获依赖变量，否则会由于依赖不正确使得组件性能下降。</p></blockquote><p>虽然Compositon API看起来比React Hook好用，但是其设计思想也是借鉴React Hook的。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小工具记录</title>
      <link href="2020/08/10/utils/"/>
      <url>2020/08/10/utils/</url>
      
        <content type="html"><![CDATA[<h3 id="node-热更新工具nodemon"><a href="#node-热更新工具nodemon" class="headerlink" title="node 热更新工具nodemon"></a>node 热更新工具nodemon</h3><p><a href="https://www.npmjs.com/package/nodemon">https://www.npmjs.com/package/nodemon</a></p><h3 id="node版本管理工具-n"><a href="#node版本管理工具-n" class="headerlink" title="node版本管理工具 n"></a>node版本管理工具 n</h3><p><a href="https://github.com/tj/n">https://github.com/tj/n</a></p><h3 id="npm-源管理工具-nrm"><a href="#npm-源管理工具-nrm" class="headerlink" title="npm 源管理工具 nrm"></a>npm 源管理工具 nrm</h3><p><a href="https://github.com/Pana/nrm">https://github.com/Pana/nrm</a></p><h3 id="把png-jpg转svg-的网站"><a href="#把png-jpg转svg-的网站" class="headerlink" title="把png/jpg转svg 的网站"></a>把png/jpg转svg 的网站</h3><p><a href="https://www.vectorizer.io/images/upload.html">https://www.vectorizer.io/images/upload.html</a></p><h3 id="把svg转iconfont"><a href="#把svg转iconfont" class="headerlink" title="把svg转iconfont"></a>把svg转iconfont</h3><p><a href="https://icomoon.io/app/#/select/font">https://icomoon.io/app/#/select/font</a></p><h3 id="打开-ttf-文件工具"><a href="#打开-ttf-文件工具" class="headerlink" title="打开 .ttf 文件工具"></a>打开 .ttf 文件工具</h3><p><a href="http://fontstore.baidu.com/static/editor/">http://fontstore.baidu.com/static/editor/</a></p><h3 id="背景大图地址"><a href="#背景大图地址" class="headerlink" title="背景大图地址"></a>背景大图地址</h3><p><a href="https://picsum.photos/">https://picsum.photos/</a></p><h3 id="H5手写签名插件"><a href="#H5手写签名插件" class="headerlink" title="H5手写签名插件"></a>H5手写签名插件</h3><p><a href="https://www.npmjs.com/package/signature_pad">https://www.npmjs.com/package/signature_pad</a></p><h3 id="H5预览-docx-excel-xlsx-ppt"><a href="#H5预览-docx-excel-xlsx-ppt" class="headerlink" title="H5预览 docx excel xlsx ppt"></a>H5预览 docx excel xlsx ppt</h3><p><a href="https://view.officeapps.live.com/op/view.aspx?src=">https://view.officeapps.live.com/op/view.aspx?src=</a></p><h3 id="网站可以使用的优美句子-api"><a href="#网站可以使用的优美句子-api" class="headerlink" title="网站可以使用的优美句子 api"></a>网站可以使用的优美句子 api</h3><p><a href="https://hitokoto.cn/#">https://hitokoto.cn/#</a></p><h3 id="GitHub-JsDeliver-静态资源加速"><a href="#GitHub-JsDeliver-静态资源加速" class="headerlink" title="GitHub+JsDeliver 静态资源加速"></a>GitHub+JsDeliver 静态资源加速</h3><p>JSD 的链接是什么？</p><p>直接引用</p><p>格式为：<a href="https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/</a>&lt;用户名&gt;/&lt;仓库名&gt;/&lt;文件及路径&gt;</p><p>例如：<a href="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2/2020/05/28/911db4c3b95ed896b066b6e9aabae311.png">https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2/2020/05/28/911db4c3b95ed896b066b6e9aabae311.png</a> 代表用户名 blogimg 下的 HexoStaticFlle2 仓库中文件夹 /2020/05/28/ 里的 911db4c3b95ed896b066b6e9aabae311.png 文件。</p><p>分支及版本号</p><p>分支与版本号加到仓库后变，用 @符链接。格式为：<a href="https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/</a>&lt;用户名&gt;/&lt;仓库名&gt;@[分支/版本号]/&lt;文件及路径&gt;</p><h3 id="图片压缩工具"><a href="#图片压缩工具" class="headerlink" title="图片压缩工具"></a>图片压缩工具</h3><p>可以批量压缩<br>imagine</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 更改账户和密码</title>
      <link href="2020/08/03/gitRename/"/>
      <url>2020/08/03/gitRename/</url>
      
        <content type="html"><![CDATA[<p>git报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: Authentication failed for &#x27;http://--.--.--.--:---/-/-.git/&#x27;</span><br></pre></td></tr></table></figure><p>解决办法：执行如下命令，重置权限验证信息。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --system --unset credential.helper</span><br></pre></td></tr></table></figure><p>之后再输入clone的命令，git会弹出输入的账户和密码的窗口，重新输入一下就好啦~</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app 踩坑</title>
      <link href="2020/07/30/uni-app/"/>
      <url>2020/07/30/uni-app/</url>
      
        <content type="html"><![CDATA[<h3 id="H5端-uni-load-more-触底不刷新问题"><a href="#H5端-uni-load-more-触底不刷新问题" class="headerlink" title="H5端 uni-load-more 触底不刷新问题"></a>H5端 uni-load-more 触底不刷新问题</h3><blockquote><p><code>uni-page</code>标签 <code>height</code>不能写成<code>100%</code>，要写<code>height: auto;</code>.</p></blockquote><h3 id="微信小程序更改CheckBox样式"><a href="#微信小程序更改CheckBox样式" class="headerlink" title="微信小程序更改CheckBox样式"></a>微信小程序更改CheckBox样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* #ifdef APP-PLUS || MP-WEIXIN */</span></span><br><span class="line"><span class="selector-tag">checkbox</span> <span class="selector-class">.wx-checkbox-input</span>&#123;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">30</span>rpx;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">30</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">checkbox</span>  <span class="selector-class">.wx-checkbox-input</span><span class="selector-class">.wx-checkbox-input-checked</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: @theme;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#FFFFFF</span> <span class="meta">!important</span>;</span><br><span class="line"><span class="attribute">border-color</span>: @theme;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">checkbox</span>  <span class="selector-class">.wx-checkbox-input</span><span class="selector-class">.wx-checkbox-input-checked</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>) <span class="built_in">scale</span>(.<span class="number">45</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* #endif */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="微信小程序更改radio样式"><a href="#微信小程序更改radio样式" class="headerlink" title="微信小程序更改radio样式"></a>微信小程序更改radio样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* #ifdef APP-PLUS || MP-WEIXIN */</span></span><br><span class="line">    <span class="selector-tag">radio</span> <span class="selector-class">.wx-radio-input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30</span>rpx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">radio</span> <span class="selector-class">.wx-radio-input</span><span class="selector-class">.wx-radio-input-checked</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">30</span>rpx;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30</span>rpx;</span><br><span class="line">        <span class="attribute">background</span>:@theme <span class="meta">!important</span>;</span><br><span class="line">        <span class="attribute">border-color</span>: @theme <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">radio</span> <span class="selector-class">.wx-radio-input</span><span class="selector-class">.wx-radio-input-checked</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>) <span class="built_in">scale</span>(.<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* #endif */</span></span><br></pre></td></tr></table></figure><h3 id="微信小程序修改switch样式"><a href="#微信小程序修改switch样式" class="headerlink" title="微信小程序修改switch样式"></a>微信小程序修改switch样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* #ifdef APP-PLUS || MP-WEIXIN  */</span></span><br><span class="line"><span class="selector-tag">switch</span> <span class="selector-class">.wx-switch-input</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">56</span>rpx ;</span><br><span class="line"><span class="attribute">background</span>: @theme <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#ccc</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*白色样式（false的样式）*/</span></span><br><span class="line"><span class="selector-tag">switch</span> <span class="selector-class">.wx-switch-input</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">52</span>rpx ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*（true的样式）*/</span></span><br><span class="line"><span class="selector-tag">switch</span> <span class="selector-class">.wx-switch-input</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">52</span>rpx;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">52</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* #endif */</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="动态修改导航栏的icon"><a href="#动态修改导航栏的icon" class="headerlink" title="动态修改导航栏的icon"></a>动态修改导航栏的icon</h3><p>此方案改了icon样式后，onNavigationBarButtonTap将不再触发，坑！还是用自定义导航栏吧；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">flag: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">...mapState(&#123;</span><br><span class="line">list: <span class="function"><span class="params">state</span> =&gt;</span> state.home.list,</span><br><span class="line">theme: <span class="function"><span class="params">state</span> =&gt;</span> state.common.theme,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">onNavigationBarButtonTap</span>(<span class="params">btn</span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(btn)</span><br><span class="line"><span class="comment">// 分享</span></span><br><span class="line"><span class="keyword">if</span> (btn.index === <span class="number">0</span>) &#123;</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">icon: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">title:<span class="string">&#x27;分享&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 爱心</span></span><br><span class="line"><span class="keyword">if</span> (btn.index === <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> pages = getCurrentPages();</span><br><span class="line"><span class="keyword">let</span> page = pages[pages.length - <span class="number">1</span>];</span><br><span class="line"><span class="comment">// #ifdef APP-PLUS </span></span><br><span class="line"><span class="keyword">let</span> currentWebview = page.$getAppWebview();</span><br><span class="line"><span class="keyword">let</span> titleObj = currentWebview.getStyle().titleNView;</span><br><span class="line"><span class="keyword">if</span> (!titleObj.buttons) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.flag) &#123;</span><br><span class="line">titleObj.buttons[<span class="number">1</span>].fontSrc = <span class="string">&quot;/static/style/fonts/font.ttf&quot;</span>;</span><br><span class="line">titleObj.buttons[<span class="number">1</span>].text = <span class="string">&quot;\ue645&quot;</span>;</span><br><span class="line">titleObj.buttons[<span class="number">1</span>].fontSize = <span class="number">24</span>;</span><br><span class="line">titleObj.buttons[<span class="number">1</span>].color = <span class="built_in">this</span>.theme == <span class="string">&#x27;theme-deep-pink&#x27;</span>? <span class="string">&#x27;#FC6BC0&#x27;</span>:<span class="string">&#x27;#ffb1a7&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">titleObj.buttons[<span class="number">1</span>].text = <span class="string">&quot;/static/style/fonts/other.ttf&quot;</span>;</span><br><span class="line">titleObj.buttons[<span class="number">1</span>].text = <span class="string">&quot;\ue900&quot;</span>;</span><br><span class="line">titleObj.buttons[<span class="number">1</span>].fontSize = <span class="number">18</span>;</span><br><span class="line">titleObj.buttons[<span class="number">1</span>].color = <span class="string">&#x27;#333333&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(this.flag);</span></span><br><span class="line"></span><br><span class="line">titleObj.buttons[<span class="number">1</span>].width = <span class="string">&#x27;40px&#x27;</span>;</span><br><span class="line">currentWebview.setStyle(&#123;</span><br><span class="line">titleNView: titleObj</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// #endif</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="页面展示base64图片不显示的坑"><a href="#页面展示base64图片不显示的坑" class="headerlink" title="页面展示base64图片不显示的坑"></a>页面展示base64图片不显示的坑</h3><p>这个是字符串太长传输中加入回车导致, 需要把回车和换行都去掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = base64Data.replace(<span class="regexp">/[\r\n]/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表删除(学习笔记)</title>
      <link href="2020/07/27/exercise1/"/>
      <url>2020/07/27/exercise1/</url>
      
        <content type="html"><![CDATA[<h4 id="给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。"><a href="#给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。" class="headerlink" title="给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。"></a>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.val = val;</span><br><span class="line">    <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    val: <span class="number">1</span>,</span><br><span class="line">    next: &#123;</span><br><span class="line">        val: <span class="number">1</span>,</span><br><span class="line">        next: &#123;</span><br><span class="line">            val: <span class="number">2</span>,</span><br><span class="line">            next: &#123;</span><br><span class="line">                val: <span class="number">3</span>,</span><br><span class="line">                next: &#123;</span><br><span class="line">                    val: <span class="number">4</span>,</span><br><span class="line">                    next: <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cur = node;</span><br><span class="line">    <span class="keyword">while</span> (cur &amp;&amp; cur.next) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur.val === cur.next.val)&#123;</span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(fn(node))); <span class="comment">// &#123;&quot;val&quot;:1,&quot;next&quot;:&#123;&quot;val&quot;:2,&quot;next&quot;:&#123;&quot;val&quot;:3,&quot;next&quot;:&#123;&quot;val&quot;:4,&quot;next&quot;:null&#125;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="给定一个排序链表，删除所有含有重复数字的结点，只保留原始链表中-没有重复出现的数字。"><a href="#给定一个排序链表，删除所有含有重复数字的结点，只保留原始链表中-没有重复出现的数字。" class="headerlink" title="给定一个排序链表，删除所有含有重复数字的结点，只保留原始链表中 没有重复出现的数字。"></a>给定一个排序链表，删除所有含有重复数字的结点，只保留原始链表中 没有重复出现的数字。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 链表构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.val = val;</span><br><span class="line">    <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    val: <span class="number">1</span>,</span><br><span class="line">    next: &#123;</span><br><span class="line">        val: <span class="number">2</span>,</span><br><span class="line">        next: &#123;</span><br><span class="line">            val: <span class="number">4</span>,</span><br><span class="line">            next: &#123;</span><br><span class="line">                val: <span class="number">4</span>,</span><br><span class="line">                next: &#123;</span><br><span class="line">                    val: <span class="number">4</span>,</span><br><span class="line">                    next: <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn2 = <span class="function"><span class="keyword">function</span> (<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 特殊情况，没有结点，只有一个结点，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (!head &amp;&amp; !head.next) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建一个空节点，保证链表可以访问</span></span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> ListNode(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    <span class="comment">// 可以理解为指针，记录循环到那一步</span></span><br><span class="line">    <span class="keyword">let</span> cur = dummy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur.next &amp;&amp; cur.next.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.next.val === cur.next.next.val) &#123;</span><br><span class="line">            <span class="comment">// 记录重复的值</span></span><br><span class="line">            <span class="keyword">let</span> value = cur.next.val;</span><br><span class="line">            <span class="comment">// 判断后续结点是否还有重复</span></span><br><span class="line">            <span class="keyword">while</span> (cur.next &amp;&amp; cur.next.val === value) &#123;</span><br><span class="line">                <span class="comment">// 重复就删除该结点</span></span><br><span class="line">                cur.next = cur.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn2(node));  <span class="comment">// &#123; val: 1, next: &#123; val: 2, next: null &#125; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>less、sass换肤方案记录</title>
      <link href="2020/07/16/lessSass/"/>
      <url>2020/07/16/lessSass/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>现在换肤的场景越来越多，特此总结一下自己使用过切实可行的两种换肤方案，less和sass各一种，less配合的vue项目，sass配合的react项目；大体的思路都是一样的：</p><blockquote><p>1.将主题会用到的颜色都使用变量定义；<br>2.使用<code>less/sass</code>mixin和函数实现不同主题的颜色选取；<br>3.在body上放一个用于区别主题的类名或者属性，通过动态更换这个类名，实现主题的切换；</p></blockquote><h3 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h3><h4 id="1-效果"><a href="#1-效果" class="headerlink" title="1.效果"></a>1.效果</h4><p>定义了两套主题：蓝色和橙色<br>先看效果吧，把类名改为<code>theme_blue</code>切换为<code>theme_orange</code>主题直接就换掉啦~<br> <img src="/images/css/2.jpg" alt="蓝色主题"><br> <img src="/images/css/1.jpg" alt="橙色主题"></p><h4 id="2-定义变量"><a href="#2-定义变量" class="headerlink" title="2.定义变量"></a>2.定义变量</h4><ol><li>定义变量;</li><li>定义了一个叫theme的mixin，把定义的变量传入mixin内部;</li></ol><p><code>theme.blue.less</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主题颜色 蓝</span></span><br><span class="line"><span class="variable">@theme:</span> <span class="number">#1989fa</span>;</span><br><span class="line"><span class="variable">@theme_to:</span> <span class="number">#1989fa</span>;</span><br><span class="line"><span class="variable">@theme_black:</span> <span class="number">#272b2e</span>;             <span class="comment">// 官网黑</span></span><br><span class="line"><span class="comment">// 渐变</span></span><br><span class="line"><span class="variable">@linear:</span> <span class="number">#1989fa</span>;</span><br><span class="line"><span class="variable">@linear_to:</span> <span class="number">#1989fa</span>;</span><br><span class="line"><span class="comment">//常用颜色</span></span><br><span class="line"><span class="variable">@Black:</span> <span class="number">#000000</span>;                   <span class="comment">// 白底的须知</span></span><br><span class="line"><span class="variable">@White:</span> <span class="number">#ffffff</span>;                   <span class="comment">// 白色底或文字</span></span><br><span class="line"><span class="variable">@GeneralGray:</span> <span class="number">#999999</span>;             <span class="comment">// 正常灰色字体，多用于值的显示</span></span><br><span class="line"><span class="variable">@DeepGray:</span> <span class="number">#333333</span>;                <span class="comment">// 深灰色字体，多用于表单页面的参数名和标题</span></span><br><span class="line"><span class="variable">@AuxiliaryGray:</span> <span class="number">#dcdcdc</span>;           <span class="comment">// 常用于分割线</span></span><br><span class="line"><span class="variable">@WhiteGray:</span> <span class="number">#f8f8f8</span>;               <span class="comment">// 页面最底层灰色背景</span></span><br><span class="line"><span class="variable">@borderGray:</span> <span class="number">#ebedf0</span>;              <span class="comment">// border</span></span><br><span class="line"><span class="variable">@Divider:</span> <span class="number">#dcdcdc</span>;</span><br><span class="line"><span class="variable">@backgroundAlert:</span> <span class="number">#f1f3f4</span>;         <span class="comment">// alert背景色</span></span><br><span class="line"><span class="variable">@buttonShadowColor:</span> <span class="number">#1989fa</span>;       <span class="comment">// button shadow</span></span><br><span class="line"><span class="variable">@LightGrey:</span> rgba(<span class="number">77</span>, <span class="number">85</span>, <span class="number">93</span>, <span class="number">0.2</span>); <span class="comment">// 淡灰色, 一般用于按钮等</span></span><br><span class="line"><span class="variable">@border:</span> <span class="number">1px</span> solid <span class="number">#ebedf0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// theme mixin把变量传入</span></span><br><span class="line"><span class="selector-class">.theme</span>(</span><br><span class="line">  <span class="variable">@theme</span>,</span><br><span class="line">  <span class="variable">@theme_to</span>,</span><br><span class="line">  <span class="variable">@Black</span>,</span><br><span class="line">  <span class="variable">@White</span>,</span><br><span class="line">  <span class="variable">@GeneralGray</span>,</span><br><span class="line">  <span class="variable">@DeepGray</span>,</span><br><span class="line">  <span class="variable">@AuxiliaryGray</span>,</span><br><span class="line">  <span class="variable">@WhiteGray</span>,</span><br><span class="line">  <span class="variable">@backgroundAlert</span>,</span><br><span class="line">  <span class="variable">@borderGray</span>,</span><br><span class="line">  <span class="variable">@Divider</span>,</span><br><span class="line">  <span class="variable">@buttonShadowColor</span>,</span><br><span class="line">  <span class="variable">@LightGrey</span>,</span><br><span class="line">  <span class="variable">@linear</span>,</span><br><span class="line">  <span class="variable">@linear_to</span>,</span><br><span class="line">  <span class="variable">@theme_black</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>theme.orange.less</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//主题颜色 橙</span></span><br><span class="line"><span class="variable">@theme:</span> <span class="number">#f87f24</span>;                  <span class="comment">// 橙色选中高亮 #ee4a02</span></span><br><span class="line"><span class="variable">@theme_to:</span> <span class="number">#ff8917</span>;               <span class="comment">// 选中高亮 #ff8917</span></span><br><span class="line"><span class="variable">@theme_black:</span> <span class="number">#272b2e</span>;            <span class="comment">// 官网黑</span></span><br><span class="line"><span class="comment">// 渐变</span></span><br><span class="line"><span class="variable">@linear:</span> <span class="number">#ff8700</span>;</span><br><span class="line"><span class="variable">@linear_to:</span> <span class="number">#ffbd37</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//常用颜色</span></span><br><span class="line"><span class="variable">@Black:</span> <span class="number">#000000</span>;                  <span class="comment">// 白底的须知</span></span><br><span class="line"><span class="variable">@White:</span> <span class="number">#ffffff</span>;                  <span class="comment">// 白色底或文字</span></span><br><span class="line"><span class="variable">@GeneralGray:</span> <span class="number">#999999</span>;            <span class="comment">// 正常灰色字体，多用于值的显示</span></span><br><span class="line"><span class="variable">@DeepGray:</span> <span class="number">#333333</span>;               <span class="comment">// 深灰色字体，多用于表单页面的参数名和标题</span></span><br><span class="line"><span class="variable">@AuxiliaryGray:</span> <span class="number">#dcdcdc</span>;          <span class="comment">// 常用于分割线</span></span><br><span class="line"><span class="variable">@WhiteGray:</span> <span class="number">#f5f5f5</span>;              <span class="comment">// 页面最底层灰色背景</span></span><br><span class="line"><span class="variable">@borderGray:</span> <span class="number">#ebedf0</span>;             <span class="comment">// border</span></span><br><span class="line"><span class="variable">@Divider:</span> <span class="number">#dcdcdc</span>;</span><br><span class="line"><span class="variable">@backgroundAlert:</span> rgba(<span class="number">255</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">0.2</span>);</span><br><span class="line"><span class="variable">@buttonShadowColor:</span> rgba(<span class="number">255</span>, <span class="number">134</span>, <span class="number">0</span>, <span class="number">0.51</span>);   <span class="comment">// button shadow</span></span><br><span class="line"><span class="variable">@LightGrey:</span> rgba(<span class="number">211</span>, <span class="number">211</span>, <span class="number">211</span>, <span class="number">0.4</span>);          <span class="comment">// 淡灰色, 一般用于按钮等</span></span><br><span class="line"><span class="variable">@border:</span> <span class="number">1px</span> solid <span class="number">#ebedf0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// theme mixin把变量传入</span></span><br><span class="line"><span class="selector-class">.theme</span>(</span><br><span class="line">  <span class="variable">@theme</span>,</span><br><span class="line">  <span class="variable">@theme_to</span>,</span><br><span class="line">  <span class="variable">@Black</span>,</span><br><span class="line">  <span class="variable">@White</span>,</span><br><span class="line">  <span class="variable">@GeneralGray</span>,</span><br><span class="line">  <span class="variable">@DeepGray</span>,</span><br><span class="line">  <span class="variable">@AuxiliaryGray</span>,</span><br><span class="line">  <span class="variable">@WhiteGray</span>,</span><br><span class="line">  <span class="variable">@backgroundAlert</span>,</span><br><span class="line">  <span class="variable">@borderGray</span>,</span><br><span class="line">  <span class="variable">@Divider</span>,</span><br><span class="line">  <span class="variable">@buttonShadowColor</span>,</span><br><span class="line">  <span class="variable">@LightGrey</span>,</span><br><span class="line">  <span class="variable">@linear</span>,</span><br><span class="line">  <span class="variable">@linear_to</span>,</span><br><span class="line">  <span class="variable">@theme_black</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-在less中使用"><a href="#3-在less中使用" class="headerlink" title="3.在less中使用"></a>3.在less中使用</h4><p><code>index.less</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 公共样式</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../common.less&#x27;</span>;</span><br><span class="line"><span class="comment">// 页面样式入口</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../main.less&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// theme_blue、theme_orange是用来切换主题的类名，类名不同应用不同的主题变量</span></span><br><span class="line"><span class="selector-class">.theme_blue</span> &#123;</span><br><span class="line">  <span class="comment">// 引入定义的theme函数和变量</span></span><br><span class="line">  <span class="keyword">@import</span> <span class="string">&#x27;./theme.blue.less&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.theme_orange</span> &#123;</span><br><span class="line">  <span class="keyword">@import</span> <span class="string">&#x27;./theme.orange.less&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可扩展其他主题 ...</span></span><br></pre></td></tr></table></figure><blockquote><p>把有主题变动的元素写在<code>mixin</code>内部，颜色都要使用<code>mixin</code>传进来的变量，这样当主题类名更换了之后，<code>mixin</code>传入的变量值就随之更换，从而更换了主题；</p></blockquote><p><code>main.less</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// mixin调用</span></span><br><span class="line"><span class="selector-class">.theme</span>(</span><br><span class="line">  <span class="variable">@theme</span>,</span><br><span class="line">  <span class="variable">@theme_to</span>,</span><br><span class="line">  <span class="variable">@Black</span>,</span><br><span class="line">  <span class="variable">@White</span>,</span><br><span class="line">  <span class="variable">@GeneralGray</span>,</span><br><span class="line">  <span class="variable">@DeepGray</span>,</span><br><span class="line">  <span class="variable">@AuxiliaryGray</span>,</span><br><span class="line">  <span class="variable">@WhiteGray</span>,</span><br><span class="line">  <span class="variable">@backgroundAlert</span>,</span><br><span class="line">  <span class="variable">@borderGray</span>,</span><br><span class="line">  <span class="variable">@Divider</span>,</span><br><span class="line">  <span class="variable">@buttonShadowColor</span>,</span><br><span class="line">  <span class="variable">@LightGrey</span>,</span><br><span class="line">  <span class="variable">@linear</span>,</span><br><span class="line">  <span class="variable">@linear_to</span>,</span><br><span class="line">  <span class="variable">@theme_black</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.text_width_limit</span>() &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.bgc_Gray</span>() &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">@WhiteGray</span>; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//背景渐变颜色 Gradual change</span></span><br><span class="line">  <span class="selector-class">.theme_linear</span>() &#123;</span><br><span class="line">    <span class="attribute">background</span>: linear-gradient(<span class="number">90deg</span>, <span class="variable">@linear</span> <span class="number">25%</span>, <span class="variable">@linear_to</span> <span class="number">100%</span>) <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.theme_shadow</span>() &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">5px</span> <span class="number">0</span> <span class="variable">@theme</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在这里引入具体的模块的样式文件</span></span><br><span class="line">  <span class="keyword">@import</span> <span class="string">&#x27;./a.less&#x27;</span>;</span><br><span class="line">  <span class="keyword">@import</span> <span class="string">&#x27;./b.less&#x27;</span>;</span><br><span class="line">  <span class="comment">// more ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h3><h4 id="1-效果-1"><a href="#1-效果-1" class="headerlink" title="1.效果"></a>1.效果</h4><blockquote><p>这里使用了React16的<code>context</code>配合做的主题的切换；具体代码可以查看 <a href="https://lldlly.github.io/2020/07/08/reactcreatcontext/">上一篇博客</a>；在这里我们只关注切换代码的css部分如何去实现；</p></blockquote><p><img src="/images/context/1.jpg"><br><img src="/images/context/2.png"><br><img src="/images/context/3.png"></p><h4 id="2-定义变量-1"><a href="#2-定义变量-1" class="headerlink" title="2.定义变量"></a>2.定义变量</h4><p><code>_variable.scss</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="variable">$white</span>: <span class="number">#FFFFFF</span>;</span><br><span class="line"><span class="variable">$grayTheme</span>:<span class="number">#262D33</span>;</span><br><span class="line"><span class="variable">$gray</span>:<span class="number">#b5b5b5</span>;</span><br><span class="line"><span class="variable">$blue</span>:<span class="number">#2173dc</span>;</span><br><span class="line"><span class="variable">$deepBlue</span>:<span class="number">#3f51b5</span>;</span><br><span class="line"><span class="variable">$purple</span>: <span class="number">#673ab7</span>;</span><br><span class="line"><span class="variable">$mask</span>:rgba(<span class="number">55</span>, <span class="number">55</span>, <span class="number">55</span>, .<span class="number">5</span>);</span><br><span class="line"><span class="variable">$defaultFontColor</span>:<span class="number">#515a6e</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主题 [&#x27;theme-gray&#x27;, &quot;theme-blue&quot;, &quot;theme-deepBlue&quot;, &#x27;theme-purple&#x27;]</span></span><br><span class="line"><span class="comment">// 主题定义</span></span><br><span class="line"><span class="variable">$themes</span>:(</span><br><span class="line">    gray:(</span><br><span class="line">        theme: <span class="number">#262D33</span>,</span><br><span class="line">        deep-theme: <span class="number">#131619</span>,</span><br><span class="line">        bg-color: <span class="variable">$white</span>,</span><br><span class="line">        font-color: <span class="number">#b5b5b5</span>,</span><br><span class="line">        deep-font-color: <span class="variable">$defaultFontColor</span>,</span><br><span class="line">        header-font: <span class="number">#515a6e</span>,</span><br><span class="line">        header-bgc: <span class="variable">$white</span>,</span><br><span class="line">        menu-bgc: <span class="number">#262D33</span>,</span><br><span class="line">        menu-hover: <span class="variable">$white</span>,</span><br><span class="line">        menu-hover-bgc: <span class="number">#414d58</span>,</span><br><span class="line">        menu-active: <span class="variable">$white</span>,</span><br><span class="line">        menu-active-bgc: <span class="variable">$blue</span></span><br><span class="line">    ),</span><br><span class="line">    blue:(</span><br><span class="line">        theme: <span class="variable">$blue</span>,</span><br><span class="line">        deep-theme: <span class="variable">$blue</span>,</span><br><span class="line">        bg-color: <span class="variable">$white</span>,</span><br><span class="line">        font-color: <span class="variable">$defaultFontColor</span>,</span><br><span class="line">        deep-font-color: <span class="variable">$defaultFontColor</span>,</span><br><span class="line">        header-font: <span class="variable">$white</span>,</span><br><span class="line">        header-bgc: <span class="variable">$blue</span>,</span><br><span class="line">        menu-bgc: <span class="variable">$white</span>,</span><br><span class="line">        menu-hover: <span class="variable">$blue</span>,</span><br><span class="line">        menu-hover-bgc: <span class="number">#f0faff</span>,</span><br><span class="line">        menu-active: <span class="variable">$white</span>,</span><br><span class="line">        menu-active-bgc: <span class="variable">$blue</span>,</span><br><span class="line">    ),</span><br><span class="line">    deepBlue:(</span><br><span class="line">        theme: <span class="variable">$deepBlue</span>,</span><br><span class="line">        deep-theme: <span class="variable">$deepBlue</span>,</span><br><span class="line">        bg-color: <span class="variable">$white</span>,</span><br><span class="line">        font-color: <span class="variable">$defaultFontColor</span>,</span><br><span class="line">        deep-font-color: <span class="variable">$defaultFontColor</span>,</span><br><span class="line">        header-font: <span class="variable">$white</span>,</span><br><span class="line">        header-bgc: <span class="variable">$deepBlue</span>,</span><br><span class="line">        menu-bgc: <span class="variable">$white</span>,</span><br><span class="line">        menu-hover: <span class="variable">$deepBlue</span>,</span><br><span class="line">        menu-hover-bgc: <span class="number">#f0faff</span>,</span><br><span class="line">        menu-active: <span class="variable">$white</span>,</span><br><span class="line">        menu-active-bgc: <span class="variable">$deepBlue</span>,</span><br><span class="line">    ),</span><br><span class="line">    purple:(</span><br><span class="line">        theme: <span class="variable">$purple</span>,</span><br><span class="line">        deep-theme:<span class="variable">$purple</span>,</span><br><span class="line">        bg-color: <span class="variable">$white</span>,</span><br><span class="line">        font-color: <span class="variable">$defaultFontColor</span>,</span><br><span class="line">        deep-font-color: <span class="variable">$defaultFontColor</span>,</span><br><span class="line">        header-font: <span class="variable">$white</span>,</span><br><span class="line">        header-bgc: <span class="variable">$purple</span>,</span><br><span class="line">        menu-bgc: <span class="variable">$white</span>,</span><br><span class="line">        menu-hover: <span class="variable">$purple</span>,</span><br><span class="line">        menu-hover-bgc: <span class="number">#eee6fb</span>,</span><br><span class="line">        menu-active: <span class="variable">$white</span>,</span><br><span class="line">        menu-active-bgc: <span class="variable">$purple</span>,</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-定义mixin"><a href="#3-定义mixin" class="headerlink" title="3.定义mixin"></a>3.定义mixin</h4><p><code>_theme.scss</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入变量</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./_variable.scss&#x27;</span>;</span><br><span class="line"><span class="comment">// 主题 [&#x27;theme-gray&#x27;, &quot;theme-blue&quot;, &quot;theme-deepBlue&quot;, &#x27;theme-purple&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历主题map 取当前主题下的变量；$theme-map就是对应主题的配置</span></span><br><span class="line"><span class="keyword">@mixin</span> themeify &#123;</span><br><span class="line">    <span class="keyword">@each</span> <span class="variable">$theme-name</span>, <span class="variable">$theme-map</span> in <span class="variable">$themes</span> &#123;</span><br><span class="line">        <span class="comment">// !global 把局部变量强升为全局变量</span></span><br><span class="line">        <span class="variable">$theme-map</span>: <span class="variable">$theme-map</span> !global;</span><br><span class="line">        <span class="comment">// 判断html的data-theme的属性值  #&#123;&#125;是sass的插值表达式</span></span><br><span class="line">        <span class="comment">// &amp; sass嵌套里的父容器标识   @content是混合器插槽，像vue的slot</span></span><br><span class="line">        <span class="selector-attr">[data-theme=&quot;theme-#&#123;$theme-name&#125;&quot;]</span> &amp; &#123;</span><br><span class="line">            <span class="keyword">@content</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个根据Key获取颜色的function</span></span><br><span class="line"><span class="keyword">@function</span> themed(<span class="variable">$key</span>) &#123;</span><br><span class="line">    <span class="comment">// map-get 根据对应的key值返回map中对应的值</span></span><br><span class="line">    <span class="comment">// map-get($map, $key)</span></span><br><span class="line">    <span class="keyword">@return</span> map-get(<span class="variable">$theme-map</span>, <span class="variable">$key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主题背景颜色</span></span><br><span class="line"><span class="keyword">@mixin</span> background_color(<span class="variable">$color</span>) &#123;</span><br><span class="line">    <span class="keyword">@include</span> themeify &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: themed(<span class="variable">$color</span>) <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字体颜色</span></span><br><span class="line"><span class="keyword">@mixin</span> font_color(<span class="variable">$color</span>) &#123;</span><br><span class="line">    <span class="keyword">@include</span> themeify &#123;</span><br><span class="line">        <span class="attribute">color</span>: themed(<span class="variable">$color</span>) <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取边框颜色</span></span><br><span class="line"><span class="keyword">@mixin</span> border_color(<span class="variable">$color</span>) &#123;</span><br><span class="line">    <span class="keyword">@include</span> themeify &#123;</span><br><span class="line">        <span class="attribute">border-color</span>: themed(<span class="variable">$color</span>) <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改svg颜色</span></span><br><span class="line"><span class="keyword">@mixin</span> svg_color(<span class="variable">$color</span>) &#123;</span><br><span class="line">    <span class="keyword">@include</span> themeify &#123;</span><br><span class="line">        fill: themed(<span class="variable">$color</span>) <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-在sass中使用mixin"><a href="#4-在sass中使用mixin" class="headerlink" title="4.在sass中使用mixin"></a>4.在sass中使用mixin</h4><p><code>layout.scss</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入mixin</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./theme/_theme.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1 header &amp; header elements */</span></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    svg&#123;</span><br><span class="line">        <span class="keyword">@include</span> svg_color(<span class="string">&quot;header-font&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@include</span> font_color(<span class="string">&quot;header-font&quot;</span>);</span><br><span class="line">    <span class="keyword">@include</span> background_color(<span class="string">&quot;header-bgc&quot;</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2 menu */</span></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">220px</span>;</span><br><span class="line">    <span class="keyword">@include</span> background_color(<span class="string">&quot;menu-bgc&quot;</span>);</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">transition</span>: width .<span class="number">3s</span> ease;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.logo</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">55px</span>;</span><br><span class="line">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#f5f4f4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.nav-item</span> &#123;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">transition</span>: height .<span class="number">5s</span> ease;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="keyword">@include</span> font_color(<span class="string">&#x27;font-color&#x27;</span>);</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">            <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">            <span class="attribute">text-decoration</span>: none;</span><br><span class="line"></span><br><span class="line">            <span class="selector-tag">i</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">                <span class="attribute">margin-right</span>: <span class="number">12px</span>;</span><br><span class="line">                <span class="keyword">@include</span> font_color(<span class="string">&#x27;font-color&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.2 menu normal */</span></span><br><span class="line"><span class="selector-class">.sidebar_normal</span> &#123;</span><br><span class="line">    <span class="selector-class">.nav-item</span> &#123;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">                <span class="keyword">@include</span> font_color(<span class="string">&#x27;menu-hover&#x27;</span>);</span><br><span class="line">                <span class="keyword">@include</span> background_color(<span class="string">&#x27;menu-bg-hover&#x27;</span>);</span><br><span class="line">                <span class="attribute">border-right</span>: <span class="number">2px</span> solid;</span><br><span class="line">                <span class="keyword">@include</span> border_color(<span class="string">&#x27;theme&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &amp;<span class="selector-class">.active</span> &#123;</span><br><span class="line">                <span class="selector-tag">i</span> &#123;</span><br><span class="line">                    <span class="keyword">@include</span> font_color(<span class="string">&#x27;menu-active&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">@include</span> font_color(<span class="string">&#x27;menu-active&#x27;</span>);</span><br><span class="line">                <span class="keyword">@include</span> background_color(<span class="string">&#x27;menu-active-bgc&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.2 menu mini */</span></span><br><span class="line"><span class="selector-class">.sidebar-mini</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: width .<span class="number">3s</span> ease;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.child-item</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.nav-item</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="keyword">@include</span> font_color(<span class="string">&#x27;deep-font-color&#x27;</span>);</span><br><span class="line">            <span class="selector-tag">i</span> &#123;</span><br><span class="line">                <span class="keyword">@include</span> font_color(<span class="string">&#x27;menu-hover&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">                <span class="keyword">@include</span> font_color(<span class="string">&#x27;menu-hover&#x27;</span>);</span><br><span class="line">                <span class="keyword">@include</span> background_color(<span class="string">&#x27;menu-bg-hover&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &amp;<span class="selector-class">.active</span> &#123;</span><br><span class="line">                <span class="selector-tag">i</span> &#123;</span><br><span class="line">                    <span class="keyword">@include</span> font_color(<span class="string">&#x27;menu-active&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">@include</span> font_color(<span class="string">&#x27;menu-active&#x27;</span>);</span><br><span class="line">                <span class="keyword">@include</span> background_color(<span class="string">&#x27;menu-active-bgc&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="selector-class">.child-item</span> &#123;</span><br><span class="line">                <span class="attribute">display</span>: block;</span><br><span class="line">                <span class="attribute">position</span>: absolute;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">220px</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">@include</span> background_color(<span class="string">&#x27;bg-color&#x27;</span>);</span><br><span class="line">                <span class="attribute">left</span>: <span class="number">68px</span>;</span><br><span class="line">                <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">                <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.fa-angle-down</span> &#123;</span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">2s</span> ease;</span><br><span class="line">        <span class="attribute">transform</span>: rotate(-<span class="number">90deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 换肤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React.createContext( )</title>
      <link href="2020/07/08/reactcreatcontext/"/>
      <url>2020/07/08/reactcreatcontext/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前自己写demo项目的时候用到了React16新出的<code>Context</code>方法，确实是个好东西！避免忘记特此记录。<br>其实官网上对<a href="https://react.docschina.org/docs/context.html#when-to-use-context">Context</a>的讲解已经很详细了，接下来就记录一下我自己对Context的理解和使用；<br>好记性不如烂笔头，我相信这是一个好习惯~</p><h3 id="产生"><a href="#产生" class="headerlink" title="产生"></a>产生</h3><p>react组件之间(父传子)使用<code>props</code>来传递数据，子组件里面通过<code>this.props</code>就能拿到父级传来的值。一旦组件深度嵌套，数据又在顶级父级的身上，最末级组件用这些数据就要传递很多层，而且还有可能这些数据中间组件是完全用不到的。项目复杂度一上来，需要传的数据量也会越来越大，可想而知是多么的繁琐，子组件在调试数据时，找数据的来源也是个麻烦事！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; page 把 user avatarSize 传给PageLayout</span><br><span class="line">&lt;Page user&#x3D;&#123;user&#125; avatarSize&#x3D;&#123;avatarSize&#125; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; PageLayout 再把 user avatarSize 传给NavigationBar</span><br><span class="line">&lt;PageLayout user&#x3D;&#123;user&#125; avatarSize&#x3D;&#123;avatarSize&#125; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; NavigationBar 再传给 内部Avatar组件</span><br><span class="line">&lt;NavigationBar user&#x3D;&#123;user&#125; avatarSize&#x3D;&#123;avatarSize&#125; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Avatar 组件里面才真正使用 user avatarSize ！</span><br><span class="line">&lt;Link href&#x3D;&#123;user.permalink&#125;&gt;</span><br><span class="line">  &lt;Avatar user&#x3D;&#123;user&#125; size&#x3D;&#123;avatarSize&#125; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;Link&gt;</span><br></pre></td></tr></table></figure><p>为了避免这种繁琐的手动传递数据，<code>Context</code>方法应运而生。此处引用官方文档原话：“<code>Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。</code>”。</p><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><p><code>React.createContext</code>创建出一个Context对象，这个对象提供了四个api：</p><ul><li>Context.Provider</li><li>Context.Consumer</li><li>Class.contextType</li><li>Context.displayName</li></ul><h4 id="React-createContext-创建"><a href="#React-createContext-创建" class="headerlink" title="React.createContext 创建"></a>React.createContext 创建</h4><blockquote><p>创建一个上下文的对象<code>Context</code>，包含两个组件：生产者（Provider）消费者（Consumer）; defaultValue可以设置共享的默认数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyContext = React.createContext(defaultValue);</span><br></pre></td></tr></table></figure><h4 id="Context-Provider-生产者"><a href="#Context-Provider-生产者" class="headerlink" title="Context.Provider 生产者"></a>Context.Provider 生产者</h4><blockquote><p>Provider将数据通过value提供给<code>Consumer</code>(消费者);</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyContext.Provider value&#x3D;&#123;&#x2F;* 需要提供给子组件的数据 *&#x2F;&#125;&gt;</span><br><span class="line">     &#123;&#x2F;* 这里放消费组件 *&#x2F;&#125;</span><br><span class="line">&lt;&#x2F;MyContext.Provider&gt;</span><br></pre></td></tr></table></figure><h4 id="Context-Consumer-消费者"><a href="#Context-Consumer-消费者" class="headerlink" title="Context.Consumer 消费者"></a>Context.Consumer 消费者</h4><blockquote><p>用消费者组件包裹子组件，通过函数传参的方式，把共享的数据提供给子组件；value就是共享的数据；</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyContext.Consumer&gt;</span><br><span class="line">    &#123;value &#x3D;&gt; &#x2F;* 子组件*&#x2F;&#125;</span><br><span class="line">&lt;&#x2F;MyContext.Consumer&gt;</span><br></pre></td></tr></table></figure><h4 id="Class-contextType"><a href="#Class-contextType" class="headerlink" title="Class.contextType"></a>Class.contextType</h4><blockquote><p>子组件被消费者包裹后，就可以把 MyContext 通过contextType方法，将数据注入组件进行使用了，而且数据是动态改变的，父级的数据改变会自动通知使用过数据的子组件更新数据；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="built_in">this</span>.context;</span><br><span class="line">    <span class="comment">/* 在组件挂载完成后，使用 MyContext 组件的值来执行一些有副作用的操作 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">componentDidUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="built_in">this</span>.context;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="built_in">this</span>.context;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="built_in">this</span>.context;</span><br><span class="line">    <span class="comment">/* 基于 MyContext 组件的值进行渲染 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">MyClass.contextType = MyContext;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：官方提供了两个在子组件拿到数据的方法；<br>（1）创建MyContext，父级用MyContext.Provider包裹，子组件通过<code>Component.contextType = MyContext</code>注入数据。 但是经过自己实际测试，这样拿到的数据是死了，如果父级把数据改变了是不会通知子组件更新数据的；<br>（2）想要数据更新，需要Provider套Consumer，然后在子组件使用<code>Component.contextType = MyContext</code>才能在组件内部拿到<code>this.context</code>且数据是动态更新的。</p><h4 id="Context-displayName"><a href="#Context-displayName" class="headerlink" title="Context.displayName"></a>Context.displayName</h4><p>这个可以理解为给context 在 React DevTools 中改名字用的，没有什么实际的作用；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyContext = React.createContext(<span class="comment">/* some value */</span>);</span><br><span class="line">MyContext.displayName = <span class="string">&#x27;MyDisplayName&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&lt;MyContext.Provider&gt; <span class="comment">// &quot;MyDisplayName.Provider&quot; 在 DevTools 中</span></span><br><span class="line">&lt;MyContext.Consumer&gt; <span class="comment">// &quot;MyDisplayName.Consumer&quot; 在 DevTools 中</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><ul><li>区别于props一层一层传参，Context可以支持跨层级组件通信；</li><li>Context API的使用基于生产者消费者模式；</li><li>开发时需要考虑可控可复用性，在不破坏组件树依赖关系、影响范围小的情况可以使用Context，影响范围大还是需要借助<code>redux</code>、<code>mobx</code>等工具；</li></ul></blockquote><h3 id="在demo项目中的使用记录"><a href="#在demo项目中的使用记录" class="headerlink" title="在demo项目中的使用记录"></a>在demo项目中的使用记录</h3><p>为了练习<code>ConText</code>， 用来做了项目的换肤功能，配色有点丑(毕竟不是专业UI😅)，咱暂且就看功能点，先看一下效果：<br><img src="/images/context/1.jpg"><br><img src="/images/context/2.png"><br><img src="/images/context/3.png"></p><h4 id="theme-context-tsx（Create）"><a href="#theme-context-tsx（Create）" class="headerlink" title="theme.context.tsx（Create）"></a>theme.context.tsx（Create）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  ThemeContext 为 Context对象，theme-gray是defaultValue用来共享的默认数据</span><br><span class="line">export const ThemeContext &#x3D; React.createContext(&#39;theme-gray&#39;);</span><br></pre></td></tr></table></figure><p><code>ThemeContext.Provider</code> 把Layout组件包裹起来，把需要共享的数据通过<code>value</code>属性提供进Layout组件中；</p><h4 id="theme-tsx-Provider"><a href="#theme-tsx-Provider" class="headerlink" title="theme.tsx (Provider)"></a>theme.tsx (Provider)</h4><p>项目使用了<code>mobx</code>，数据存在store中；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line">import &#123; inject, observer &#125; from &quot;mobx-react&quot;;</span><br><span class="line">import &#123; withRouter &#125; from &quot;react-router&quot;;</span><br><span class="line">import &#123; ThemeContext &#125; from &#39;.&#x2F;theme.context&#39;;</span><br><span class="line">import Layout from &#39;..&#x2F;layout&#39;;</span><br><span class="line"></span><br><span class="line">@inject(&#39;LayoutStore&#39;)</span><br><span class="line">@observer</span><br><span class="line">class Theme extends React.PureComponent&lt;IProps, any&gt; &#123;</span><br><span class="line">    readonly store: any &#x3D; null;</span><br><span class="line"></span><br><span class="line">    constructor(props: any) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.store &#x3D; this.props.LayoutStore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        &#x2F;&#x2F; currentTheme 为主题名</span><br><span class="line">        const &#123; currentTheme &#125; &#x3D; this.store;</span><br><span class="line">        return (</span><br><span class="line">            &lt;ThemeContext.Provider value&#x3D;&#123;currentTheme&#125;&gt;</span><br><span class="line">                &lt;Layout &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;ThemeContext.Provider&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default withRouter(Theme);</span><br></pre></td></tr></table></figure><h4 id="layout-tsx-Consumer"><a href="#layout-tsx-Consumer" class="headerlink" title="layout.tsx (Consumer)"></a>layout.tsx (Consumer)</h4><p>Layout组件里调用<code>Consumer</code>来使用context中共享的数据；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ThemeContext &#125; from &#39;.&#x2F;theme&#x2F;theme.context&#39;;</span><br><span class="line"></span><br><span class="line">class Layout extends React.Component&lt;any, any&gt;&#123;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;ThemeContext.Consumer&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    theme &#x3D;&gt; (</span><br><span class="line">                        &lt;div className&#x3D;&#123;theme&#125;&gt;</span><br><span class="line">                            &#123;()&#x3D;&gt; console.log(theme) &#x2F;* 主题名 *&#x2F;&#125;  </span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;&#x2F;ThemeContext.Consumer&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Context </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reduce 与 reduceRight 与 compose</title>
      <link href="2020/07/07/compose/"/>
      <url>2020/07/07/compose/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>reduce这个方法真的已经学习过很多次了，学了之后也很少用，又不记得了~ :joy:再来复习一遍。</p></blockquote><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>arr.reduce(fn)的返回值是处理的结果；<br>reduce 函数接收4个参数:</p><ul><li>Accumulator (acc) (累计器) </li><li>Current Value (cur) (当前值)</li><li>Current Index (idx) (当前索引)</li><li>Source Array (src) (源数组)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对数据进行累加</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>acc 累计的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>item 数组的每一项数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">acc, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> acc + item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = arr.reduce(fn);      <span class="comment">// 运行过程 1 + 2 + 3 + 4 + 5 + 6</span></span><br><span class="line"><span class="keyword">let</span> result_1 = arr.reduce(fn, <span class="number">0</span>); <span class="comment">// 运行过程 0 + 1 + 2 + 3 + 4 + 5 + 6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);   <span class="comment">// 21</span></span><br><span class="line"><span class="built_in">console</span>.log(result_1); <span class="comment">// 21</span></span><br></pre></td></tr></table></figure><h3 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h3><p><code>reduceRight</code>方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>, <span class="number">2</span>],[<span class="number">3</span>, <span class="number">4</span>],[<span class="number">5</span>, <span class="number">6</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">acc, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> acc.concat(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = arr.reduce(fn); </span><br><span class="line"><span class="keyword">let</span> result_1 = arr.reduceRight(fn); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);         <span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(result_1);       <span class="comment">// [ 5, 6, 3, 4, 1, 2 ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h3><p>返回值是一个函数, 入参也是函数, 执行的结果作为下一个执行函数的入参.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">initArg</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> args.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">init, current</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> current(init);</span><br><span class="line">        &#125;,initArg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 使用例子</span></span><br><span class="line"><span class="keyword">const</span> g = <span class="function">(<span class="params">y</span>) =&gt;</span> y + <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function">(<span class="params">x</span>) =&gt;</span> <span class="number">2</span> * x</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> w = compose(g, f);</span><br><span class="line"><span class="built_in">console</span>.log(w(<span class="number">1</span>)) <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(w(<span class="number">2</span>)) <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(w(<span class="number">3</span>)) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>create-react-app 创建项目更改webpack配置</title>
      <link href="2020/07/07/react/"/>
      <url>2020/07/07/react/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用<code>create-react-app</code>创建的项目<code>webpack</code>配置文件是隐藏起来的，如果想要把配置暴露出来更改，需要运行 <code>npm run eject </code>命令。<br>不过这种方法有两个缺点：</p><ul><li>npm run eject命名不可逆，一旦配置文件暴露后就不可再隐藏；</li><li>扩展的配置和create-react-app内建的webpack配置混合在了一起，不利于配置出现问题后的排查。</li></ul><h3 id="react-app-rewired介绍"><a href="#react-app-rewired介绍" class="headerlink" title="react-app-rewired介绍"></a>react-app-rewired介绍</h3><p> 使用<a href="https://github.com/timarney/react-app-rewired/blob/HEAD/README_zh.md">react-app-rewired</a>这个npm包可以让我们在不改<code>create-react-app</code>本身的配置基础上去扩展配置，是个非常nice的工具。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h5 id="1）安装"><a href="#1）安装" class="headerlink" title="1）安装"></a>1）安装</h5><p>npm安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-app-rewired --save-dev</span><br></pre></td></tr></table></figure><p>yarn安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-app-rewired --dev</span><br></pre></td></tr></table></figure><h5 id="2）在根目录中创建一个-config-overrides-js-文件"><a href="#2）在根目录中创建一个-config-overrides-js-文件" class="headerlink" title="2）在根目录中创建一个 config-overrides.js 文件"></a>2）在<code>根目录</code>中创建一个 <code>config-overrides.js</code> 文件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* config-overrides.js */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">override</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//do stuff with the webpack config...</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-修改-package-json-里的启动配置"><a href="#3-修改-package-json-里的启动配置" class="headerlink" title="3) 修改 package.json 里的启动配置"></a>3) 修改 package.json 里的启动配置</h5><blockquote><p>注意：不用替换 eject 部分。工具中没有针对 eject 的配置替换，执行了 eject 命令会让工具失去作用。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/* package.json */</span></span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">-   &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class="line">+   &quot;start&quot;: &quot;react-app-rewired start&quot;,</span><br><span class="line">-   &quot;build&quot;: &quot;react-scripts build&quot;,</span><br><span class="line">+   &quot;build&quot;: &quot;react-app-rewired build&quot;,</span><br><span class="line">-   &quot;test&quot;: &quot;react-scripts test --env=jsdom&quot;,</span><br><span class="line">+   &quot;test&quot;: &quot;react-app-rewired test --env=jsdom&quot;,</span><br><span class="line">    &quot;eject&quot;: &quot;react-scripts eject&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-配置config-overrides-js"><a href="#4-配置config-overrides-js" class="headerlink" title="4) 配置config-overrides.js"></a>4) 配置config-overrides.js</h5><ul><li>启用ES7的修改器语法（babel 7）</li><li>配置别名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel/plugin-proposal-decorators    //修饰器</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; injectBabelPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;react-app-rewired&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span> (<span class="params">dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> path.join(__dirname, <span class="string">&#x27;.&#x27;</span>, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">override</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do stuff with the webpack config...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//启用ES7的修改器语法（babel 7） &#123; &quot;legacy&quot;: true &#125;一定不能掉，否则报错</span></span><br><span class="line">    config = injectBabelPlugin([<span class="string">&#x27;@babel/plugin-proposal-decorators&#x27;</span>, &#123; <span class="string">&quot;legacy&quot;</span>: <span class="literal">true</span> &#125;], config) </span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置别名</span></span><br><span class="line">    config.resolve.alias = &#123;</span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>: resolve(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn run start </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react-app-rewired </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表（学习记录）</title>
      <link href="2020/06/30/ListNode/"/>
      <url>2020/06/30/ListNode/</url>
      
        <content type="html"><![CDATA[<h3 id="链表是什么"><a href="#链表是什么" class="headerlink" title="链表是什么"></a>链表是什么</h3><ol><li>链表和数组相似，都是有序的列表，都是线性结构。</li><li>不同的是，数组在内存中是一段<code>连续的内存空间</code>，由此遍历数组是可以通过下标直接定位元素的，而链表是<code>离散</code>的内存，可能散播在内存的各个角落，所以链表之间需要通过一个<code>关联</code>把前后节点连接起来，就像用线串珠子一样，需要把珠子一个一个的串起来；</li><li>在链表中一个元素称为<code>结点</code>，结点中包括<code>数据域</code>(珠子)和<code>指针域</code>（线）；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 数据域</span></span><br><span class="line">    val: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 指针域，指向下一个结点</span></span><br><span class="line">    next: &#123;</span><br><span class="line">        val:<span class="number">2</span>,</span><br><span class="line">        next: ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p><code>数据域</code>存着这个结点的数据值，而<code>指针域</code>则代表着下一个结点的引用，这样就知道下一个结点是谁啦！</p><h3 id="创建链表"><a href="#创建链表" class="headerlink" title="创建链表"></a>创建链表</h3><p>创建链表需要借助一个构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.val = val;   <span class="comment">// 数据域</span></span><br><span class="line">    <span class="built_in">this</span>.next = <span class="literal">null</span>; <span class="comment">// 指针域</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> node = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">node.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>通过ListNode去创建结点，入参<code>val</code>为<code>数据域</code>,<code>next</code>为<code>指针域</code>；<br><img src="/images/listNode/1_2.png"><br>想要访问链表中的任意一个数据，都需要从起始结点开始，逐个访问next到目标结点为止。为了保证起始结点可访问性，我们一般会创建一个头结点指向起始结点;<br><img src="/images/listNode/1.png"></p><h3 id="链表添加、删除"><a href="#链表添加、删除" class="headerlink" title="链表添加、删除"></a>链表添加、删除</h3><p>链表的添加和删除主要是对指针域next的操作。</p><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><h5 id="尾部添加"><a href="#尾部添加" class="headerlink" title="尾部添加"></a>尾部添加</h5><p> 在尾部添加结点相对简单，只需要吧尾部结点的next指向要添加的结点就行；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node1 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> node2 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> node3 = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将node2添加在node1后面</span></span><br><span class="line">node1.next = node2;</span><br><span class="line"><span class="comment">// 将node3添加在node2后面</span></span><br><span class="line">node2.next = node3;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(node1);  <span class="comment">//  &#123; val: 1, next: &#123; val: 2, next: &#123; val: 3, next: null &#125; &#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="任意两节点中添加"><a href="#任意两节点中添加" class="headerlink" title="任意两节点中添加"></a>任意两节点中添加</h5><p> 在node1和node2中间插入node3；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> node1 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> node2 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> node3 = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">node1.next = node2;  </span><br><span class="line"><span class="built_in">console</span>.log(node1)  <span class="comment">// &#123;val: 1, next: &#123; val: 2, next: null&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间插入node3</span></span><br><span class="line">node3.next = node1.next;</span><br><span class="line">node1.next = node3;</span><br><span class="line"><span class="built_in">console</span>.log(node1) <span class="comment">//  &#123; val: 1, next: &#123; val: 3, next: &#123; val: 2, next: null &#125; &#125;&#125;</span></span><br><span class="line">     </span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> node1 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> node2 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> node3 = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将node2添加在node1后面</span></span><br><span class="line">node1.next = node2;</span><br><span class="line"><span class="comment">// 将node3添加在node2后面</span></span><br><span class="line">node2.next = node3;</span><br><span class="line"><span class="built_in">console</span>.log(node1); <span class="comment">// &#123; val: 1, next: &#123; val: 2, next: &#123; val: 3, next: null &#125; &#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除node2</span></span><br><span class="line">node1.next = node2.next;</span><br><span class="line"><span class="built_in">console</span>.log(node1); <span class="comment">// &#123; val: 1, next: &#123; val: 3, next: null &#125; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除的node2就变成了一个完全不能到达的结点，这里它就会被垃圾回收机制回收。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>includes与indexOf</title>
      <link href="2020/06/22/includes/"/>
      <url>2020/06/22/includes/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>includes</code>和<code>indexOf</code>都是用来检测数组或者字符串中是否包含某元素的方法，includes是ES6的。</p></blockquote><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><ol><li>indexOf 这个方法对大小写敏感，不能是indexof；</li><li>入参有两个：要查找的<code>元素</code>、开始查找的<code>下标</code>(可以不传)；</li><li>查找的元素存在，返回<code>第一个</code>满足条件的索引，后面的就不会管了；</li><li>查找的元素不存在，返回 <code>-1</code>;</li><li>特殊点：对数组中查询 <code>NaN</code> 是无效的；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> arrRes = arr.indexOf(<span class="string">&#x27;ab&#x27;</span>, <span class="number">0</span>);     <span class="comment">// 从下标0开始查找，是否含有&#x27;as&#x27;,有则返回找到第一个匹配元素的索引</span></span><br><span class="line"><span class="keyword">let</span> arrRes1 = arr.indexOf(<span class="string">&#x27;lala&#x27;</span>, <span class="number">0</span>);  <span class="comment">// 从下标0开始查找，是否含有&#x27;lala&#x27;，没有返回 -1</span></span><br><span class="line"><span class="built_in">console</span>.log(arrRes, arrRes1);          <span class="comment">// 1  -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abcdefghi&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> strRes = str.indexOf(<span class="string">&#x27;b&#x27;</span>, <span class="number">0</span>);     <span class="comment">// 从下标0开始查找，是否含有&#x27;b&#x27;,有则返回找到第一个匹配元素的索引</span></span><br><span class="line"><span class="keyword">let</span> strRes1 = str.indexOf(<span class="string">&#x27;a&#x27;</span>, <span class="number">3</span>);    <span class="comment">// 从下标3开始查找，是否含有&#x27;a&#x27;，没有返回 -1</span></span><br><span class="line"><span class="built_in">console</span>.log(strRes, strRes1);         <span class="comment">// 1  -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> special = [<span class="literal">undefined</span>, <span class="literal">null</span>, <span class="literal">NaN</span>, <span class="string">&#x27;NaN&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(special.indexOf(<span class="literal">undefined</span>));    <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(special.indexOf(<span class="literal">null</span>));         <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(special.indexOf(<span class="literal">NaN</span>));          <span class="comment">// -1 查不到</span></span><br><span class="line"><span class="built_in">console</span>.log(special.indexOf(<span class="string">`NaN`</span>));        <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><ol><li>入参、用法方面和indexOf是一样的；</li><li>查找的元素存在，返回 true;</li><li>查找的元素不存在，返回 false;</li><li>解决了indexOf查<code>NaN</code>无效的问题；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> arrRes = arr.includes(<span class="string">&#x27;ab&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">let</span> arrRes1 = arr.includes(<span class="string">&#x27;lala&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arrRes, arrRes1); <span class="comment">// true false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abcdefghi&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> strRes = str.includes(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> strRes1 = str.includes(<span class="string">&#x27;a&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(strRes, strRes1); <span class="comment">// true false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> special = [<span class="literal">undefined</span>, <span class="literal">null</span>, <span class="literal">NaN</span>];</span><br><span class="line"><span class="built_in">console</span>.log(special.includes(<span class="literal">undefined</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(special.includes(<span class="literal">null</span>));      <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(special.includes(<span class="literal">NaN</span>));       <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p>为了让程序执行时间数据更容易区分，准备了一个长度1000000位的数组，分别使用<code>indexOf</code>和<code>includes</code>去查询，看看他们各自使用的时间：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成随机字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomString</span>(<span class="params">len</span>) </span>&#123;</span><br><span class="line">    len = len || <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">let</span> $chars = <span class="string">&#x27;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678&#x27;</span>; <span class="comment">/****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/</span></span><br><span class="line">    <span class="keyword">let</span> maxPos = $chars.length;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        res += $chars.charAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * maxPos));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组装一个长度1000000位的数组</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">    arr.push(randomString(<span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line">arr.push(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&#x27;indexOf耗时&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;索引：&#x27;</span>, arr.indexOf(<span class="string">&#x27;test&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">&#x27;indexOf耗时&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&#x27;includes耗时&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;是否存在：&#x27;</span>, arr.includes(<span class="string">&#x27;test&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">&#x27;includes耗时&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了提高数据的准确性，运行了很多次，打印结果罗列在下方，根据数据可以明显的看出<code>includes</code>性能优于<code>indexOf</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">索引： 1000000</span><br><span class="line">indexOf耗时: 13.363ms</span><br><span class="line">是否存在： true</span><br><span class="line">includes耗时: 8.925ms</span><br><span class="line"></span><br><span class="line">索引： 1000000</span><br><span class="line">indexOf耗时: 13.729ms</span><br><span class="line">是否存在： true</span><br><span class="line">includes耗时: 14.973ms</span><br><span class="line"></span><br><span class="line">索引： 1000000</span><br><span class="line">indexOf耗时: 12.111ms</span><br><span class="line">是否存在： true</span><br><span class="line">includes耗时: 9.591ms</span><br><span class="line"></span><br><span class="line">索引： 1000000</span><br><span class="line">indexOf耗时: 13.745ms</span><br><span class="line">是否存在： true</span><br><span class="line">includes耗时: 10.403ms</span><br><span class="line"></span><br><span class="line">索引： 1000000</span><br><span class="line">indexOf耗时: 11.771ms</span><br><span class="line">是否存在： true</span><br><span class="line">includes耗时: 8.912ms</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> 在必须要知道元素的索引情况下，只能用<code>indexOf</code>，其他情况都可以用includes代替。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文字符串(学习笔记)</title>
      <link href="2020/06/17/string/"/>
      <url>2020/06/17/string/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>回文字符串，就是正着读和倒着读都一样的字符串，比如说这样：<code>&#39;abccba&#39;</code>，回文字符串还有一个特性，单个字符串肯定回文，也就是说<code>&#39;aba&#39;</code>也是回文字符串；</p><p>根据这个定义，我们不难写出判断回文字符串的代码： :smiley:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 先反转字符串</span></span><br><span class="line">    <span class="keyword">const</span> reversedStr = str.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="comment">// 判断反转前后是否相等</span></span><br><span class="line">    <span class="keyword">return</span> reversedStr === str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以从回文字符串的<code>对称性</code>考虑（记住这个<code>对称性</code>，很重要）还可以这样写:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!str) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> len = str.length;</span><br><span class="line">    <span class="keyword">let</span> k = len - <span class="number">1</span>;    <span class="comment">// 指针</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= k &amp;&amp; str[i] !== str[k]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        k--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高频题"><a href="#高频题" class="headerlink" title="高频题"></a>高频题</h3><h4 id="1-给定一个非空字符串-s，最多删除一个字符。判断是否能成为回文字符串。"><a href="#1-给定一个非空字符串-s，最多删除一个字符。判断是否能成为回文字符串。" class="headerlink" title="1.给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。"></a>1.给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。</h4><blockquote><p>一般看到回文字符串就要想起他的<code>对称性</code>，<code>对称性</code>要对应的想到<code>双指针</code>。</p></blockquote><p>思路：</p><ol><li>通过左右指针所指的元素是否相等来判断是否回文；</li><li>如果不等，分别左右指针先后跳过一位，对比是否相等；</li><li>如果还不等，那不满足回文字符串对称性，肯定就不是了；</li><li>如果相等，继续进行指针对比，如果接下来都对称了，且跳过次数不大于1则满足<code>最多删除一个字符，能成为回文字符串</code>；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!str) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> len = str.length;</span><br><span class="line">    <span class="comment">// j，k左右指针、count 记录跳过的次数、 flag是否回文</span></span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span>,</span><br><span class="line">        k = len - <span class="number">1</span>,</span><br><span class="line">        count = <span class="number">0</span>,</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j &gt; k) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (str[j] === str[k]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">            k--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[j + <span class="number">1</span>] === str[k]) &#123;</span><br><span class="line">            <span class="comment">// 左指针跳过一个</span></span><br><span class="line">            j = j + <span class="number">2</span>;</span><br><span class="line">            k--;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[j] === str[k - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="comment">// 右指针跳过一个</span></span><br><span class="line">            k = k - <span class="number">2</span>;</span><br><span class="line">            j++;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 非回文字符串,直接跳出循环</span></span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(validPalindrome(<span class="string">&#x27;abcdefgfedcba&#x27;</span>));     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(validPalindrome(<span class="string">&#x27;a1bcdefgfedcba&#x27;</span>));    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(validPalindrome(<span class="string">&#x27;a1bcdefgfe2dcba~&#x27;</span>));  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>性能优化：<br>在上面思路的第4条，如果有一次不等进行了跳过，就已经达到<code>最多删除一个字符</code>条件上限了，直接把还未对比的字符串当成一个整字符串判断是否是回文就行，如果回文则可以满足条件，不回文则不满足，没必要再做多余的循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validPalindrome</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 缓存字符串的长度</span></span><br><span class="line">    <span class="keyword">const</span> len = s.length</span><br><span class="line"></span><br><span class="line">    <span class="comment">// i、j分别为左右指针</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>,</span><br><span class="line">        j = len - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当左右指针均满足对称时，一起向中间前进</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; s[i] === s[j]) &#123;</span><br><span class="line">        i++</span><br><span class="line">        j--</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试判断跳过左指针元素后字符串是否回文</span></span><br><span class="line">    <span class="keyword">if</span> (isPalindrome(i + <span class="number">1</span>, j)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尝试判断跳过右指针元素后字符串是否回文</span></span><br><span class="line">    <span class="keyword">if</span> (isPalindrome(i, j - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工具方法，用于判断字符串是否回文</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">st, ed</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (st &lt; ed) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[st] !== s[ed]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            st++</span><br><span class="line">            ed--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认返回 false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(validPalindrome(<span class="string">&#x27;abcdefgfedcba&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(validPalindrome(<span class="string">&#x27;a1bcdefgfedcba&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(validPalindrome(<span class="string">&#x27;a1bcdefgfe2dcba~&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-字符串匹配问题"><a href="#2-字符串匹配问题" class="headerlink" title="2.字符串匹配问题"></a>2.字符串匹配问题</h4><p>设计一个支持以下两种操作的数据结构：</p><blockquote><p>void addWord(word)<br> bool search(word)<br> search(word) 可以搜索文字或正则表达式字符串，字符串只包含字母 . 或 a-z 。<br>. 可以表示任何一个字母。</p></blockquote><blockquote><p>示例: addWord(“bad”)<br>addWord(“dad”)<br>addWord(“mad”)<br>search(“pad”) -&gt; false<br>search(“bad”) -&gt; true<br>search(“.ad”) -&gt; true<br>search(“b..”) -&gt; true<br>说明:<br>你可以假设所有单词都是由小写字母 a-z 组成的。</p></blockquote><p>思路：</p><ol><li>要求既能添加，还能对添加的数据进行搜索，那肯定是要把添加的数组存起来，且最好是键值对存储，减少检索成本，这里我们使用Map;</li><li>这里为了降低查找时的复杂度，我们可以考虑以字符串的长度为 key，相同长度的字符串存在一个数组中，这样可以提高我们后续定位的效率。</li><li>还有一点是，search方法，既能完全匹配，还要能正则匹配，所以入参需要判断是普通字符串还是正则表达式；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WordDictionary</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.words = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">WordDictionary.prototype.addWord = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!str) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> len = str.length;</span><br><span class="line">    <span class="keyword">let</span> val = <span class="built_in">this</span>.words.get(len);</span><br><span class="line">    <span class="keyword">if</span> (val) &#123;</span><br><span class="line">        val.push(str);</span><br><span class="line">        <span class="built_in">this</span>.words.set(len, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.words.set(len, [str]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">WordDictionary.prototype.search = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!str) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入的字符串的长度找不到记录，则查询的字符串不存在</span></span><br><span class="line">    <span class="keyword">let</span> len = str.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.words.get(len)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> val = <span class="built_in">this</span>.words.get(len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断传入的是字符串还是正则</span></span><br><span class="line">    <span class="keyword">if</span> (!str.includes(<span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> val.includes(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正则</span></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(str);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只要有一项满足就为true,</span></span><br><span class="line">    <span class="comment">// some方法，有一项满足条件的返回为true， </span></span><br><span class="line">    <span class="comment">// every方法，每一项都要满足条件才返回true</span></span><br><span class="line">    <span class="keyword">return</span> val.some(<span class="function"><span class="params">item</span> =&gt;</span> reg.test(item));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Words = <span class="keyword">new</span> WordDictionary();</span><br><span class="line"></span><br><span class="line">Words.addWord(<span class="string">&#x27;dad&#x27;</span>);</span><br><span class="line">Words.addWord(<span class="string">&#x27;lala&#x27;</span>);</span><br><span class="line">Words.addWord(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Words.words);           <span class="comment">// Map &#123; 3 =&gt; [ &#x27;dad&#x27;, &#x27;abc&#x27; ], 4 =&gt; [ &#x27;lala&#x27; ] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Words.search(<span class="string">&#x27;l...&#x27;</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Words.search(<span class="string">&#x27;dad&#x27;</span>));   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Words.search(<span class="string">&#x27;a..&#x27;</span>));   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Words.search(<span class="string">&#x27;l&#x27;</span>));     <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针法（学习笔记）</title>
      <link href="2020/06/15/complexity/"/>
      <url>2020/06/15/complexity/</url>
      
        <content type="html"><![CDATA[<h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p>双指针法常用于<code>求和</code>和<code>排序</code>之类的场景,是一种时间换空间的算法。<br>学习算法只看理论知识是远远不够的，需要从各种各样的题中去细细体悟算法的魅力，从而真真的把知识刻在脑子里，成为自己的一部分；<br>所以此篇文章基本都是算法题，让我们从实际的代码角度来揭开双指针的神秘面纱吧！<br>下面的题都是从某一方面的知识写的例子，大家如果有其他想法，代码敲起来~</p><h4 id="1-给定一个整数数组-nums-和一个目标值-target，请你在该数组中找出和为目标值的那-两个整数，并返回他们的数组下标。"><a href="#1-给定一个整数数组-nums-和一个目标值-target，请你在该数组中找出和为目标值的那-两个整数，并返回他们的数组下标。" class="headerlink" title="1. 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个整数，并返回他们的数组下标。"></a>1. 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个整数，并返回他们的数组下标。</h4><blockquote><p>这道题没有用到双指针，单纯的用来练练手，从第二题开始为双指针算法题；<br>示例: 给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]</p></blockquote><p> <code>求和</code>问题基本可以反向思考为 <code>差值</code>问题，比如说<code>a + b = target</code>,则可以想成<code>target - a = b</code>, 这样就能避免对数组进行两次循环，再对循环的值相加；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span> (<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里我用对象来模拟 map 的能力</span></span><br><span class="line">    <span class="keyword">const</span> diffs = &#123;&#125;</span><br><span class="line">    <span class="comment">// 缓存数组长度</span></span><br><span class="line">    <span class="keyword">const</span> len = nums.length</span><br><span class="line">    <span class="comment">// 遍历数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">// 判断当前值对应的 target 差值是否存在（是否已遍历过）</span></span><br><span class="line">        <span class="keyword">if</span> (diffs[target - nums[i]] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="comment">// 若有对应差值，那么答案get！</span></span><br><span class="line">            <span class="keyword">return</span> [diffs[target - nums[i]], i]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若没有对应差值，则记录当前值</span></span><br><span class="line">        diffs[nums[i]] = i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = demo(nums, <span class="number">16</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [ 6, 8 ]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存数组长度</span></span><br><span class="line">    <span class="keyword">const</span> len = nums.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> num = target - nums[i];</span><br><span class="line">        <span class="keyword">let</span> index = nums.indexOf(num);</span><br><span class="line">        <span class="keyword">if</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [i, index];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result2 = demo(nums, <span class="number">16</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result2);  <span class="comment">// [ 5, 9 ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-给你两个有序整数数组-nums1-和-nums2，请你将-nums2-合并到-nums1-中，使-nums1-成为一个有序数组。"><a href="#2-给你两个有序整数数组-nums1-和-nums2，请你将-nums2-合并到-nums1-中，使-nums1-成为一个有序数组。" class="headerlink" title="2. 给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。"></a>2. 给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。</h4><blockquote><p>说明: 初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。 你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">m</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化两个指针的指向，初始化 nums1 尾部索引k</span></span><br><span class="line">    <span class="keyword">let</span> i = m - <span class="number">1</span>, j = n - <span class="number">1</span>, k = m + n - <span class="number">1</span></span><br><span class="line">    <span class="comment">// 当两个数组都没遍历完时，指针同步移动</span></span><br><span class="line">    <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 取较大的值，从末尾往前填补</span></span><br><span class="line">        <span class="keyword">if</span>(nums1[i] &gt;= nums2[j]) &#123;</span><br><span class="line">            nums1[k] = nums1[i] </span><br><span class="line">            i-- </span><br><span class="line">            k--</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums1[k] = nums2[j] </span><br><span class="line">            j-- </span><br><span class="line">            k--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// nums2 留下的情况，特殊处理一下 </span></span><br><span class="line">    <span class="keyword">while</span>(j&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">        nums1[k] = nums2[j]  </span><br><span class="line">        k-- </span><br><span class="line">        j--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>投机写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    nums1.splice(m);</span><br><span class="line">    nums2.splice(n);</span><br><span class="line">    <span class="keyword">return</span> [...nums1, ...nums2].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-给定一个数组-nums，编写一个函数将所有-0-移动到数组的末尾，同时保持非零元素的相对顺序。"><a href="#3-给定一个数组-nums，编写一个函数将所有-0-移动到数组的末尾，同时保持非零元素的相对顺序。" class="headerlink" title="3. 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。"></a>3. 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</h4><blockquote><p>输入: [ 0, 1, 0, 3, 12 ], 输出: [ 1, 3, 12, 0, 0 ], 只能在当前数组上操作，不能使用新建数组、合并等方法；</p></blockquote><p>常规方案：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> num = arr.length;</span><br><span class="line">    <span class="keyword">if</span>(!num) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= num; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] === <span class="number">0</span>) &#123;</span><br><span class="line">            arr.splice(i, <span class="number">1</span>);</span><br><span class="line">            arr.push(<span class="number">0</span>);</span><br><span class="line">            i--;    <span class="comment">// 当前项删除后，下一个元素的下标前移了一位，所以要遍历到下一个元素，就需要保持原位</span></span><br><span class="line">            num--;  <span class="comment">// 删除了一位，数组需要的循环次数就应该减去一位，移到最后的0是不需要遍历的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">demo(arr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1,3,12,0,0]</span></span><br></pre></td></tr></table></figure><p>双指针方案：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> n = nums.length;</span><br><span class="line">    <span class="keyword">if</span> (!n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 把非零的项依次移到前面，i为指针</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[j] !== <span class="number">0</span>) &#123;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// k为指针2，指向非零项处理后第一个为0的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k = i; k &lt; n; k++) &#123;</span><br><span class="line">        nums[k] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(demo(arr)); <span class="comment">// [ 1, 3, 12, 0, 0 ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-给你一个包含-n-个整数的数组-nums，判断-nums-中是否存在三个元素-a，b，c-，使得-a-b-c-0-？请你找出所有满足条件且不重复的三元组。"><a href="#4-给你一个包含-n-个整数的数组-nums，判断-nums-中是否存在三个元素-a，b，c-，使得-a-b-c-0-？请你找出所有满足条件且不重复的三元组。" class="headerlink" title="4. 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。"></a>4. 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。</h4><blockquote><p>示例：给定数组 nums = [-1, 0, 1, 2, -1, -4]， 满足要求的三元组集合为： [ [-1, 0, 1], [-1, -1, 2] ]<br> 注意：答案中不可以包含重复的三元组。</p></blockquote><blockquote><p>解析:<br>1.在<code>数组</code>和<code>求和</code>的算法中，我们要习惯性在脑子里显现<code>求和就是求差值</code>、 <code>指针</code> 这两思路！<br>2.尽量从求差值的角度去减少循环次数，从而降低时间复杂度；<br>3.指针要求数组是可序的，所以当数组是无序时，要将数组排序，创造可以使用指针的条件；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对撞指针</span></span><br><span class="line"><span class="keyword">let</span> nums = [-<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">2</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span> - <span class="number">2</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 满足数组中三个数相加等于 m 的数组对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> </span>arr 目标数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>m  三个数相加的和</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;array[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">arr, m</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!arr || !arr.length) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 保存目标数组</span></span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="comment">// 双指针法需要数组有序，有序才好指针移动</span></span><br><span class="line">    arr = arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(arr);  // [-3, -2, -1, -1, -1,  0,  1,  2,  3]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> len = arr.length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">// 对撞指针</span></span><br><span class="line">        <span class="keyword">let</span> j = i + <span class="number">1</span>; <span class="comment">// 指针1</span></span><br><span class="line">        <span class="keyword">let</span> k = len - <span class="number">1</span>; <span class="comment">// 尾指针</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理重复</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] === arr[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((arr[i] + arr[j] + arr[k]) &gt; m) &#123;</span><br><span class="line">                <span class="comment">// 则尾指针向前移动</span></span><br><span class="line">                k--;</span><br><span class="line">                <span class="comment">// 尾指针如果重复则跳过</span></span><br><span class="line">                <span class="keyword">if</span> (arr[k] === arr[k + <span class="number">1</span>]) &#123;</span><br><span class="line">                    k--;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((arr[i] + arr[j] + arr[k]) &lt; m) &#123;</span><br><span class="line">                <span class="comment">// 前指针向后移动一位</span></span><br><span class="line">                j++;</span><br><span class="line">                <span class="comment">// 前指针如果重复则跳过</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j] === arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((arr[i] + arr[j] + arr[k]) === m) &#123;</span><br><span class="line">                result.push([arr[i], arr[j], arr[k]]);</span><br><span class="line">                <span class="comment">// 两指针一同前进</span></span><br><span class="line">                k--;</span><br><span class="line">                j++;</span><br><span class="line">                <span class="comment">// 重复值跳过，是一种优化，让代码少干点没有意义的活</span></span><br><span class="line">                <span class="keyword">if</span> (arr[k] === arr[k + <span class="number">1</span>]) &#123;</span><br><span class="line">                    k--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] === arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(demo(nums, m));</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树遍历(学习笔记)</title>
      <link href="2020/06/10/binaryTree/"/>
      <url>2020/06/10/binaryTree/</url>
      
        <content type="html"><![CDATA[<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root = &#123;</span><br><span class="line">  val: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">  left: &#123;</span><br><span class="line">    val: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">    left: &#123;</span><br><span class="line">      val: <span class="string">&quot;D&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    right: &#123;</span><br><span class="line">      val: <span class="string">&quot;E&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  right: &#123;</span><br><span class="line">    val: <span class="string">&quot;C&quot;</span>,</span><br><span class="line">    right: &#123;</span><br><span class="line">      val: <span class="string">&quot;F&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-先序遍历"><a href="#1-先序遍历" class="headerlink" title="1.先序遍历"></a>1.先序遍历</h3><blockquote><p>遍历的顺序是： 根节点 -&gt; 左子树 -&gt;右子树</p></blockquote><p> <img src="/images/tree/preorder.png" alt="图片"><br> <img src="/images/tree/preorder.gif" alt="图片"></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preorder</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 递归边界，root 为空</span></span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出当前遍历的结点值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;当前遍历的结点值是：&#x27;</span>, root.val);  </span><br><span class="line">    <span class="comment">// 递归遍历左子树 </span></span><br><span class="line">    preorder(root.left);  </span><br><span class="line">    <span class="comment">// 递归遍历右子树  </span></span><br><span class="line">    preorder(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><blockquote><p>1.调用 <code>preorder(root)</code>，这里 <code>root</code> 就是 <code>A</code>，它非空，所以进入递归式，输出 <code>A</code> 值。接着优先遍历左子树，<code>preorder(root.left)</code> 此时为 <code>preorder(B)</code>；</p></blockquote><blockquote><ol start="2"><li>进入 <code>preorder(B)</code>的逻辑： 入参为结点 <code>B</code>，非空，进入递归式，输出 <code>B</code> 值。接着优先遍历 <code>B</code> 的左子树，<code>preorder(root.left)</code> 此时为 <code>preorder(D)</code>；</li></ol></blockquote><blockquote><ol start="3"><li>进入 <code>preorder(D)</code>的逻辑： 入参为结点 <code>D</code>，非空，进入递归式，输出 <code>D</code> 值。接着优先遍历 <code>D</code> 的左子树，<code>preorder(root.left)</code> 此时为 <code>preorder(null)</code>;</li></ol></blockquote><blockquote><ol start="4"><li>进入<code>preorder(null)</code>，发现抵达了递归边界，直接 <code>return</code> 掉。紧接着是 <code>preorder(D)</code>的逻辑往下走，走到了 <code>preorder(root.right)</code>;</li></ol></blockquote><blockquote><ol start="5"><li>再次进入<code>preorder(null)</code>，发现抵达了递归边界，直接 <code>return</code> 掉，回到<code>preorder(D)</code>里。接着 <code>preorder(D)</code>的逻辑往下走，发现 <code>preorder(D)</code> 已经执行完了。于是返回，回到<code>preorder(B)</code>里，接着<code>preorder(B)</code>往下走，进入 <code>preorder(root.right)</code>，也就是 <code>preorder(E)</code>,<code>E</code> 不为空，进入递归式，输出 <code>E</code> 值。接着优先遍历 <code>E</code> 的左子树，<code>preorder(root.left)</code> 此时为 <code>preorder(null)</code>，触碰递归边界，直接返回 <code>preorder(E)</code>；继续<code>preorder(E)</code>执行下去，是<code>preorder(root.right)</code>，这里 <code>E</code> 的 <code>right</code> 同样是 <code>null</code>，故直接返回。如此一来，<code>preorder(E)</code>就执行完了，回到<code>preorder(B)</code>里去；发现<code>preorder(B)</code>也执行完了，于是回到<code>preorder(A)</code>里去，执行<code>preorder(A)</code>中的 <code>preorder(root.right)</code>。</li></ol></blockquote><blockquote><ol start="6"><li><code>root</code> 是<code>A</code>，<code>root.right</code> 就是<code>C</code> 了，进入<code>preorder(C)</code>的逻辑, <code>C</code> 不为空，进入递归式，输出 <code>C</code> 值。接着优先遍历 <code>C</code> 的左子树，<code>preorder(root.left)</code> 此时为 <code>preorder(null)</code>，触碰递归边界，直接返回。继续<code>preorder(C)</code>执行下去，是<code>preorder(root.right)</code>，这里 <code>C</code> 的 <code>right</code>是 <code>F</code>;</li></ol></blockquote><blockquote><ol start="7"><li>进入<code>preorder(F)</code>的逻辑，<code>F</code> 不为空，进入递归式，输出 <code>F</code> 值。接着优先遍历 <code>F</code> 的左子树，<code>preorder(root.left)</code> 此时为 <code>preorder(null)</code>，触碰递归边界，直接返回 <code>preorder(F)</code>；继续<code>preorder(F)</code>执行下去，是<code>preorder(root.right)</code>，这里 <code>F</code> 的 <code>right</code> 同样是 <code>null</code>，故直接返回<code>preorder(F)</code>。此时<code>preorder(F)</code>已经执行完了，返回<code>preorder(C)</code>；发现<code>preorder(C)</code>也执行完了，就回到 <code>preorder(A)</code>；发现<code>preorder(A)</code>作为递归入口，它的逻辑也已经执行完了，于是我们的递归活动就正式画上了句号。到此为止，6个结点也已全部按照先序遍历顺序输出;</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当前遍历的结点值是： A</span><br><span class="line">当前遍历的结点值是： B</span><br><span class="line">当前遍历的结点值是： D</span><br><span class="line">当前遍历的结点值是： E</span><br><span class="line">当前遍历的结点值是： C</span><br><span class="line">当前遍历的结点值是： F</span><br></pre></td></tr></table></figure><h3 id="2-中序遍历"><a href="#2-中序遍历" class="headerlink" title="2.中序遍历"></a>2.中序遍历</h3><blockquote><p>左子树 -&gt; 根节点 -&gt; 右子树</p></blockquote><p> <img src="/images/tree/inorder.png" alt="图片"><br> <img src="/images/tree/inorder.gif" alt="图片"></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inorder</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 递归边界，root 为空</span></span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 递归遍历左子树 </span></span><br><span class="line">    inorder(root.left);  </span><br><span class="line">    <span class="comment">// 输出当前遍历的结点值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;当前遍历的结点值是：&#x27;</span>, root.val);  </span><br><span class="line">    <span class="comment">// 递归遍历右子树  </span></span><br><span class="line">    inorder(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>按照中序遍历出来，同一颗二叉树，结点内容输出结果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当前遍历的结点值是： D</span><br><span class="line">当前遍历的结点值是： B</span><br><span class="line">当前遍历的结点值是： E</span><br><span class="line">当前遍历的结点值是： A</span><br><span class="line">当前遍历的结点值是： C</span><br><span class="line">当前遍历的结点值是： F</span><br></pre></td></tr></table></figure><h3 id="3-后序遍历"><a href="#3-后序遍历" class="headerlink" title="3.后序遍历"></a>3.后序遍历</h3><blockquote><p>遍历的顺序是：左子树 -&gt; 右子树 -&gt; 根节点</p></blockquote><p> <img src="/images/tree/postorder.png" alt="图片"><br> <img src="/images/tree/postorder.gif" alt="图片"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postorder</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 递归边界，root 为空</span></span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 递归遍历左子树 </span></span><br><span class="line">    postorder(root.left);  </span><br><span class="line">    <span class="comment">// 递归遍历右子树  </span></span><br><span class="line">    postorder(root.right);</span><br><span class="line">    <span class="comment">// 输出当前遍历的结点值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;当前遍历的结点值是：&#x27;</span>, root.val); </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>遍历结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">当前遍历的结点值是： D</span><br><span class="line">当前遍历的结点值是： E</span><br><span class="line">当前遍历的结点值是： B</span><br><span class="line">当前遍历的结点值是： F</span><br><span class="line">当前遍历的结点值是： C</span><br><span class="line">当前遍历的结点值是： A</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pdfjs-dist + vue 使用记录</title>
      <link href="2020/06/08/pdf/"/>
      <url>2020/06/08/pdf/</url>
      
        <content type="html"><![CDATA[<blockquote><p>现在公司把外部网都限制死了，导致笔记都不能做，为知笔记这么好使的东西居然不给用，好气哦~ 但是做笔记的习惯不能丢！暂且把blog当笔记使吧~</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;pdf_container bg_gray&quot; ref&#x3D;&quot;pdfWrap&quot;&gt;</span><br><span class="line">    &lt;canvas ref&#x3D;&quot;pdfCanvas&quot;&gt;&lt;&#x2F;canvas&gt;</span><br><span class="line">    &lt;!-- &lt;div ref&#x3D;&quot;pdfSvg&quot;&gt;&lt;&#x2F;div&gt; --&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供三个event, 父级直接调用, 触发按钮请自行在父级定义。</span></span><br><span class="line"><span class="comment"> * onLarger 放大</span></span><br><span class="line"><span class="comment"> * onSmaller 缩小</span></span><br><span class="line"><span class="comment"> * onRotate 旋转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> PDF <span class="keyword">from</span> <span class="string">&#x27;pdfjs-dist&#x27;</span>;</span><br><span class="line"><span class="comment">// PDF.disableWorker = true;</span></span><br><span class="line">PDF.GlobalWorkerOptions.workerSrc = <span class="built_in">require</span>(<span class="string">&#x27;pdfjs-dist/build/pdf.worker.min&#x27;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;appliClaimPdf&#x27;</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    url: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      pages: <span class="number">0</span>,</span><br><span class="line">      scale: <span class="number">1.5</span>, <span class="comment">// 缩放倍数</span></span><br><span class="line">      rotate: <span class="number">0</span>, <span class="comment">// 旋转角度</span></span><br><span class="line">      pdf: <span class="literal">null</span> <span class="comment">// pdf本身</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="function"><span class="title">url</span>(<span class="params">newData, oldData</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// url异步拿取</span></span><br><span class="line">      <span class="keyword">if</span> (newData) &#123;</span><br><span class="line">        <span class="built_in">this</span>.previewPDF();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.url) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">this</span>.previewPDF();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">onLarger</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.scale &gt; <span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;globalLoading&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">      <span class="built_in">this</span>.scale += <span class="number">0.25</span>;</span><br><span class="line">      <span class="built_in">this</span>.getPage(<span class="built_in">this</span>.pdf, <span class="built_in">this</span>.scale, <span class="built_in">this</span>.rotate, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">onSmaller</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.scale &lt; <span class="number">0.7</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;globalLoading&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">      <span class="built_in">this</span>.scale -= <span class="number">0.25</span>;</span><br><span class="line">      <span class="built_in">this</span>.getPage(<span class="built_in">this</span>.pdf, <span class="built_in">this</span>.scale, <span class="built_in">this</span>.rotate, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">onRotate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.rotate &gt; <span class="number">360</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.rotate = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;globalLoading&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">      <span class="built_in">this</span>.rotate += <span class="number">90</span>;</span><br><span class="line">      <span class="built_in">this</span>.getPage(<span class="built_in">this</span>.pdf, <span class="built_in">this</span>.scale, <span class="built_in">this</span>.rotate, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">previewPDF</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;globalLoading&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">let</span> _this = <span class="built_in">this</span>;</span><br><span class="line">      <span class="comment">// 引入pdf.js的字体</span></span><br><span class="line">      <span class="keyword">let</span> CMAP_URL = <span class="string">&#x27;https://unpkg.com/pdfjs-dist@2.0.943/cmaps/&#x27;</span>;</span><br><span class="line">      <span class="keyword">let</span> loadingTask = PDF.getDocument(&#123;</span><br><span class="line">        url: _this.url,</span><br><span class="line">        <span class="comment">// url: &#x27;http://localhost:8080/api/upload/wechat/pdf/IID00921683.pdf&#x27;, // 本地调试</span></span><br><span class="line">        cMapUrl: CMAP_URL,</span><br><span class="line">        cMapPacked: <span class="literal">true</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="params">pdf</span> =&gt;</span> &#123;</span><br><span class="line">        _this.pdf = pdf;</span><br><span class="line">        <span class="keyword">let</span> numPages = pdf.numPages;</span><br><span class="line">        <span class="keyword">let</span> pageNumber = <span class="number">1</span>;</span><br><span class="line">        _this.getPage(pdf, _this.scale, _this.rotate, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">getPage</span>(<span class="params">pdf, scale, rotate, pageNumber, numPages</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> _this = <span class="built_in">this</span>;</span><br><span class="line">      pdf.getPage(pageNumber).then(<span class="function"><span class="params">page</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 方法一 canvas (页面会白屏闪烁)</span></span><br><span class="line">        <span class="comment">// 获取DOM中为预览PDF准备好的canvasDOM对象</span></span><br><span class="line">        <span class="keyword">let</span> canvasWrap = _this.$refs.pdfWrap;</span><br><span class="line">        <span class="keyword">let</span> canvas = _this.$refs.pdfCanvas;</span><br><span class="line">        <span class="keyword">let</span> viewport = page.getViewport(scale, rotate);</span><br><span class="line"></span><br><span class="line">        canvas.style.height = viewport.height + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        canvas.style.width = viewport.width + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        <span class="comment">// canvas画大两倍，解决绘画模糊</span></span><br><span class="line">        canvas.height = viewport.height * <span class="number">1.5</span>;</span><br><span class="line">        canvas.width = viewport.width * <span class="number">1.5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> renderContext = &#123;</span><br><span class="line">          canvasContext: ctx,</span><br><span class="line">          viewport</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        page.render(renderContext).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          pageNumber += <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">if</span> (pageNumber &lt;= numPages) &#123;</span><br><span class="line">            _this.getPage(pdf, scale, rotate, pageNumber, numPages);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法二 svg（显示画质会比canvas高,弊端：ios展示不了非宋体的字）</span></span><br><span class="line">        <span class="comment">// let svgWrap = _this.$refs.pdfSvg;</span></span><br><span class="line">        <span class="comment">// let viewport = page.getViewport(scale, rotate);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// svgWrap.style.width = viewport.width + &#x27;px&#x27;;</span></span><br><span class="line">        <span class="comment">// svgWrap.style.height = viewport.height + &#x27;px&#x27;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// page.getOperatorList().then(function(opList) &#123;</span></span><br><span class="line">        <span class="comment">//   var svgGfx = new PDF.SVGGraphics(page.commonObjs, page.objs);</span></span><br><span class="line">        <span class="comment">//   svgGfx.getSVG(opList, viewport).then(function(svg) &#123;</span></span><br><span class="line">        <span class="comment">//     svgWrap.innerHTML = &#x27;&#x27;;</span></span><br><span class="line">        <span class="comment">//     svgWrap.appendChild(svg);</span></span><br><span class="line">        <span class="comment">//   &#125;);</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">        _this.$store.commit(<span class="string">&#x27;globalLoading&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pdfjs-dist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC网页项目全屏、退出全屏</title>
      <link href="2020/06/08/fullscreen/"/>
      <url>2020/06/08/fullscreen/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近自己在写pc端的小项目（react + ts + mobx + react-intl ），写了一个全屏和退出全屏的功能，特此记录；</p></blockquote><p> 先上效果图：</p><p><img src="/images/fullscreen/full.png"></p><p><img src="/images/fullscreen/no.png"></p><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><h4 id="1-store部分"><a href="#1-store部分" class="headerlink" title="1.store部分"></a>1.store部分</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认非全屏</span></span><br><span class="line">@observable fullScreen: boolean = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全屏事件</span></span><br><span class="line">@action</span><br><span class="line">requestFullScreen = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.fullScreen = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> docElm = <span class="built_in">document</span>.documentElement;</span><br><span class="line">    <span class="keyword">if</span> (docElm.requestFullscreen) &#123;</span><br><span class="line">        docElm.requestFullscreen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出全屏</span></span><br><span class="line">@action</span><br><span class="line">exitFullscreen = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.fullScreen = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.exitFullscreen) &#123;</span><br><span class="line">        <span class="built_in">document</span>.exitFullscreen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-dom部分"><a href="#2-dom部分" class="headerlink" title="2.dom部分"></a>2.dom部分</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * header 右侧功能区</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fullScreenRender = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;  requestFullScreen, exitFullscreen &#125; = <span class="built_in">this</span>.store;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">            &#123;<span class="comment">/* 此处为全屏按钮 */</span>&#125;</span><br><span class="line">            &lt;span className=<span class="string">&quot;layout-header-trigger layout-header-trigger-min flex-align-center&quot;</span>&gt;</span><br><span class="line">                &#123;fullScreen ? <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">onClick</span>=<span class="string">&#123;exitFullscreen&#125;</span> &gt;</span>&#123;SVG.full2&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> : <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">onClick</span>=<span class="string">&#123;requestFullScreen&#125;</span> &gt;</span>&#123;SVG.full&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&#125;</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-浏览器Esc自己关闭全屏处理"><a href="#3-浏览器Esc自己关闭全屏处理" class="headerlink" title="3.浏览器Esc自己关闭全屏处理"></a>3.浏览器Esc自己关闭全屏处理</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 全屏缩小</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> isFull:boolean = !!<span class="built_in">document</span>.fullscreenElement;</span><br><span class="line">        <span class="keyword">if</span> (!isFull) &#123;</span><br><span class="line">            <span class="comment">// 更改store中的值公共方法 changeObserver</span></span><br><span class="line">            <span class="built_in">this</span>.store.changeObserver(&#123; <span class="attr">key</span>: <span class="string">&#x27;fullScreen&#x27;</span>, <span class="attr">data</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-兼容写法"><a href="#4-兼容写法" class="headerlink" title="4.兼容写法"></a>4.兼容写法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//全屏</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fullScreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> element = <span class="built_in">document</span>.documentElement;</span><br><span class="line">    <span class="keyword">if</span> (element.requestFullscreen) &#123;</span><br><span class="line">        element.requestFullscreen();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.msRequestFullscreen) &#123;</span><br><span class="line">        element.msRequestFullscreen();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.mozRequestFullScreen) &#123;</span><br><span class="line">        element.mozRequestFullScreen();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.webkitRequestFullscreen) &#123;</span><br><span class="line">        element.webkitRequestFullscreen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//退出全屏 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exitFullscreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.exitFullscreen) &#123;</span><br><span class="line">        <span class="built_in">document</span>.exitFullscreen();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.msExitFullscreen) &#123;</span><br><span class="line">        <span class="built_in">document</span>.msExitFullscreen();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.mozCancelFullScreen) &#123;</span><br><span class="line">        <span class="built_in">document</span>.mozCancelFullScreen();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.webkitExitFullscreen) &#123;</span><br><span class="line">        <span class="built_in">document</span>.webkitExitFullscreen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听window是否全屏，并进行相应的操作,支持esc键退出</span></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isFull=!!(<span class="built_in">document</span>.webkitIsFullScreen || <span class="built_in">document</span>.mozFullScreen || </span><br><span class="line">        <span class="built_in">document</span>.msFullscreenElement || <span class="built_in">document</span>.fullscreenElement</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// todo something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><blockquote><p>在写的过程中发现全屏了之后按<code>Esc</code>键是默认能退出全屏模式的，且在全屏模式下是监听不到键盘的<code>onkeydown</code>事件的，浏览器自己关闭了全屏模式，导致我在<code>store</code>中用来辨识是否全屏的<code>fullScreen</code>无法更改状态；后来发现浏览器切换全屏和非全屏会触发<code>resize</code>事件，全屏时<code>document.fullscreenElement</code>就是被全屏的dom内容，非全屏时<code>document.fullscreenElement</code>的值为空；由此有了上面第三步<code>浏览器Esc自己关闭全屏处理</code>,在按<code>Esc</code>键关闭全屏模式时，手动更改一下<code>fullScreen</code>的状态。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题：使 (a === 1 &amp;&amp; a === 2 &amp;&amp; a === 3) 为true</title>
      <link href="2020/06/04/proxy/"/>
      <url>2020/06/04/proxy/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一看题目就知道 <code>a</code> 不可能是个固定的值，且在一个判断为true就要变成下一个判断的值。由此推断，此处需要使用到数据劫持！</p></blockquote><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  num = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>,<span class="string">&#x27;a&#x27;</span>,&#123;</span><br><span class="line">get:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num++</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(a===<span class="number">1</span> &amp;&amp; a===<span class="number">2</span> &amp;&amp; a===<span class="number">3</span>)  <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p>发现用proxy也能做这样的事，但是得把<code>a</code>放到对象里(对Proxy理解不是很透彻，不知道还有没有其他写法)；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj= <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;<span class="attr">a</span>:<span class="number">0</span>&#125;,&#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">       data = <span class="built_in">Reflect</span>.get(target,key) + <span class="number">1</span>;</span><br><span class="line">       <span class="built_in">this</span>.set(target, key, data)</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target,key,value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj.a === <span class="number">1</span>&amp;&amp;obj.a === <span class="number">2</span>&amp;&amp;obj.a === <span class="number">3</span>) <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象在做比较时的隐式转换"><a href="#对象在做比较时的隐式转换" class="headerlink" title="对象在做比较时的隐式转换"></a>对象在做比较时的隐式转换</h3><blockquote><p>不过这种方法不能使用<code>===</code> 只能是用 <code>==</code>判断才能为true；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  num: <span class="number">0</span>,</span><br><span class="line">  valueOf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.num += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a==<span class="number">1</span> &amp;&amp; a==<span class="number">2</span> &amp;&amp; a==<span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://segmentfault.com/a/1190000012921114">解析在这里</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3.0数据双向绑定学习记录</title>
      <link href="2020/06/04/vue3/"/>
      <url>2020/06/04/vue3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>尤雨溪说：“管你学不学的动，老子就要更新！” 玩笑开完了，代码撸起来~   :smile: </p></blockquote><p>下面是使用自己实现的双向绑定js在页面的效果：</p><p> <img src="/images/vue/1.png" alt="图片"><br> <img src="/images/vue/2.png" alt="图片"></p><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt; &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;button id&#x3D;&quot;btn&quot;&gt;点击&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;.&#x2F;vue3.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const root &#x3D; document.getElementById(&#39;app&#39;);</span><br><span class="line">    const btn &#x3D; document.getElementById(&#39;btn&#39;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 响应式</span><br><span class="line">    const data &#x3D; &#123;</span><br><span class="line">      name: &quot;阿强&quot;,</span><br><span class="line">      age: 3,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 将数据proxy</span><br><span class="line">    const obj &#x3D; reactive(data);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; computed属性</span><br><span class="line">    let age &#x3D; computed(() &#x3D;&gt; obj.age - 2);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 数据变化执行的fn</span><br><span class="line">    let changed &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; 数据变化 触发set，执行这个函数</span><br><span class="line">      console.log(&#39;数据变了&#39;, obj.age)</span><br><span class="line">      &#x2F;&#x2F; 我们没有compile，不能支持vue的语法</span><br><span class="line">      &#x2F;&#x2F; obj.name 收集依赖</span><br><span class="line">      root.innerHTML &#x3D; &#96;&lt;h1&gt;$&#123;obj.name&#125;今年$&#123;obj.age&#125;岁了，喜欢隔壁$&#123;age.value&#125;岁的小花&lt;&#x2F;h1&gt;&#96;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    effect(changed);</span><br><span class="line"></span><br><span class="line">    btn.addEventListener(&#39;click&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; 触发set函数，执行effect</span><br><span class="line">      obj.age++;</span><br><span class="line">    &#125;, false)</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="vue3-js"><a href="#vue3-js" class="headerlink" title="vue3.js"></a>vue3.js</h3> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// key:原始数据 =&gt; data:响应式数据</span></span><br><span class="line"><span class="keyword">let</span> toProxy = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="comment">// key:响应式数据 =&gt; data:原始数据</span></span><br><span class="line"><span class="keyword">let</span> toRow = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储effect的地方 栈</span></span><br><span class="line"><span class="keyword">let</span> effectStack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储依赖的地方</span></span><br><span class="line"><span class="keyword">let</span> targetMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 收集依赖</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target, key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 栈后进先出，最后一个就是最新的一个数据</span></span><br><span class="line">    <span class="keyword">const</span> effect = effectStack[effectStack.length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (!effect) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> depMap = targetMap.get(target);</span><br><span class="line">    <span class="keyword">if</span> (depMap === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        depMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">        targetMap.set(target, depMap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> dep = depMap.get(key);</span><br><span class="line">    <span class="keyword">if</span> (dep === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        dep = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">        depMap.set(key, dep);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!dep.has(effect)) &#123;</span><br><span class="line">        dep.add(effect);</span><br><span class="line">        effect.deps.push(dep);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发更新</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target, key, info</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.寻找依赖</span></span><br><span class="line">    <span class="keyword">const</span> depMap = targetMap.get(target);</span><br><span class="line">    <span class="comment">// 没有依赖</span></span><br><span class="line">    <span class="keyword">if</span> (depMap === <span class="literal">undefined</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> effects = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">// 集合，自动去重</span></span><br><span class="line">    <span class="keyword">const</span> computedRunners = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (key) &#123;</span><br><span class="line">        <span class="keyword">let</span> deps = depMap.get(key);</span><br><span class="line">        <span class="comment">// deps里面全部是effect</span></span><br><span class="line">        deps.forEach(<span class="function"><span class="params">effect</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (effect.computed) &#123;</span><br><span class="line">                computedRunners.add(effect);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                effects.add(effect);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行更新</span></span><br><span class="line">    effects.forEach(<span class="function"><span class="params">effect</span> =&gt;</span> effect());</span><br><span class="line">    computedRunners.forEach(<span class="function"><span class="params">computed</span> =&gt;</span> computed());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往effectStack push effect函数，执行fn 数据更新之后需要执行的fn</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">fn, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// @todo 处理options </span></span><br><span class="line">    <span class="keyword">let</span> e = createReactiveEffect(fn, options);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!options.lazy) &#123;</span><br><span class="line">        e();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造effect</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createReactiveEffect</span>(<span class="params">fn, options</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> effect = <span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> run(effect, fn, args);</span><br><span class="line">    &#125;</span><br><span class="line">    effect.deps = [];</span><br><span class="line">    effect.computed = options.computed;</span><br><span class="line">    effect.lazy = options.lazy;</span><br><span class="line">    <span class="keyword">return</span> effect;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">effect, fn, args</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (effectStack.indexOf(effect) === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            effectStack.push(effect);</span><br><span class="line">            <span class="comment">// 执行的时候，是要获取的</span></span><br><span class="line">            <span class="keyword">return</span> fn(...args);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            effectStack.pop() <span class="comment">// effect用完就要推出去</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> runner = effect(fn, &#123;</span><br><span class="line">        computed: <span class="literal">true</span>,</span><br><span class="line">        lazy: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        effect: runner,</span><br><span class="line">        <span class="keyword">get</span> <span class="title">value</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> runner();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询缓存中数据是否已经被proxy了</span></span><br><span class="line">    <span class="keyword">let</span> observed = toProxy.get(target);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (observed) &#123;</span><br><span class="line">        <span class="keyword">return</span> observed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (toRow.get(target)) &#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据没有proxy时，设置缓存</span></span><br><span class="line">    observed = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, baseHandler);</span><br><span class="line">    toProxy.set(target, observed);</span><br><span class="line">    toRow.set(observed, target);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> observed;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应代理</span></span><br><span class="line"><span class="keyword">const</span> baseHandler = &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target, key</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// target就是obj，key就是name  以下写法等同于 target[key]</span></span><br><span class="line">        <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.get(target, key);</span><br><span class="line">        <span class="comment">// 收集依赖 track </span></span><br><span class="line">        track(target, key);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> res == <span class="string">&#x27;object&#x27;</span> ? reactive(res) : res;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target, key, val</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> info = &#123;</span><br><span class="line">            oldValue: target[key],</span><br><span class="line">            newValue: val</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// obj.name = xx 这里 我们是需要通知更新的</span></span><br><span class="line">        <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.set(target, key, val)</span><br><span class="line">        <span class="comment">// 触发更新</span></span><br><span class="line">        trigger(target, key, info)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目用HbuilderX 打包app</title>
      <link href="2020/06/04/vue/"/>
      <url>2020/06/04/vue/</url>
      
        <content type="html"><![CDATA[<p>最近公司要把之前做的H5项目打包成app,刚好研究了一下。其实用hbuilder打包还是很简单的，就简单的几步；废话不多说，开始吧~</p><h3 id="一-vue项目"><a href="#一-vue项目" class="headerlink" title="一. vue项目"></a>一. vue项目</h3><blockquote><p>项目运行<code>npm run build</code>打出生产包，这个包先拷贝到剪切板以备后面使用~</p></blockquote><p> <img src="/images/vue_7.png" alt="打包"></p><h3 id="二-Hbuild-X"><a href="#二-Hbuild-X" class="headerlink" title="二. Hbuild X"></a>二. Hbuild X</h3><h4 id="1-新建项目；"><a href="#1-新建项目；" class="headerlink" title="1.新建项目；"></a>1.新建项目；</h4><p> <img src="/images/vue_1.png" alt="新建"></p><h4 id="2-新建好了把里面一些没有的文件夹删除，把manifest-json留下；"><a href="#2-新建好了把里面一些没有的文件夹删除，把manifest-json留下；" class="headerlink" title="2.新建好了把里面一些没有的文件夹删除，把manifest.json留下；"></a>2.新建好了把里面一些没有的文件夹删除，把<code>manifest.json</code>留下；</h4><p> <img src="/images/vue_6.png" alt="删除用不上的文件"></p><h4 id="3-把vue项目打好的包放进去；"><a href="#3-把vue项目打好的包放进去；" class="headerlink" title="3.把vue项目打好的包放进去；"></a>3.把vue项目打好的包放进去；</h4><p> <img src="/images/vue_8.png" alt="图片"></p><h4 id="4-配置manifest-json文件；"><a href="#4-配置manifest-json文件；" class="headerlink" title="4.配置manifest.json文件；"></a>4.配置<code>manifest.json</code>文件；</h4><p> <img src="/images/vue_5.png" alt="图片"><br> <img src="/images/vue_4.png" alt="图片"><br> <img src="/images/vue_2.png" alt="图片"></p><h4 id="5-点击发行-gt-原生App-云打包-gt-；"><a href="#5-点击发行-gt-原生App-云打包-gt-；" class="headerlink" title="5.点击发行 -&gt; 原生App-云打包 -&gt;；"></a>5.点击<code>发行 -&gt; 原生App-云打包 -&gt;</code>；</h4><p> <img src="/images/vue_3.png" alt="发布"></p><blockquote><p>有一个要注意的点，Hbuilder + vue 打出来的包，路由会失效，在页面点击返回会直接退出应用，这个需要在<code>index.html</code>的head中插入下面这行代码：</p></blockquote> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;plusready&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> webview = plus.webview.currentWebview();</span><br><span class="line">plus.key.addEventListener(<span class="string">&#x27;backbutton&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">webview.canBack(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (e.canBack) &#123;</span><br><span class="line">webview.back();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//webview.close(); //hide,quit</span></span><br><span class="line"><span class="comment">//plus.runtime.quit();</span></span><br><span class="line"><span class="comment">//首页返回键处理</span></span><br><span class="line"><span class="comment">//处理逻辑：1秒内，连续两次按返回键，则退出应用；</span></span><br><span class="line"><span class="keyword">var</span> first = <span class="literal">null</span>;</span><br><span class="line">plus.key.addEventListener(<span class="string">&#x27;backbutton&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//首次按键，提示‘再按一次退出应用’</span></span><br><span class="line"><span class="keyword">if</span> (!first) &#123;</span><br><span class="line">first = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;再按一次退出应用&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">first = <span class="literal">null</span>;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - first &lt; <span class="number">1500</span>) &#123;</span><br><span class="line">plus.runtime.quit();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H5打包App </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mobx学习记录</title>
      <link href="2019/11/26/Mobx/"/>
      <url>2019/11/26/Mobx/</url>
      
        <content type="html"><![CDATA[<h4 id="Mobx工作记录"><a href="#Mobx工作记录" class="headerlink" title="Mobx工作记录"></a>Mobx工作记录</h4><p>之前由于项目比较急，需要在短时间内学习并上手mobx，虽然已经用react+mobx开发了好几个项目，一直都没时间总结一下。特此梳理一下，让知识沉淀沉淀~<br><a href="https://github.com/mobxjs/mobx">Mobx官方文档</a><br><a href="https://cn.mobx.js.org/">Mobx官方中文文档</a></p><h4 id="Mobx的核心概念"><a href="#Mobx的核心概念" class="headerlink" title="Mobx的核心概念"></a>Mobx的核心概念</h4><p>Mobx的核心原理是通过action触发state的变化，进而触发state的衍生对象（computed value &amp; Reactions）。</p><p><img src="/images/mobx_flow.png"></p><h5 id="1-State-状态"><a href="#1-State-状态" class="headerlink" title="1.State(状态)"></a>1.State(状态)</h5><p> 其实就是我们需要用Mobx管理起来的数据。<br> 在Mobx中，State就对应业务的最原始状态，通过observable方法，可以使这些状态变得可观察。<br>值得注意的一点是，当某一数据被observable包装后，他返回的是被observable包装后的类型。</p><h5 id="2-Action-动作"><a href="#2-Action-动作" class="headerlink" title="2.Action(动作)"></a>2.Action(动作)</h5><p>动作 是任一一段可以改变状态的代码。用户事件、后端数据推送、预定事件、等等。 动作类似于用户在excel单元格中输入一个新的值。 我们的异步请求都可以在这里做。但是这里要注意一点，异步的函数里面对state的更改是不能检测到的。所以异步的回调也需要用action（）包一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demoMobx</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    @action</span><br><span class="line">    getServerList = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.send(api_url, action(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// do something......</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里还有一个 <code>flow</code>需要讲一下：</p><blockquote><ul><li>用法: flow(function* (args) { }),<br>flow() 接收 <code>generator</code> 函数作为它唯一的输入,当处理异步动作时，回调中执行的代码不会被 action 包装。这意味着你修改的 observable state 无法通过 enforceActions 检查。保留动作语义的简单方法是使用 flow 来包装异步函数。这将确保所有回调都会被 action() 包装。</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configure &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许在动作外部修改状态</span></span><br><span class="line">configure(&#123; <span class="attr">enforceActions</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    @observable githubProjects = [];</span><br><span class="line">    @observable state = <span class="string">&quot;pending&quot;</span>; <span class="comment">// &quot;pending&quot; / &quot;done&quot; / &quot;error&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fetchProjects = flow(<span class="function"><span class="keyword">function</span>* <span class="title">fetchProjects</span>(<span class="params"></span>) </span>&#123; <span class="comment">// &lt;- 注意*号，这是生成器函数！</span></span><br><span class="line">        <span class="built_in">this</span>.githubProjects = [];</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> projects = <span class="keyword">yield</span> fetchGithubProjectsSomehow(); <span class="comment">// 用 yield 代替 await</span></span><br><span class="line">            <span class="keyword">const</span> filteredProjects = somePreprocessing(projects);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 异步代码自动会被 `action` 包装</span></span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;done&quot;</span>;</span><br><span class="line">            <span class="built_in">this</span>.githubProjects = filteredProjects;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-Derivations-衍生"><a href="#3-Derivations-衍生" class="headerlink" title="3. Derivations(衍生)"></a>3. Derivations(衍生)</h5><p>这一部分的概念一直不是太理解，工作之中也不能直观的感受到它，一直迷迷糊糊。但是又感觉不影响正常开发，这里只能先留一个TODO，等啥时候脑子开窍了，再来补上吧~  </p><p>:smile:</p><h4 id="在React项目中使用Mobx"><a href="#在React项目中使用Mobx" class="headerlink" title="在React项目中使用Mobx"></a>在React项目中使用Mobx</h4><h5 id="1-将store注入到全局"><a href="#1-将store注入到全局" class="headerlink" title="1.将store注入到全局"></a>1.将store注入到全局</h5><p> <code>mobx-react</code> 提供了 <code>Provider</code> </p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./app/app&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> stores <span class="keyword">from</span> <span class="string">&#x27;../../modules/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">baseReact</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;Provider &#123;...stores&#125;&gt;</span><br><span class="line">            &lt;App/&gt;</span><br><span class="line">        &lt;/Provider&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(baseReact(), <span class="built_in">document</span>.getElementById(<span class="string">&#x27;skin&#x27;</span>));</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-mobx在store和组件里的应用"><a href="#2-mobx在store和组件里的应用" class="headerlink" title="2.mobx在store和组件里的应用;"></a>2.mobx在store和组件里的应用;</h5><p><code>mobx-react</code>提供了<code>reject</code> 和 <code>observer</code>两个工具去把store和组件关联起来。<br> <code>reject</code> 是将该组件的store注入进来；<br> <code>observer</code>可以用作包裹 React 组件的高阶组件， 在组件的 render 函数中的任何已使用的 observable 发生变化时，组件都会自动重新渲染。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在store.js里面引入mobx, </span></span><br><span class="line"><span class="keyword">import</span> &#123; BaseStore &#125; <span class="keyword">from</span> <span class="string">&quot;../../../../../component.index&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; observable, action&#125; <span class="keyword">from</span> <span class="string">&quot;mobx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DesignRightStore</span> <span class="keyword">extends</span> <span class="title">BaseStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    @observable rightComponentTabIndex: number = <span class="number">0</span>; </span><br><span class="line">    @observable showBackgroundColorPicker: boolean = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    @action</span><br><span class="line">    setRightComponentTabIndex = <span class="function">(<span class="params">index: number</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rightComponentTabIndex = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> DesignRightStore();</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// react 组件需要用到 mobx-react</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">&quot;react-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; inject, observer&#125; <span class="keyword">from</span> <span class="string">&quot;mobx-react&quot;</span>;</span><br><span class="line"></span><br><span class="line">@withRouter</span><br><span class="line">@inject(<span class="string">&#x27;DesignRightStore&#x27;</span>) <span class="comment">// 将DesignRightStore注入当前组件</span></span><br><span class="line">@observer   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DesignElementPanel</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span>(</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;<span class="comment">/*组件内可以通过 this.props.DesignRightStore 拿到store里面的值和方法*/</span>&#125;</span><br><span class="line">            &#123;<span class="built_in">this</span>.props.DesignRightStore.rightComponentTabIndex&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DesignElementPanel;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mobx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown常用语法测试</title>
      <link href="2019/11/22/md/"/>
      <url>2019/11/22/md/</url>
      
        <content type="html"><![CDATA[<h3 id="测试文字"><a href="#测试文字" class="headerlink" title="测试文字"></a>测试文字</h3><p>这是一篇测试的文章，随便写一些什么东西吧。大学时，时间是一学期一学期来计算的；毕业后，时间就变成了一年的一年的计算，感觉一晃就是一年，一晃就是好几年……</p><blockquote><p>这是一篇测试的文章，随便写一些什么东西吧。大学时，时间是一学期一学期来计算的；毕业后，时间就变成了一年的一年的计算，感觉一晃就是一年，一晃就是好几年……</p></blockquote><hr><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p>这里来放一点代码吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;测试HTML标签展示&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello world!&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><hr><hr><hr><hr><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p><a href="http://baidu.com/">百度</a></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li>这是一篇测试的文章，随便写一些什么东西吧。大学时，时间是一学期一学期来计算的；毕业后，时间就变成了一年的一年的计算，感觉一晃就是一年，一晃就是好几年……</li></ul><ul><li>这是一篇测试的文章，随便写一些什么东西吧。大学时，时间是一学期一学期来计算的；毕业后，时间就变成了一年的一年的计算，感觉一晃就是一年，一晃就是好几年……</li></ul><ol><li><p>这是一篇测试的文章，随便写一些什么东西吧。大学时，时间是一学期一学期来计算的；毕业后，时间就变成了一年的一年的计算，感觉一晃就是一年，一晃就是好几年……</p></li><li><p>这是一篇测试的文章，随便写一些什么东西吧。大学时，时间是一学期一学期来计算的；毕业后，时间就变成了一年的一年的计算，感觉一晃就是一年，一晃就是好几年……</p></li><li><p>这是一篇测试的文章，随便写一些什么东西吧。大学时，时间是一学期一学期来计算的；毕业后，时间就变成了一年的一年的计算，感觉一晃就是一年，一晃就是好几年……</p></li></ol><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table><thead><tr><th>表头</th><th align="center">表头</th><th align="right">表头</th></tr></thead><tbody><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr></tbody></table><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><img src="https://unsplash.it/1920/1040?random&t=8&gravity=north" alt="图片1"></p><h3 id="emoji"><a href="#emoji" class="headerlink" title="emoji"></a>emoji</h3><p>地址 <a href="https://emojipedia.org/">https://emojipedia.org/</a></p><table><thead><tr><th>emoji</th><th align="center">效果</th></tr></thead><tbody><tr><td><code>:smile:</code></td><td align="center">:smile:</td></tr><tr><td><code>:kissing_heart:</code></td><td align="center">:kissing_heart:</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> md </category>
          
      </categories>
      
      
        <tags>
            
            <tag> md语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3新增特性</title>
      <link href="2017/09/21/css3/"/>
      <url>2017/09/21/css3/</url>
      
        <content type="html"><![CDATA[<h3 id="一-选择器"><a href="#一-选择器" class="headerlink" title="一.选择器"></a>一.选择器</h3><h4 id="1-关系选择器"><a href="#1-关系选择器" class="headerlink" title="1. 关系选择器"></a>1. 关系选择器</h4><blockquote><p>后代选择器 ul li 选择所有的后代元素<br><br>子代选择器 ul &gt; li 选择ul的儿子<br><br>紧邻选择器 .box + li 选择.box后面的一个li元素<br><br>兄弟选择器 .box ~ li 选择.box后面所有的li元素<br></p></blockquote><h4 id="2-属性选择器-：通过属性来选择对应的元素"><a href="#2-属性选择器-：通过属性来选择对应的元素" class="headerlink" title="2. 属性选择器 ：通过属性来选择对应的元素"></a>2. 属性选择器 ：通过属性来选择对应的元素</h4><blockquote><p>（1）E[属性名] ： 选择所有的具备这个属性的E元素<br><br>（2）E[属性名=值] ：选择所有的具备这个 ‘属性 = 对应值’ 的E元素<br><br>（3）E[属性名~=值]：选择所有的包含这个 ‘属性 = 对应值’ 的E元素</p></blockquote><p><code>css3新增的(不是很常用)：</code></p><blockquote><p>（4）E[属性名^=值]：从头去匹配这个 ‘属性 = 对应值’ 的E元素<br><br>（5）E[属性名$=值]：从尾去匹配这个 ‘属性 = 对应值’ 的E元素<br><br>（6）E[属性名*=值]： 从任意位置去匹配这个‘属性 = 对应值’的E元素</p></blockquote><h4 id="3-伪类选择器"><a href="#3-伪类选择器" class="headerlink" title="3.伪类选择器"></a>3.伪类选择器</h4><blockquote><p>（1）E：first-child 找到第一个子元素为E的元素 （css2）<br><br>（2）E：last-child 找到最后一个子元素为E的元素 （css3）<br><br>（3）E：nth-child（N）找到第N个子元素为E的元素 （css3）<br></p></blockquote><h4 id="4-伪元素-before-after"><a href="#4-伪元素-before-after" class="headerlink" title="4. 伪元素 before after"></a>4. 伪元素 before after</h4><blockquote><p>作用：渲染一个虚拟的标签插入到当前元素的内部的前面或者后面,单标签是没有伪元素的。</p></blockquote><blockquote><p>（1）伪元素默认是行内元素，可以通过display进行转化，在实际工作中，多用来模拟一些小的标签去装饰；<br><br>  （2）因为伪元素是不存在的，所以不能直接用JS去获取（可以利用类去覆盖之前的样式）；<br><br>  （3）清除浮动的底层原理：就是让一个伪元素（因为伪元素不占dom内存）去清除浮动，从而节约了dom内存，也更加的合理；<br><br>  （4）content一定不能省略，即使里面没有内容，也要写一个空字符串；<br><br>  （5）伪元素推荐用双冒号，但是IE6,7,8不支持双冒号的写法，所以为了兼容考虑，使用单冒号；<br><br>  （6）当伪类需要配合iconfont去使用的话需要打开iconfont.css 拿到content里面对应的值；<br><br>  （7）当伪元素需要hover的效果的时候不能直接hover 需要借助于父级 写法：父级：hover：伪元素；<br></p></blockquote><h4 id="5-其他选择器"><a href="#5-其他选择器" class="headerlink" title="5. 其他选择器"></a>5. 其他选择器</h4><blockquote><p>（1）input:focus{ } =&gt; 选择获取焦点的表单<br><br>（4）Input:checked =&gt; 选择被选中的checkbox表单<br><br>（2）input:enabled{ } =&gt; 选择可操控的表单元素<br><br>（3）input:disabled { } =&gt; 选择不可操控的表单<br></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">&#x2F;* 选择获取焦点的那个表单 *&#x2F;</span><br><span class="line">input:focus&#123;</span><br><span class="line">border-color:pink;</span><br><span class="line">outline: none;</span><br><span class="line">height: 40px;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 选择被选中的 checkbox *&#x2F;</span><br><span class="line">input:checked &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 选择可操控的那个表单元素 *&#x2F;</span><br><span class="line">input:enabled &#123;</span><br><span class="line">background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 选择不可操控的表单元素 *&#x2F;</span><br><span class="line">input:disabled&#123;</span><br><span class="line">background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 选择通过锚点跳转的元素 *&#x2F;</span><br><span class="line">#test:target &#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">用户名：&lt;input type&#x3D;&quot;text&quot; disabled &gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">密码： &lt;input type&#x3D;&quot;password&quot;&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">身份证号： &lt;input type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">爱好：足球：&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot;&gt;</span><br><span class="line">篮球：&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot;&gt;  </span><br><span class="line">看动漫：&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot;&gt;  </span><br><span class="line">&lt;a href&#x3D;&quot;#test&quot;&gt;锚点跳转&lt;&#x2F;a&gt;</span><br><span class="line">&lt;p&gt;我是p元素&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;test&quot;&gt;我是拍元素，我才是货真价实的那个锚点&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;我是p元素&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;我是p元素&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;我是p元素&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h3 id="二-颜色"><a href="#二-颜色" class="headerlink" title="二. 颜色"></a>二. 颜色</h3><blockquote><p>新增了RGBA、HSLA模式，其中的A 表示透明度通道，即可以设置颜色值的透明度，相较opacity，它们不具有继承性，即不会影响子元素的透明度。</p></blockquote><h5 id="1-opacity"><a href="#1-opacity" class="headerlink" title="1. opacity"></a>1. opacity</h5><blockquote><p>如果给父盒子设置opacity，所有的子盒子都会有这个效果，opacity存在兼容性问题，如果是在IE6/7/8下，应该使用filter进行设置</p></blockquote><h5 id="2-rgba"><a href="#2-rgba" class="headerlink" title="2. rgba"></a>2. rgba</h5><blockquote><p>R:Red、G:Green、B:Blue、A:Alpha，R、G、B 取值范围0~255，A的取值范围是0-1。<br>RGBA可以用于所有使用颜色的地方<br>rgb三个值越小，颜色越黑<br>如果是纯色的背景，可以是使用rgba<br>如果是图片，可以脱离父子关系，让后用定位的方式来做。</p></blockquote><p><img src="/images/css/3.png"></p><h5 id="3-hsla"><a href="#3-hsla" class="headerlink" title="3. hsla"></a>3. hsla</h5><blockquote><p>H 色调 取值范围0<del>360，0/360表示红色、120表示绿色、240表示蓝色<br>S 饱和度取值范围0%</del>100%<br>L 亮度 取值范围0%<del>100%<br>A 透明度取值范围0</del>1</p></blockquote><p><img src="/images/css/4.png"></p><h3 id="三-盒子自减-box-sizing"><a href="#三-盒子自减-box-sizing" class="headerlink" title="三. 盒子自减(box-sizing )"></a>三. 盒子自减(box-sizing )</h3><blockquote><p>CSS3中可以通过box-sizing 来指定盒模型，之前我们的盒子的实际宽度是 :实际宽度 = width + padding + border，而内减属性会自动帮我们减掉 padding 和 border值 ，所以用了内减的盒子实际宽度就等于width。</p></blockquote><p>可以分成两种情况：</p><blockquote><p>1、box-sizing: border-box 计算方式为content = width – border - padding <br><br>2、box-sizing: content-box 计算方式为content = width</p></blockquote><h3 id="四-阴影"><a href="#四-阴影" class="headerlink" title="四.阴影"></a>四.阴影</h3><h5 id="4-1-文字阴影-text-shadow"><a href="#4-1-文字阴影-text-shadow" class="headerlink" title="4.1 文字阴影(text-shadow)"></a>4.1 文字阴影(text-shadow)</h5><blockquote><p>语法： text-shadow：水平偏移 垂直偏移 羽化大小 颜色</p></blockquote><h5 id="4-2-边框阴影-box-shadow"><a href="#4-2-边框阴影-box-shadow" class="headerlink" title="4.2 边框阴影(box-shadow)"></a>4.2 边框阴影(box-shadow)</h5><blockquote><p>语法：box-shadow：值<br>值说明：<br>（1）第一个值 ：Npx  阴影向水平方向偏移N个像素  正数往右 负数往左<br>（2）第二个值 ：Npx  阴影向垂直方向偏移N个像素  正数往下 负数往上<br>（3）第三个值 ：羽化大小 （模糊的大小）<br>（4）第四个值 ：阴影尺寸<br>（5）第五个值 ：颜色 默认值是黑色<br>（6）第六个参数： 内外阴影 默认是外阴影 内阴影是inset<br>（7）阴影可以写多个，中间用逗号隔开<br>（8）阴影可以简写，但是需要注意有一些值需要补0</p></blockquote><p><img src="/images/css/7.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;阴影&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">        body&#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-wrap: wrap;</span><br><span class="line">        &#125;</span><br><span class="line">div &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">            margin:20px;</span><br><span class="line">background-color: #84af9b;</span><br><span class="line">            display: flex;</span><br><span class="line">            color:#fff;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 第一个值 ：Npx  阴影向水平方向偏移N个像素  正数往右 负数往左 *&#x2F;</span><br><span class="line">div:nth-child(1)&#123;</span><br><span class="line">box-shadow: -10px 0 0 0 #c9c8a9;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 第二个值 ：Npx  阴影向垂直方向偏移N个像素  正数往下 负数往上 *&#x2F;</span><br><span class="line">div:nth-child(2)&#123;</span><br><span class="line">box-shadow: 0 10px 0 0 #c9c8a9 ;</span><br><span class="line">&#125;</span><br><span class="line">div:nth-child(3)&#123;</span><br><span class="line">box-shadow: -10px -10px 0 0 #c9c8a9;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 第三个值控制的模糊的程度 （羽化的大小）默认值0 *&#x2F;</span><br><span class="line">div:nth-child(4)&#123;</span><br><span class="line">box-shadow: 10px 10px 10px  0 #c9c8a9;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 第四个值控制的 阴影的大小 默认值0*&#x2F;</span><br><span class="line">div:nth-child(5)&#123;</span><br><span class="line">box-shadow: 10px 10px 0px 10px #c9c8a9;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 第五个值控制的 颜色 默认值黑色 可以使用rgba去控制透明度*&#x2F;</span><br><span class="line">div:nth-child(6)&#123;</span><br><span class="line">box-shadow: 10px 10px 10px 10px #c9c8a9 ;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 第六个值控制的 内外阴影 inset是内阴影 *&#x2F;</span><br><span class="line">div:nth-child(7)&#123;</span><br><span class="line">box-shadow: 10px 10px 10px 10px #c9c8a9 inset;</span><br><span class="line">&#125;</span><br><span class="line">div:nth-child(8) &#123;</span><br><span class="line">transition:all 1s;</span><br><span class="line">&#125;</span><br><span class="line">div:nth-child(8):hover&#123;</span><br><span class="line">box-shadow: 0 0 10px 10px #facdae,0 0 15px 5px #fc9a9d,0 0 15px 5px #ff426a;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;1&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;2&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;3&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;4&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;5&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;6&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;7&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;8&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="五-边框图片-了解"><a href="#五-边框图片-了解" class="headerlink" title="五. 边框图片 (了解)"></a>五. 边框图片 (了解)</h3><pre><code>语法：border-image：值</code></pre><blockquote><p>遵从的是九宫格式切图，上下左右分别来一刀<br><br>值说明：<br><br>（1）border-image-source:url(‘border.png’); 图片路径<br><br>（2）border-image-slice:26;图片切割，不要带单位，遵从九宫格式切图法（上下左右各来一刀）<br><br>（3）border-image-repeat:round或者stretch或者repeat; round没有瑕疵，stretch默认拉伸，repeat 平铺（可能有瑕疵）<br><br>（4）简写：border-image:url(‘border.png’) 26 round;</p></blockquote><h3 id="六-背景"><a href="#六-背景" class="headerlink" title="六. 背景"></a>六. 背景</h3><h5 id="6-1-控制背景图片的大小-（重要）"><a href="#6-1-控制背景图片的大小-（重要）" class="headerlink" title="6.1 控制背景图片的大小 （重要）"></a>6.1 控制背景图片的大小 （重要）</h5><pre><code>语法：background-size：值</code></pre><blockquote><p>（1）当只有一个值的情况下，宽度实现拉伸，并且高度会保持等比例，可以支持px，也可以支持百分比，百分比参照的是这个盒子本身的宽高<br><br>（2）当有两个值的情况下，宽度和高度会分别拉伸到对应的值，可能会变形，可以支持px，也可以支持百分比，百分比参照的是这个盒子本身的宽高<br><br>（3）contain 当图片的宽度或者是高度在缩放的时候有一个“碰到”了盒子的边缘，则停止变化，（宽度或高度满足一个即可）<br><br>（4）在contain的基础上保证不留白，这就是cover的效果（宽度和高度都需要满足）<br></p></blockquote><h5 id="6-2-多重背景"><a href="#6-2-多重背景" class="headerlink" title="6.2 多重背景"></a>6.2 多重背景</h5><blockquote><p>说明：背景图片之间用逗号隔开，可以写多组，最先渲染的图片有可能会遮住后面渲染的图片</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>:  <span class="selector-tag">url</span>(<span class="selector-tag">image</span>/1<span class="selector-class">.jpg</span>) 0 0 <span class="selector-tag">no-repeat</span>,</span><br><span class="line">         <span class="selector-tag">url</span>(<span class="selector-tag">image</span>/2<span class="selector-class">.jpg</span>) 220<span class="selector-tag">px</span> 0 <span class="selector-tag">no-repeat</span>,</span><br><span class="line">             <span class="selector-tag">url</span>(<span class="selector-tag">image</span>/3<span class="selector-class">.jpg</span>) 430<span class="selector-tag">px</span> 0  <span class="selector-tag">no-repeat</span>;</span><br></pre></td></tr></table></figure><h5 id="6-3-背景图片的基准点-了解"><a href="#6-3-背景图片的基准点-了解" class="headerlink" title="6.3 背景图片的基准点(了解)"></a>6.3 背景图片的基准点(了解)</h5><p>语法：background-origin：值</p><blockquote><p>值说明：<br><br>（1）border-box  ：忽略边框 直接从边框的起始 0 ，0点平铺<br><br>（2）padding-box： 默认值，忽略padding 直接从padding的起始 0 ，0点平铺<br><br>（3）content-box ：从内容部分开始平铺 跟padding有关系<br></p></blockquote><h3 id="七-圆角-border-radius"><a href="#七-圆角-border-radius" class="headerlink" title="七. 圆角(border-radius)"></a>七. 圆角(border-radius)</h3><ol><li>border-radius的值指的是边框的圆角半径。<br></li><li>border-radius与margin类似，可以分别指定4个圆角的大小（左上、右上、右下、左下）.</li><li>border-radius的圆角也可以是一个椭圆。<br></li><li>可以分别指定4个圆角是椭圆。<br></li><li>border-radius的值可以是px，也可以是 百分比。<br></li></ol><h3 id="八-渐变"><a href="#八-渐变" class="headerlink" title="八.  渐变"></a>八.  渐变</h3><h5 id="8-1-线性渐变-linear-gradient"><a href="#8-1-线性渐变-linear-gradient" class="headerlink" title="8.1 线性渐变(linear-gradient)"></a>8.1 线性渐变(linear-gradient)</h5><blockquote><p>Background-image:linear-gradient(渐变线角度值 | to 方位名词 , 颜色一 止色位置 , 颜色二 止色位置 , 颜色三 止色位置);<br><br>         （1）角度默认是180度，从上到下 ，0度从下到上，90度从左到右，总结就是小值到大值呈现顺时针<br><br>         （2）也可以是使用to 方位名词的形式去确定渐变的角度，更直观一些<br><br>         （3）止色的值（颜色在什么位置停止）可以是像素，和百分比，多用百分比去控制，如果后面颜色的值小于前面颜色的值过渡会很生硬<br></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//注意：渐变实际上相当与一张图片，因为需要加给<span class="selector-tag">background-image</span>才会生效</span><br><span class="line">//渐变的两个要求：有区间，有颜色变化。</span><br><span class="line">//最简单的渐变</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">red</span>, <span class="selector-tag">green</span>);</span><br><span class="line">//设定渐变的方向</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>, <span class="selector-tag">red</span>, <span class="selector-tag">green</span>);</span><br><span class="line">//也可以设定渐变的角度</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-tag">red</span>, <span class="selector-tag">green</span>);</span><br><span class="line">//设定渐变的范围</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>, <span class="selector-tag">red</span> 20%, <span class="selector-tag">green</span> 80%)</span><br><span class="line">//每一个区间表示渐变颜色的范围</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>, <span class="selector-tag">red</span> 20%, <span class="selector-tag">green</span> 20%)</span><br></pre></td></tr></table></figure><h5 id="8-2-径向渐变-radial-gradient"><a href="#8-2-径向渐变-radial-gradient" class="headerlink" title="8.2 径向渐变(radial-gradient)"></a>8.2 径向渐变(radial-gradient)</h5><blockquote><p>background:radial-gradient(圆的半径 at 圆心点的位置,颜色一 止色位置,颜色二 止色位置 ,颜色三 止色位置);<br><br>         （1）圆的半径分为水平和垂直半径<br><br>         （2）当圆的半径是一个值的情况下，是正圆，表示水平和垂直的半径都是一样的，当圆的半径为两个不一样的值情况下，是椭圆<br><br>         （3）圆心点的位置默认在中间，可以接受像素和半分比 及其方位名词<br><br>         （4）止色的值（颜色在什么位置停止）可以是像素，和百分比，多用百分比去控制</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*1. 最简单的渐变*/</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">background-image</span>: <span class="selector-tag">radial-gradient</span>(<span class="selector-tag">red</span>, <span class="selector-tag">green</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2. 指定圆的半径和圆心*/</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">background-image</span>: <span class="selector-tag">radial-gradient</span>(200<span class="selector-tag">px</span> <span class="selector-tag">at</span> <span class="selector-tag">center</span>, <span class="selector-tag">red</span>, <span class="selector-tag">green</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*3. 指定椭圆*/</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">background-image</span>: <span class="selector-tag">radial-gradient</span>(200<span class="selector-tag">px</span> 80<span class="selector-tag">px</span> <span class="selector-tag">at</span> <span class="selector-tag">center</span>, <span class="selector-tag">red</span>, <span class="selector-tag">green</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*4. 指定范围</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    background-image: radial-gradient(200px at center, green 50%, red 50%);</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><h5 id="8-3-私有前缀"><a href="#8-3-私有前缀" class="headerlink" title="8.3 私有前缀"></a>8.3 私有前缀</h5><blockquote><p>作用：兼容低版本的一些高级浏览器，或者一些特定的css3属性需要添加私有前缀才起作用。<br><br> 每一条css3属性合理来说都需要添加对应浏览器的前缀，以保证其兼容性:<br></p></blockquote><blockquote><p>谷歌 苹果：-webkit- <br><br> 火狐：-moz-<br><br> IE：-ms-<br><br> o：-o-<br></p></blockquote><blockquote><p>小细节：在手机端，一般来说只需要写一个-webkit-（针对国内的绝大部分手机端）<br>         添加的位置：大部分都是直接添加到最前面，css2没有的属性都是添加在最前面的，有一些是css2就有的属性是添加在后面的（background：-webkit-linear-gradient（））</p></blockquote><h3 id="九-2D转换"><a href="#九-2D转换" class="headerlink" title="九.  2D转换"></a>九.  2D转换</h3><h5 id="9-1-过渡"><a href="#9-1-过渡" class="headerlink" title="9.1 过渡"></a>9.1 过渡</h5><blockquote><p>transition：过渡是CSS3中具有颠覆性的特征之一，可以实现元素不同状态间的平滑过渡（补间动画），经常用来制作动画效果。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//<span class="selector-tag">transition-property</span>：设置过渡属性</span><br><span class="line">//也可以是<span class="selector-tag">width</span>,<span class="selector-tag">height</span></span><br><span class="line"><span class="selector-tag">transition-property</span><span class="selector-pseudo">:all</span>;</span><br><span class="line"></span><br><span class="line">//<span class="selector-tag">transition-duration</span>:设置过渡时间</span><br><span class="line"><span class="selector-tag">transition-duration</span><span class="selector-pseudo">:1s</span>;<span class="comment">/*过渡的时间*/</span></span><br><span class="line"></span><br><span class="line">//<span class="selector-tag">transition-delay</span>：设置过渡延时</span><br><span class="line"><span class="selector-tag">transition-delay</span><span class="selector-pseudo">:2s</span>;<span class="comment">/*2秒之后才进行动画*/</span></span><br><span class="line"></span><br><span class="line">//<span class="selector-tag">transition-timing-function</span>:设置过渡的速度</span><br><span class="line">//<span class="selector-tag">linear</span>，<span class="selector-tag">ease</span>，<span class="selector-tag">ease-in</span>，<span class="selector-tag">ease-out</span>，<span class="selector-tag">ease-in-out</span>， <span class="selector-tag">steps</span>(10)</span><br><span class="line"><span class="selector-tag">transition-timing-function</span><span class="selector-pseudo">:linear</span>;</span><br></pre></td></tr></table></figure><h5 id="9-2-transform"><a href="#9-2-transform" class="headerlink" title="9.2 transform"></a>9.2 transform</h5><blockquote><p>transform: 转换，是CSS3最具颠覆性的几个特性之一，既可以用于2D转换，也可以用于3D转换。<br>transform：2D转换，元素在平面上实现移动、旋转、缩放、斜切等操作.</p></blockquote><h5 id="1-scale缩放"><a href="#1-scale缩放" class="headerlink" title="(1) scale缩放"></a>(1) scale缩放</h5><blockquote><p>注意：<br>scale接收的值是倍数，因此没有单位<br>scale可以是一个值，如果是一个值，不是说仅仅缩放宽度，高度也会等比例的缩放。<br>可以通过transition-origin设定旋转原点</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scaleX</span>(0.5);//让宽度变化</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scaleY</span>(0.5);//让高度变化，注意不能写多个<span class="selector-tag">transform</span>，不然会覆盖。</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(0.5);//让宽度和高度同时变化</span><br></pre></td></tr></table></figure><h5 id="2-translate平移"><a href="#2-translate平移" class="headerlink" title="(2) translate平移"></a>(2) translate平移</h5><blockquote><p>注意：<br>translate的值可以是px，也可以是百分比，如果是百分比，那么参照的是自身的宽高。<br>translate移动的元素并不会影响其他盒子，类似于相对定位。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(100<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateY</span>(100<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(100<span class="selector-tag">px</span>, 100<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(50%, 50%);</span><br></pre></td></tr></table></figure><h5 id="3-rotate旋转"><a href="#3-rotate旋转" class="headerlink" title="(3) rotate旋转"></a>(3) rotate旋转</h5><blockquote><p>注意：<br>单位是deg，角度，不是px<br>正值顺时针转，负值逆时针转<br>可以通过transition-origin设定旋转原点<br>转换原点写在A状态，不能写在B状态</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(360<span class="selector-tag">deg</span>);//旋转360度</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(<span class="selector-tag">-360deg</span>);//逆时针旋转360度</span><br></pre></td></tr></table></figure><h5 id="4-skew斜切"><a href="#4-skew斜切" class="headerlink" title="(4) skew斜切"></a>(4) skew斜切</h5><blockquote><p>skew在实际开发中，是用的最少的一个属性。一般来说，x和y只会倾斜其中的一个.      </p></blockquote><pre><code>/*在水平方向倾斜30deg*/transform: skewX(30deg);/*在垂直方向倾斜30deg*/transform: skewY(30deg);</code></pre><h5 id="5-transform-origin转换原点"><a href="#5-transform-origin转换原点" class="headerlink" title="(5) transform-origin转换原点"></a>(5) transform-origin转换原点</h5><blockquote><p>通过transform-origin可以设置转换的中心原点。</p></blockquote><pre><code>transform-origin: center center;transform-origin: 40px 40px;</code></pre><h5 id="6-转换合写问题"><a href="#6-转换合写问题" class="headerlink" title="(6) 转换合写问题"></a>(6) 转换合写问题</h5><pre><code> transform:translateX(800px)  scale(1.5)  rotate(360deg) ;   </code></pre><blockquote><ol><li>transform属性只能写一个，如果写了多个会覆盖</li><li>transform属性可以连写，但是顺序对效果有影响的，因为它会在第一个效果的基础上执行第二个效果，然后执行第三个效果（通常会把rotate放后面）</li><li>如果对transform进行过度效果的时候，初始状态和结束状态一一对应</li></ol></blockquote><h3 id="十-3D转换"><a href="#十-3D转换" class="headerlink" title="十. 3D转换"></a>十. 3D转换</h3><h5 id="1-rotateX"><a href="#1-rotateX" class="headerlink" title="(1) rotateX"></a>(1) rotateX</h5><blockquote><p>让元素围绕着X轴进行旋转<br>  （1）正值表示推到，负值表示鞠躬<br>  （2）没有透视的3D是看不出来方向</p></blockquote><h5 id="2-rotateY"><a href="#2-rotateY" class="headerlink" title="(2) rotateY"></a>(2) rotateY</h5><blockquote><p>围绕着Y轴进行旋转<br>（1）正数是逆时针 （站在右边推门），负数是顺时针（站在左边推门）</p></blockquote><h5 id="3-定义元素背过去是否可见"><a href="#3-定义元素背过去是否可见" class="headerlink" title="(3)定义元素背过去是否可见"></a>(3)定义元素背过去是否可见</h5><pre><code>  backface-visibility: visible|hidden;</code></pre><blockquote><p>说明：visible表示可见，hidden表示不可见<br>测试贝塞尔曲线的网址：<a href="http://xuanfengge.com/easeing/ceaser/">http://xuanfengge.com/easeing/ceaser/</a></p></blockquote><h5 id="4-translateZ"><a href="#4-translateZ" class="headerlink" title="(4) translateZ"></a>(4) translateZ</h5><blockquote><p>就是在Z轴上来回移动，但是如果没有透视的情况下，完全看不出效果<br>小经验：translateZ和rotate结合会产生不一样的3D效果，不同的顺序的效果截然不同，如果先rotate 在translateZ 元素是在空间里面发生旋转 而如果是translateZ在rotate 元素是在直线上发生旋转</p></blockquote><h5 id="（5）透视-（景深）"><a href="#（5）透视-（景深）" class="headerlink" title="（5）透视 （景深）"></a>（5）透视 （景深）</h5><pre><code>perspective：值</code></pre><blockquote><p>说明：透视值越小，透视效果越强，值越大，透视效果越弱，透视添加在父级身上.</p></blockquote><h5 id="（6）灭点（透视点，消失点）"><a href="#（6）灭点（透视点，消失点）" class="headerlink" title="（6）灭点（透视点，消失点）"></a>（6）灭点（透视点，消失点）</h5><pre><code>perspective-origin：值</code></pre><blockquote><p>说明：值可以是像素，也可以是百分比，还可以是方位名词，默认值是50%，50%（中心点）.</p></blockquote><h5 id="（7）transform-style"><a href="#（7）transform-style" class="headerlink" title="（7）transform-style"></a>（7）transform-style</h5><pre><code>transform-style:preserve-3d;</code></pre><blockquote><p>作用：规定被嵌套元素如何在3D空间中显示<br>值说明：<br><br>flat是默认值，让子元素不保留其3D位置，<br> preserve-3d  让子元素保留其3D位置 ，加在父亲身上<br></p></blockquote><p>小总结：透视 灭点 transform-style都是添加在父级身上<br>关键： 当元素发生3D翻转的时候，整个坐标系也跟着发生了翻转！！</p><h3 id="十一-C3动画"><a href="#十一-C3动画" class="headerlink" title="十一. C3动画"></a>十一. C3动画</h3><blockquote><p>动画也是CSS3中具有颠覆性的特征之一，可以通过设置多个节点来精确控制一个或者一组动画，常用来实现复杂的动画效果。</p></blockquote><h5 id="11-1-动画与过渡的区别："><a href="#11-1-动画与过渡的区别：" class="headerlink" title="11.1 动画与过渡的区别："></a>11.1 动画与过渡的区别：</h5><blockquote><p>(1) 过渡必须触发，需要两个状态的改变。<br><br>(2)动画可以一直运行下去，不需要触发。实现效果与过渡差不多:</p></blockquote><blockquote><p>1.通过@keyframes指定动画序列<br><br>2.通过百分比或者from/to将动画分割成多个节点<br><br>3.在各个节点中分别定义动画属性<br><br>4.通过animation将动画应用于相应的元素</p></blockquote><h5 id="11-2-animation详解"><a href="#11-2-animation详解" class="headerlink" title="11.2 animation详解:"></a>11.2 animation详解:</h5><blockquote><p>animation是一个复合属性，一共有8个参数:<br>animation-name:动画名称，由@keyframes定义的<br>animation-duration：动画的持续时间<br>animation-timing-function：动画的过渡类型<br>animation-delay：动画的延迟时间<br>animation-iteration-count：动画的循环次数<br>animation-direction：设置动画在循环中是否反向运动<br>animation-fill-mode：设置动画时间之外的状态<br>animattion-play-state:设置动画的状态。</p></blockquote><blockquote><p>值说明：<br><br>（1）自定义动画名 <br><br>（2）动画的持续时间 单位是s或者ms<br><br>（3）动画的曲线<br><br>（4）动画从何时开始<br><br>（5）控制动画执行的次数  没有单位， 一直执行：infinite<br><br>（6）控制动画是否逆序播放  默认值normal  逆序：alternate<br><br>（7）控制动画的播放和暂停  默认值是播放：running   暂停：paused<br><br>（8）动画最后的停留位置  forwards 让动画停留在最后一帧<br><br>动画一定要先写animation 然后搭配@keyframes去写自定义的动画 </p></blockquote><pre><code>    &lt;style&gt;        .box &#123;            width: 200px;            height: 200px;            background-color: cyan;            position: absolute;            left: 0;            top: 0;            animation: donghua 2s ease ;        &#125;        @keyframes donghua &#123;            0% &#123;                width: 200px;                height: 200px;                background-color: cyan;                border-radius: 0;            &#125;            100%&#123;                width: 400px;                height: 400px;                background-color: green;                border-radius: 50%;            &#125;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><h5 id="11-3-帧动画"><a href="#11-3-帧动画" class="headerlink" title="11.3 帧动画"></a>11.3 帧动画</h5><pre><code>steps（帧数）</code></pre><blockquote><p>其实就是让动画分成多少步去执行，steps（）里面的数值是总画面数 - 1 ，在制作精灵图的时候每个画面的宽度尽量一致，并且建议在一行里面摆放.</p></blockquote><h5 id="11-4-animate-css库的使用"><a href="#11-4-animate-css库的使用" class="headerlink" title="11.4 animate.css库的使用"></a>11.4 animate.css库的使用</h5><blockquote><p>官网：<a href="https://daneden.github.io/animate.css/">https://daneden.github.io/animate.css/</a><br>作用：将一切常见的动画直接封装，开发者不需要考虑实现过程，只需要添加对应的类就能实现动画效果<br>使用步骤：<br>（1）将下载下来的animate.css 引入到你的项目中；<br>（2）去官网获取想要的效果 给对应的元素添加上animated 类 （必填）和你想要的效果的类；</p></blockquote><h3 id="12-弹性布局-flex"><a href="#12-弹性布局-flex" class="headerlink" title="12. 弹性布局 flex"></a>12. 弹性布局 flex</h3><blockquote><p>阮一峰的博客<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
